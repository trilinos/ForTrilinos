/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    throw std::logic_error(MSG); return NULLRETURN;


/* Contract support */
#define SWIG_contract_assert(NULLRETURN, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, NULLRETURN); }


#undef SWIG_exception_impl
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    swig::fortran_store_exception(CODE, MSG); return NULLRETURN;


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <vector>

SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,std::vector< int >::size_type index,std::vector< int >::const_reference v){
        // TODO: check range
        (*self)[index] = v;
    }
SWIGINTERN std::vector< int >::value_type std_vector_Sl_int_Sg__get(std::vector< int > *self,std::vector< int >::size_type index){
        // TODO: check range
        return (*self)[index];
    }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,std::vector< double >::size_type index,std::vector< double >::const_reference v){
        // TODO: check range
        (*self)[index] = v;
    }
SWIGINTERN std::vector< double >::value_type std_vector_Sl_double_Sg__get(std::vector< double > *self,std::vector< double >::size_type index){
        // TODO: check range
        return (*self)[index];
    }
SWIGINTERN void std_vector_Sl_long_SS_long_Sg__set(std::vector< long long > *self,std::vector< long long >::size_type index,std::vector< long long >::const_reference v){
        // TODO: check range
        (*self)[index] = v;
    }
SWIGINTERN std::vector< long long >::value_type std_vector_Sl_long_SS_long_Sg__get(std::vector< long long > *self,std::vector< long long >::size_type index){
        // TODO: check range
        return (*self)[index];
    }

#include <utility>


#include "Teuchos_BLAS_types.hpp"
#include "Teuchos_DataAccess.hpp"


extern "C" {
extern int ierr;
extern char serr[1024];
}


#include <string>


#include <algorithm>


namespace swig
{
// Stored exception message
std::string fortran_last_exception_msg;

// Call this function before any new action
void fortran_check_unhandled_exception()
{
    if (::ierr != 0)
    {
        throw std::runtime_error(
                "An unhandled exception occurred in $symname: "
                + fortran_last_exception_msg);
    }
}

// Save an exception to the fortran error code and string
void fortran_store_exception(int code, const char *msg)
{
    ::ierr = code;

    // Save the message to a std::string first
    fortran_last_exception_msg = msg;

    std::size_t msg_size = std::min<std::size_t>(
            fortran_last_exception_msg.size(),
            1024);

    // Copy to space-padded Fortran string
    char* dst = serr;
    dst = std::copy(fortran_last_exception_msg.begin(),
                    fortran_last_exception_msg.begin() + msg_size,
                    dst);
    std::fill(dst, serr + 1024, ' ');
}
} // end namespace swig


#include "Teuchos_Exceptions.hpp"


#include "Teuchos_RCP.hpp"


#include "Teuchos_Array.hpp"


#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


namespace swig {
template<class T>
struct SwigfArrayWrapper
{
    T* data;
    std::size_t size;
};
}

SWIGINTERN Teuchos::Array< int > *new_Teuchos_Array_Sl_int_Sg___SWIG_5(std::pair< int *,std::size_t > view){
  Teuchos::Array<int>* arr = new Teuchos::Array<int>(view.second);
  for (size_t i = 0; i < view.second; i++)
    (*arr)[i] = view.first[i];

  return arr;
}
SWIGINTERN Teuchos::Array< long long > *new_Teuchos_Array_Sl_long_SS_long_Sg___SWIG_5(std::pair< long long *,std::size_t > view){
  Teuchos::Array<long long>* arr = new Teuchos::Array<long long>(view.second);
  for (size_t i = 0; i < view.second; i++)
    (*arr)[i] = view.first[i];

  return arr;
}
SWIGINTERN Teuchos::Array< double > *new_Teuchos_Array_Sl_double_Sg___SWIG_5(std::pair< double *,std::size_t > view){
  Teuchos::Array<double>* arr = new Teuchos::Array<double>(view.second);
  for (size_t i = 0; i < view.second; i++)
    (*arr)[i] = view.first[i];

  return arr;
}

#include "Teuchos_ArrayViewDecl.hpp"

SWIGINTERN Teuchos::ArrayView< int > *new_Teuchos_ArrayView_Sl_int_Sg___SWIG_2(std::pair< int *,std::size_t > view){
  return new Teuchos::ArrayView<int>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< int const > *new_Teuchos_ArrayView_Sl_int_SS_const_Sg___SWIG_2(std::pair< int const *,std::size_t > view){
  return new Teuchos::ArrayView<const int>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< long long > *new_Teuchos_ArrayView_Sl_long_SS_long_Sg___SWIG_2(std::pair< long long *,std::size_t > view){
  return new Teuchos::ArrayView<long long>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< long long const > *new_Teuchos_ArrayView_Sl_long_SS_long_SS_const_Sg___SWIG_2(std::pair< long long const *,std::size_t > view){
  return new Teuchos::ArrayView<const long long>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< double > *new_Teuchos_ArrayView_Sl_double_Sg___SWIG_2(std::pair< double *,std::size_t > view){
  return new Teuchos::ArrayView<double>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< double const > *new_Teuchos_ArrayView_Sl_double_SS_const_Sg___SWIG_2(std::pair< double const *,std::size_t > view){
  return new Teuchos::ArrayView<const double>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< std::size_t > *new_Teuchos_ArrayView_Sl_std_size_t_Sg___SWIG_2(std::pair< std::size_t *,std::size_t > view){
  return new Teuchos::ArrayView<size_t>(view.first, view.second);
}
SWIGINTERN Teuchos::ArrayView< std::size_t const > *new_Teuchos_ArrayView_Sl_std_size_t_SS_const_Sg___SWIG_2(std::pair< std::size_t const *,std::size_t > view){
  return new Teuchos::ArrayView<const size_t>(view.first, view.second);
}

#include "Teuchos_Comm.hpp"
#ifdef HAVE_MPI
# include "Teuchos_DefaultMpiComm.hpp"
#else
  typedef int MPI_Comm;
#endif
#include "Teuchos_DefaultSerialComm.hpp"

SWIGINTERN Teuchos::Comm< int > *new_Teuchos_Comm_Sl_int_Sg___SWIG_0(MPI_Comm rawMpiComm){
#ifdef HAVE_MPI
      return static_cast<Teuchos::Comm<int>*>(new Teuchos::MpiComm<int>(rawMpiComm));
#else
      throw std::runtime_error("MPI based constructor cannot be called when MPI is not enabled.");
#endif
    }
SWIGINTERN Teuchos::Comm< int > *new_Teuchos_Comm_Sl_int_Sg___SWIG_1(){
#ifdef HAVE_MPI
      return static_cast<Teuchos::Comm<int>*>(new Teuchos::MpiComm<int>(MPI_COMM_WORLD));
#else
      return static_cast<Teuchos::Comm<int>*>(new Teuchos::SerialComm<int>());
#endif
    }
SWIGINTERN int Teuchos_Comm_Sl_int_Sg__getRank(Teuchos::Comm< int > const *self){
      return self->getRank();
    }
SWIGINTERN int Teuchos_Comm_Sl_int_Sg__getSize(Teuchos::Comm< int > const *self){
      return self->getSize();
    }
SWIGINTERN void Teuchos_Comm_Sl_int_Sg__barrier(Teuchos::Comm< int > const *self){
      self->barrier();
    }

#include "Teuchos_ParameterList.hpp"


#include <string>

SWIGINTERN void std_string_set(std::string *self,std::string::size_type pos,std::string::value_type v){
        // TODO: check range
        (*self)[pos] = v;
    }
SWIGINTERN std::string::value_type std_string_get(std::string *self,std::string::size_type pos){
        // TODO: check range
        return (*self)[pos];
    }
SWIGINTERN Teuchos::ParameterList *new_Teuchos_ParameterList__SWIG_0(){
    return new Teuchos::ParameterList();
}
SWIGINTERN Teuchos::ParameterList *new_Teuchos_ParameterList__SWIG_1(std::pair< char const *,std::size_t > name){
    return new Teuchos::ParameterList(std::string(name.first, name.second));
}
SWIGINTERN void Teuchos_ParameterList_get_scalar_Sl_double_Sg___SWIG_0(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,double &value){
    value = self->get<double>(std::string(name.first, name.second));
}
SWIGINTERN void Teuchos_ParameterList_set_scalar_Sl_double_Sg___SWIG_0(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,double const &value){
    self->set(std::string(name.first, name.second), value);
}
SWIGINTERN void Teuchos_ParameterList_get_scalar_Sl_int_Sg___SWIG_1(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,int &value){
    value = self->get<int>(std::string(name.first, name.second));
}
SWIGINTERN void Teuchos_ParameterList_set_scalar_Sl_int_Sg___SWIG_1(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,int const &value){
    self->set(std::string(name.first, name.second), value);
}
SWIGINTERN void Teuchos_ParameterList_set__SWIG_2(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,std::pair< char const *,std::size_t > value){
    self->set(std::string(name.first,  name.second),
               std::string(value.first, value.second));
}
SWIGINTERN void Teuchos_ParameterList_get__SWIG_2(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,std::pair< char *,std::size_t > value){
    const std::string& str
        = self->get<std::string>(std::string(name.first, name.second));

    // FIXME: should we check the size here?
    if (value.second < (size_t)str.size()) {
        std::ostringstream os;
        os << "Array size mismatch: " << str.size() << " > " << value.second;
        throw std::range_error(os.str());
    }
    std::copy(str.begin(), str.end(), value.first);
    std::fill_n(value.first+str.size(), value.second - str.size(), ' ');
}
SWIGINTERN void Teuchos_ParameterList_set_array_Sl_double_Sg___SWIG_3(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,std::pair< double const *,std::size_t > value){
    typedef Teuchos::Array<double> ArrayT;
    self->set(std::string(name.first, name.second),
               ArrayT(value.first, value.first + value.second));
}
SWIGINTERN void Teuchos_ParameterList_get_array_Sl_double_Sg___SWIG_3(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,std::pair< double const *,std::size_t > value){
    typedef Teuchos::Array<double> ArrayT;
    const ArrayT& arr
        = self->get<ArrayT>(std::string(name.first, name.second));

    // FIXME: should we check the size here?
    if (value.second < (size_t)arr.size()) {
        std::ostringstream os;
        os << "Array size mismatch: " << arr.size() << " != " << value.second;
        throw std::range_error(os.str());
    }


    value.first = arr.getRawPtr();
    value.second = arr.size();
}
SWIGINTERN void Teuchos_ParameterList_set_array_Sl_int_Sg___SWIG_4(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,std::pair< int const *,std::size_t > value){
    typedef Teuchos::Array<int> ArrayT;
    self->set(std::string(name.first, name.second),
               ArrayT(value.first, value.first + value.second));
}
SWIGINTERN void Teuchos_ParameterList_get_array_Sl_int_Sg___SWIG_4(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,std::pair< int const *,std::size_t > value){
    typedef Teuchos::Array<int> ArrayT;
    const ArrayT& arr
        = self->get<ArrayT>(std::string(name.first, name.second));

    // FIXME: should we check the size here?
    if (value.second < (size_t)arr.size()) {
        std::ostringstream os;
        os << "Array size mismatch: " << arr.size() << " != " << value.second;
        throw std::range_error(os.str());
    }


    value.first = arr.getRawPtr();
    value.second = arr.size();
}
SWIGINTERN void Teuchos_ParameterList_set__SWIG_5(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,Teuchos::RCP< Teuchos::ParameterList > plist){
    self->set(std::string(name.first, name.second), *plist);
}
SWIGINTERN void Teuchos_ParameterList_get__SWIG_5(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name,Teuchos::RCP< Teuchos::ParameterList > &plist){
    plist = Teuchos::sublist(
            Teuchos::rcpFromRef(*self),
            std::string(name.first, name.second),
            true); // must exist
}
SWIGINTERN Teuchos::RCP< Teuchos::ParameterList > Teuchos_ParameterList_sublist(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name){
    return Teuchos::sublist(
            Teuchos::rcpFromRef(*self),
            std::string(name.first, name.second));
}
SWIGINTERN int Teuchos_ParameterList_get_length(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name){
    std::string key(name.first, name.second);





       if (self->isType<std::string >(key))      return self->get<std::string >(key).size();;
       if (self->isType<Teuchos::Array<int> >(key))      return self->get<Teuchos::Array<int> >(key).size();
       if (self->isType<Teuchos::Array<double> >(key))      return self->get<Teuchos::Array<double> >(key).size();


    // No type found
    return -1;
}
SWIGINTERN void Teuchos_ParameterList_remove(Teuchos::ParameterList *self,std::pair< char const *,std::size_t > name){
    self->remove(std::string(name.first, name.second));
}
SWIGINTERN bool Teuchos_ParameterList_is_parameter(Teuchos::ParameterList const *self,std::pair< char const *,std::size_t > name){
    return self->isParameter(std::string(name.first, name.second));
}

#include "Teuchos_XMLParameterListCoreHelpers.hpp"


void load_from_xml(const Teuchos::RCP<Teuchos::ParameterList>& plist,
                   std::pair<const char*, size_t> xml)
{
    Teuchos::updateParametersFromXmlFile(std::string(xml.first, xml.second),
                                         Teuchos::inOutArg(*plist));
}

void save_to_xml(const Teuchos::ParameterList& plist,
                 std::pair<const char*, size_t> xml)
{
    Teuchos::writeParameterListToXmlFile(plist, std::string(xml.first, xml.second));
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void * swigc_new_VectorInt__SWIG_0() {
  void * fresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_VectorInt__SWIG_1(unsigned long const *farg1) {
  void * fresult ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = *farg1;
  result = (std::vector< int > *)new std::vector< int >(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_VectorInt__SWIG_2(unsigned long const *farg1, int const *farg2) {
  void * fresult ;
  std::vector< int >::size_type arg1 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< std::vector< int >::value_type * >(const_cast< int* >(farg2));
  result = (std::vector< int > *)new std::vector< int >(arg1,(std::vector< int >::value_type const &)*arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_VectorInt_size(void const *farg1) {
  unsigned long fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = static_cast< std::vector< int > * >(const_cast< void* >(farg1));
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_VectorInt_capacity(void const *farg1) {
  unsigned long fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = static_cast< std::vector< int > * >(const_cast< void* >(farg1));
  result = (std::vector< int >::size_type)((std::vector< int > const *)arg1)->capacity();
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_VectorInt_empty(void const *farg1) {
  bool fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  arg1 = static_cast< std::vector< int > * >(const_cast< void* >(farg1));
  result = (bool)((std::vector< int > const *)arg1)->empty();
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_VectorInt_clear(void *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  (arg1)->clear();
  
}


SWIGEXPORT void swigc_VectorInt_reserve(void *farg1, unsigned long const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  arg2 = *farg2;
  (arg1)->reserve(arg2);
  
}


SWIGEXPORT void swigc_VectorInt_resize__SWIG_0(void *farg1, unsigned long const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_VectorInt_resize__SWIG_1(void *farg1, unsigned long const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< std::vector< int >::value_type * >(const_cast< int* >(farg3));
  (arg1)->resize(arg2,(std::vector< int >::value_type const &)*arg3);
  
}


SWIGEXPORT void swigc_VectorInt_push_back(void *farg1, int const *farg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  arg2 = reinterpret_cast< std::vector< int >::value_type * >(const_cast< int* >(farg2));
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
  
}


SWIGEXPORT int swigc_VectorInt_front(void const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  arg1 = static_cast< std::vector< int > * >(const_cast< void* >(farg1));
  result = (int *) &((std::vector< int > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT int swigc_VectorInt_back(void const *farg1) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *result = 0 ;
  
  arg1 = static_cast< std::vector< int > * >(const_cast< void* >(farg1));
  result = (int *) &((std::vector< int > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_VectorInt_set(void *farg1, unsigned long const *farg2, int const *farg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  int *arg3 = 0 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< int * >(const_cast< int* >(farg3));
  std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  
}


SWIGEXPORT int swigc_VectorInt_get(void *farg1, unsigned long const *farg2) {
  int fresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  std::vector< int >::value_type result;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  arg2 = *farg2;
  result = (std::vector< int >::value_type)std_vector_Sl_int_Sg__get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_VectorInt(void *farg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = static_cast< std::vector< int > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_VectorDouble__SWIG_0() {
  void * fresult ;
  std::vector< double > *result = 0 ;
  
  result = (std::vector< double > *)new std::vector< double >();
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_VectorDouble__SWIG_1(unsigned long const *farg1) {
  void * fresult ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  arg1 = *farg1;
  result = (std::vector< double > *)new std::vector< double >(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_VectorDouble__SWIG_2(unsigned long const *farg1, double const *farg2) {
  void * fresult ;
  std::vector< double >::size_type arg1 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< std::vector< double >::value_type * >(const_cast< double* >(farg2));
  result = (std::vector< double > *)new std::vector< double >(arg1,(std::vector< double >::value_type const &)*arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_VectorDouble_size(void const *farg1) {
  unsigned long fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = static_cast< std::vector< double > * >(const_cast< void* >(farg1));
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_VectorDouble_capacity(void const *farg1) {
  unsigned long fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  arg1 = static_cast< std::vector< double > * >(const_cast< void* >(farg1));
  result = (std::vector< double >::size_type)((std::vector< double > const *)arg1)->capacity();
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_VectorDouble_empty(void const *farg1) {
  bool fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  arg1 = static_cast< std::vector< double > * >(const_cast< void* >(farg1));
  result = (bool)((std::vector< double > const *)arg1)->empty();
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_VectorDouble_clear(void *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  (arg1)->clear();
  
}


SWIGEXPORT void swigc_VectorDouble_reserve(void *farg1, unsigned long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  arg2 = *farg2;
  (arg1)->reserve(arg2);
  
}


SWIGEXPORT void swigc_VectorDouble_resize__SWIG_0(void *farg1, unsigned long const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_VectorDouble_resize__SWIG_1(void *farg1, unsigned long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< std::vector< double >::value_type * >(const_cast< double* >(farg3));
  (arg1)->resize(arg2,(std::vector< double >::value_type const &)*arg3);
  
}


SWIGEXPORT void swigc_VectorDouble_push_back(void *farg1, double const *farg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  arg2 = reinterpret_cast< std::vector< double >::value_type * >(const_cast< double* >(farg2));
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
  
}


SWIGEXPORT double swigc_VectorDouble_front(void const *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  arg1 = static_cast< std::vector< double > * >(const_cast< void* >(farg1));
  result = (double *) &((std::vector< double > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT double swigc_VectorDouble_back(void const *farg1) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  double *result = 0 ;
  
  arg1 = static_cast< std::vector< double > * >(const_cast< void* >(farg1));
  result = (double *) &((std::vector< double > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_VectorDouble_set(void *farg1, unsigned long const *farg2, double const *farg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  double *arg3 = 0 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< double * >(const_cast< double* >(farg3));
  std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  
}


SWIGEXPORT double swigc_VectorDouble_get(void *farg1, unsigned long const *farg2) {
  double fresult ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  std::vector< double >::value_type result;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  arg2 = *farg2;
  result = (std::vector< double >::value_type)std_vector_Sl_double_Sg__get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_VectorDouble(void *farg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  arg1 = static_cast< std::vector< double > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_VectorLongLong__SWIG_0() {
  void * fresult ;
  std::vector< long long > *result = 0 ;
  
  result = (std::vector< long long > *)new std::vector< long long >();
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_VectorLongLong__SWIG_1(unsigned long const *farg1) {
  void * fresult ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long > *result = 0 ;
  
  arg1 = *farg1;
  result = (std::vector< long long > *)new std::vector< long long >(arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_VectorLongLong__SWIG_2(unsigned long const *farg1, long long const *farg2) {
  void * fresult ;
  std::vector< long long >::size_type arg1 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  std::vector< long long > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< std::vector< long long >::value_type * >(const_cast< long long* >(farg2));
  result = (std::vector< long long > *)new std::vector< long long >(arg1,(std::vector< long long >::value_type const &)*arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_VectorLongLong_size(void const *farg1) {
  unsigned long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  arg1 = static_cast< std::vector< long long > * >(const_cast< void* >(farg1));
  result = (std::vector< long long >::size_type)((std::vector< long long > const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_VectorLongLong_capacity(void const *farg1) {
  unsigned long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type result;
  
  arg1 = static_cast< std::vector< long long > * >(const_cast< void* >(farg1));
  result = (std::vector< long long >::size_type)((std::vector< long long > const *)arg1)->capacity();
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_VectorLongLong_empty(void const *farg1) {
  bool fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  bool result;
  
  arg1 = static_cast< std::vector< long long > * >(const_cast< void* >(farg1));
  result = (bool)((std::vector< long long > const *)arg1)->empty();
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_VectorLongLong_clear(void *farg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  (arg1)->clear();
  
}


SWIGEXPORT void swigc_VectorLongLong_reserve(void *farg1, unsigned long const *farg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  arg2 = *farg2;
  (arg1)->reserve(arg2);
  
}


SWIGEXPORT void swigc_VectorLongLong_resize__SWIG_0(void *farg1, unsigned long const *farg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_VectorLongLong_resize__SWIG_1(void *farg1, unsigned long const *farg2, long long const *farg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  std::vector< long long >::value_type *arg3 = 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< std::vector< long long >::value_type * >(const_cast< long long* >(farg3));
  (arg1)->resize(arg2,(std::vector< long long >::value_type const &)*arg3);
  
}


SWIGEXPORT void swigc_VectorLongLong_push_back(void *farg1, long long const *farg2) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::value_type *arg2 = 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  arg2 = reinterpret_cast< std::vector< long long >::value_type * >(const_cast< long long* >(farg2));
  (arg1)->push_back((std::vector< long long >::value_type const &)*arg2);
  
}


SWIGEXPORT long long swigc_VectorLongLong_front(void const *farg1) {
  long long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(const_cast< void* >(farg1));
  result = (long long *) &((std::vector< long long > const *)arg1)->front();
  fresult = *result;
  return fresult;
}


SWIGEXPORT long long swigc_VectorLongLong_back(void const *farg1) {
  long long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  long long *result = 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(const_cast< void* >(farg1));
  result = (long long *) &((std::vector< long long > const *)arg1)->back();
  fresult = *result;
  return fresult;
}


SWIGEXPORT void swigc_VectorLongLong_set(void *farg1, unsigned long const *farg2, long long const *farg3) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  long long *arg3 = 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< long long * >(const_cast< long long* >(farg3));
  std_vector_Sl_long_SS_long_Sg__set(arg1,arg2,(long long const &)*arg3);
  
}


SWIGEXPORT long long swigc_VectorLongLong_get(void *farg1, unsigned long const *farg2) {
  long long fresult ;
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  std::vector< long long >::size_type arg2 ;
  std::vector< long long >::value_type result;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  arg2 = *farg2;
  result = (std::vector< long long >::value_type)std_vector_Sl_long_SS_long_Sg__get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_VectorLongLong(void *farg1) {
  std::vector< long long > *arg1 = (std::vector< long long > *) 0 ;
  
  arg1 = static_cast< std::vector< long long > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_TeuchosArrayInt__SWIG_0() {
  void * fresult ;
  Teuchos::Array< int > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new Teuchos::Array< int >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayInt__SWIG_1(int const *farg1, int const *farg2) {
  void * fresult ;
  Teuchos::Array< int >::size_type arg1 ;
  Teuchos::Array< int >::value_type *arg2 = 0 ;
  Teuchos::Array< int > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< Teuchos::Array< int >::value_type * >(const_cast< int* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new Teuchos::Array< int >(arg1,(Teuchos::Array< int >::value_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayInt__SWIG_2(int const *farg1) {
  void * fresult ;
  Teuchos::Array< int >::size_type arg1 ;
  Teuchos::Array< int > *result = 0 ;
  
  arg1 = *farg1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new Teuchos::Array< int >(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayInt__SWIG_3(void const *farg1) {
  void * fresult ;
  Teuchos::Array< int > *arg1 = 0 ;
  Teuchos::Array< int > *result = 0 ;
  
  arg1 = (Teuchos::Array< int > *)(((Teuchos::RCP<const Teuchos::Array<int> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::Array<int> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::Array< int > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new Teuchos::Array< int >((Teuchos::Array< int > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayInt(void *farg1) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayInt_size(void const *farg1) {
  int fresult ;
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > const > *smartarg1 = 0 ;
  Teuchos::Array< int >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int >::size_type)((Teuchos::Array< int > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayInt_max_size(void const *farg1) {
  int fresult ;
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > const > *smartarg1 = 0 ;
  Teuchos::Array< int >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int >::size_type)((Teuchos::Array< int > const *)arg1)->max_size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosArrayInt_resize__SWIG_0(void *farg1, int const *farg2, int const *farg3) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::Array< int >::size_type arg2 ;
  Teuchos::Array< int >::value_type *arg3 = 0 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = reinterpret_cast< Teuchos::Array< int >::value_type * >(const_cast< int* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2,(Teuchos::Array< int >::value_type const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayInt_resize__SWIG_1(void *farg1, int const *farg2) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::Array< int >::size_type arg2 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayInt_capacity(void const *farg1) {
  int fresult ;
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > const > *smartarg1 = 0 ;
  Teuchos::Array< int >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int >::size_type)((Teuchos::Array< int > const *)arg1)->capacity();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TeuchosArrayInt_empty(void const *farg1) {
  bool fresult ;
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::Array< int > const *)arg1)->empty();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosArrayInt_reserve(void *farg1, int const *farg2) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::Array< int >::size_type arg2 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reserve(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayInt_push_back(void *farg1, int const *farg2) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::Array< int >::value_type *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< Teuchos::Array< int >::value_type * >(const_cast< int* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->push_back((Teuchos::Array< int >::value_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayInt_pop_back(void *farg1) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->pop_back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayInt_swap(void *farg1, void *farg2) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::Array< int > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Teuchos::Array< int > *)(((Teuchos::RCP< Teuchos::Array<int> > *)farg2)
    ? ((Teuchos::RCP< Teuchos::Array<int> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::Array< int > &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->swap(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayInt_clear(void *farg1) {
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->clear();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayInt_length(void const *farg1) {
  int fresult ;
  Teuchos::Array< int > *arg1 = (Teuchos::Array< int > *) 0 ;
  Teuchos::RCP< Teuchos::Array< int > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<int> > *)farg1;
  arg1 = (Teuchos::Array<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Teuchos::Array< int > const *)arg1)->length();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayInt__SWIG_4(void const *farg1) {
  void * fresult ;
  std::vector< int,std::allocator< int > > *arg1 = 0 ;
  Teuchos::Array< int > *result = 0 ;
  
  arg1 = static_cast< std::vector< int,std::allocator< int > > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new Teuchos::Array< int >((std::vector< int,std::allocator< int > > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayInt__SWIG_5(swig::SwigfArrayWrapper< int > *farg1) {
  void * fresult ;
  std::pair< int *,std::size_t > arg1 ;
  Teuchos::Array< int > *result = 0 ;
  
  arg1 = ::std::pair< int*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< int > *)new_Teuchos_Array_Sl_int_Sg___SWIG_5(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayInt(void* farg1) {
  Teuchos::RCP< Teuchos::Array<int> >* arg1 = (Teuchos::RCP< Teuchos::Array<int> > *)farg1;
  return new Teuchos::RCP< Teuchos::Array<int> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayLongLong__SWIG_0() {
  void * fresult ;
  Teuchos::Array< long long > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new Teuchos::Array< long long >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayLongLong__SWIG_1(int const *farg1, long long const *farg2) {
  void * fresult ;
  Teuchos::Array< long long >::size_type arg1 ;
  Teuchos::Array< long long >::value_type *arg2 = 0 ;
  Teuchos::Array< long long > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< Teuchos::Array< long long >::value_type * >(const_cast< long long* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new Teuchos::Array< long long >(arg1,(Teuchos::Array< long long >::value_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayLongLong__SWIG_2(int const *farg1) {
  void * fresult ;
  Teuchos::Array< long long >::size_type arg1 ;
  Teuchos::Array< long long > *result = 0 ;
  
  arg1 = *farg1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new Teuchos::Array< long long >(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayLongLong__SWIG_3(void const *farg1) {
  void * fresult ;
  Teuchos::Array< long long > *arg1 = 0 ;
  Teuchos::Array< long long > *result = 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new Teuchos::Array< long long >((Teuchos::Array< long long > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayLongLong(void *farg1) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayLongLong_size(void const *farg1) {
  int fresult ;
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::size_type result;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long >::size_type)((Teuchos::Array< long long > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayLongLong_max_size(void const *farg1) {
  int fresult ;
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::size_type result;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long >::size_type)((Teuchos::Array< long long > const *)arg1)->max_size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_resize__SWIG_0(void *farg1, int const *farg2, long long const *farg3) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::size_type arg2 ;
  Teuchos::Array< long long >::value_type *arg3 = 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  arg2 = *farg2;
  arg3 = reinterpret_cast< Teuchos::Array< long long >::value_type * >(const_cast< long long* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2,(Teuchos::Array< long long >::value_type const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_resize__SWIG_1(void *farg1, int const *farg2) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::size_type arg2 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayLongLong_capacity(void const *farg1) {
  int fresult ;
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::size_type result;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long >::size_type)((Teuchos::Array< long long > const *)arg1)->capacity();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TeuchosArrayLongLong_empty(void const *farg1) {
  bool fresult ;
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  bool result;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::Array< long long > const *)arg1)->empty();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_reserve(void *farg1, int const *farg2) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::size_type arg2 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reserve(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_push_back(void *farg1, long long const *farg2) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long >::value_type *arg2 = 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  arg2 = reinterpret_cast< Teuchos::Array< long long >::value_type * >(const_cast< long long* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->push_back((Teuchos::Array< long long >::value_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_pop_back(void *farg1) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->pop_back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_swap(void *farg1, void *farg2) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  Teuchos::Array< long long > *arg2 = 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  arg2 = static_cast< Teuchos::Array< long long > * >(farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->swap(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayLongLong_clear(void *farg1) {
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->clear();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayLongLong_length(void const *farg1) {
  int fresult ;
  Teuchos::Array< long long > *arg1 = (Teuchos::Array< long long > *) 0 ;
  int result;
  
  arg1 = static_cast< Teuchos::Array< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Teuchos::Array< long long > const *)arg1)->length();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayLongLong__SWIG_4(void const *farg1) {
  void * fresult ;
  std::vector< long long,std::allocator< long long > > *arg1 = 0 ;
  Teuchos::Array< long long > *result = 0 ;
  
  arg1 = static_cast< std::vector< long long,std::allocator< long long > > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new Teuchos::Array< long long >((std::vector< long long,std::allocator< long long > > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayLongLong__SWIG_5(swig::SwigfArrayWrapper< long long > *farg1) {
  void * fresult ;
  std::pair< long long *,std::size_t > arg1 ;
  Teuchos::Array< long long > *result = 0 ;
  
  arg1 = ::std::pair< long long*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< long long > *)new_Teuchos_Array_Sl_long_SS_long_Sg___SWIG_5(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayDouble__SWIG_0() {
  void * fresult ;
  Teuchos::Array< double > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new Teuchos::Array< double >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayDouble__SWIG_1(int const *farg1, double const *farg2) {
  void * fresult ;
  Teuchos::Array< double >::size_type arg1 ;
  Teuchos::Array< double >::value_type *arg2 = 0 ;
  Teuchos::Array< double > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = reinterpret_cast< Teuchos::Array< double >::value_type * >(const_cast< double* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new Teuchos::Array< double >(arg1,(Teuchos::Array< double >::value_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayDouble__SWIG_2(int const *farg1) {
  void * fresult ;
  Teuchos::Array< double >::size_type arg1 ;
  Teuchos::Array< double > *result = 0 ;
  
  arg1 = *farg1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new Teuchos::Array< double >(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayDouble__SWIG_3(void const *farg1) {
  void * fresult ;
  Teuchos::Array< double > *arg1 = 0 ;
  Teuchos::Array< double > *result = 0 ;
  
  arg1 = (Teuchos::Array< double > *)(((Teuchos::RCP<const Teuchos::Array<double> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::Array<double> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::Array< double > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new Teuchos::Array< double >((Teuchos::Array< double > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayDouble(void *farg1) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayDouble_size(void const *farg1) {
  int fresult ;
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > const > *smartarg1 = 0 ;
  Teuchos::Array< double >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double >::size_type)((Teuchos::Array< double > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayDouble_max_size(void const *farg1) {
  int fresult ;
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > const > *smartarg1 = 0 ;
  Teuchos::Array< double >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double >::size_type)((Teuchos::Array< double > const *)arg1)->max_size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosArrayDouble_resize__SWIG_0(void *farg1, int const *farg2, double const *farg3) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::Array< double >::size_type arg2 ;
  Teuchos::Array< double >::value_type *arg3 = 0 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = reinterpret_cast< Teuchos::Array< double >::value_type * >(const_cast< double* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2,(Teuchos::Array< double >::value_type const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayDouble_resize__SWIG_1(void *farg1, int const *farg2) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::Array< double >::size_type arg2 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayDouble_capacity(void const *farg1) {
  int fresult ;
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > const > *smartarg1 = 0 ;
  Teuchos::Array< double >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double >::size_type)((Teuchos::Array< double > const *)arg1)->capacity();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TeuchosArrayDouble_empty(void const *farg1) {
  bool fresult ;
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::Array< double > const *)arg1)->empty();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosArrayDouble_reserve(void *farg1, int const *farg2) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::Array< double >::size_type arg2 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reserve(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayDouble_push_back(void *farg1, double const *farg2) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::Array< double >::value_type *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< Teuchos::Array< double >::value_type * >(const_cast< double* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->push_back((Teuchos::Array< double >::value_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayDouble_pop_back(void *farg1) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->pop_back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayDouble_swap(void *farg1, void *farg2) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::Array< double > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Teuchos::Array< double > *)(((Teuchos::RCP< Teuchos::Array<double> > *)farg2)
    ? ((Teuchos::RCP< Teuchos::Array<double> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::Array< double > &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->swap(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TeuchosArrayDouble_clear(void *farg1) {
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->clear();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TeuchosArrayDouble_length(void const *farg1) {
  int fresult ;
  Teuchos::Array< double > *arg1 = (Teuchos::Array< double > *) 0 ;
  Teuchos::RCP< Teuchos::Array< double > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Array<double> > *)farg1;
  arg1 = (Teuchos::Array<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Teuchos::Array< double > const *)arg1)->length();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayDouble__SWIG_4(void const *farg1) {
  void * fresult ;
  std::vector< double,std::allocator< double > > *arg1 = 0 ;
  Teuchos::Array< double > *result = 0 ;
  
  arg1 = static_cast< std::vector< double,std::allocator< double > > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new Teuchos::Array< double >((std::vector< double,std::allocator< double > > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayDouble__SWIG_5(swig::SwigfArrayWrapper< double > *farg1) {
  void * fresult ;
  std::pair< double *,std::size_t > arg1 ;
  Teuchos::Array< double > *result = 0 ;
  
  arg1 = ::std::pair< double*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Array< double > *)new_Teuchos_Array_Sl_double_Sg___SWIG_5(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Array<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayDouble(void* farg1) {
  Teuchos::RCP< Teuchos::Array<double> >* arg1 = (Teuchos::RCP< Teuchos::Array<double> > *)farg1;
  return new Teuchos::RCP< Teuchos::Array<double> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewInt__SWIG_0(int *farg1, int const *farg2) {
  void * fresult ;
  int *arg1 = (int *) 0 ;
  Teuchos::ArrayView< int >::size_type arg2 ;
  Teuchos::ArrayView< int > *result = 0 ;
  
  arg1 = reinterpret_cast< int * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int > *)new Teuchos::ArrayView< int >(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewInt__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< int > *arg1 = 0 ;
  Teuchos::ArrayView< int > *result = 0 ;
  
  arg1 = (Teuchos::ArrayView< int > *)(((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int > *)new Teuchos::ArrayView< int >((Teuchos::ArrayView< int > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewInt(void *farg1) {
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewInt_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< int > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewInt_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int >::size_type)((Teuchos::ArrayView< int > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewInt_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< int > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT int * swigc_TeuchosArrayViewInt_front(void const *farg1) {
  int * fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  int *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int *) &((Teuchos::ArrayView< int > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< int* >(result);
  return fresult;
}


SWIGEXPORT int * swigc_TeuchosArrayViewInt_back(void const *farg1) {
  int * fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  int *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int *) &((Teuchos::ArrayView< int > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< int* >(result);
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewInt_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::ArrayView< int >::size_type arg2 ;
  Teuchos::ArrayView< int >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int > result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< int > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<int> >(new Teuchos::ArrayView< int >((Teuchos::ArrayView< int > &)result));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewInt_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int > *) &((Teuchos::ArrayView< int > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<int> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewInt_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< int > *arg1 = (Teuchos::ArrayView< int > *) 0 ;
  Teuchos::ArrayView< int >::size_type arg2 ;
  Teuchos::ArrayView< int >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< int > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg1;
  arg1 = (Teuchos::ArrayView<int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int > *) &((Teuchos::ArrayView< int > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<int> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewInt__SWIG_2(swig::SwigfArrayWrapper< int > *farg1) {
  void * fresult ;
  std::pair< int *,std::size_t > arg1 ;
  Teuchos::ArrayView< int > *result = 0 ;
  
  arg1 = ::std::pair< int*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int > *)new_Teuchos_ArrayView_Sl_int_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayViewInt(void* farg1) {
  Teuchos::RCP< Teuchos::ArrayView<int> >* arg1 = (Teuchos::RCP< Teuchos::ArrayView<int> > *)farg1;
  return new Teuchos::RCP< Teuchos::ArrayView<int> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewIntConst__SWIG_0(int *farg1, int const *farg2) {
  void * fresult ;
  int *arg1 = (int *) 0 ;
  Teuchos::ArrayView< int const >::size_type arg2 ;
  Teuchos::ArrayView< int const > *result = 0 ;
  
  arg1 = reinterpret_cast< int * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int const > *)new Teuchos::ArrayView< int const >((int const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewIntConst__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< int const > *arg1 = 0 ;
  Teuchos::ArrayView< int const > *result = 0 ;
  
  arg1 = (Teuchos::ArrayView< int const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int const > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int const > *)new Teuchos::ArrayView< int const >((Teuchos::ArrayView< int const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewIntConst(void *farg1) {
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewIntConst_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< int const > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewIntConst_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int const >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int const >::size_type)((Teuchos::ArrayView< int const > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewIntConst_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< int const > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewIntConst_front(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  int *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int *) &((Teuchos::ArrayView< int const > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewIntConst_back(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  int *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int *) &((Teuchos::ArrayView< int const > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewIntConst_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::ArrayView< int const >::size_type arg2 ;
  Teuchos::ArrayView< int const >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int const > result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< int const > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<const int> >(new Teuchos::ArrayView< int const >((Teuchos::ArrayView< int const > &)result));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewIntConst_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int const > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int const > *) &((Teuchos::ArrayView< int const > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<const int> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewIntConst_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< int const > *arg1 = (Teuchos::ArrayView< int const > *) 0 ;
  Teuchos::ArrayView< int const >::size_type arg2 ;
  Teuchos::ArrayView< int const >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< int const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int const > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg1;
  arg1 = (Teuchos::ArrayView<const int> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int const > *) &((Teuchos::ArrayView< int const > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<const int> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewIntConst__SWIG_2(swig::SwigfArrayWrapper< int const > *farg1) {
  void * fresult ;
  std::pair< int const *,std::size_t > arg1 ;
  Teuchos::ArrayView< int const > *result = 0 ;
  
  arg1 = ::std::pair< const int*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< int const > *)new_Teuchos_ArrayView_Sl_int_SS_const_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayViewIntConst(void* farg1) {
  Teuchos::RCP< Teuchos::ArrayView<const int> >* arg1 = (Teuchos::RCP< Teuchos::ArrayView<const int> > *)farg1;
  return new Teuchos::RCP< Teuchos::ArrayView<const int> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewLongLong__SWIG_0(long long *farg1, int const *farg2) {
  void * fresult ;
  long long *arg1 = (long long *) 0 ;
  Teuchos::ArrayView< long long >::size_type arg2 ;
  Teuchos::ArrayView< long long > *result = 0 ;
  
  arg1 = reinterpret_cast< long long * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long > *)new Teuchos::ArrayView< long long >(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewLongLong__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< long long > *arg1 = 0 ;
  Teuchos::ArrayView< long long > *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long > *)new Teuchos::ArrayView< long long >((Teuchos::ArrayView< long long > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewLongLong(void *farg1) {
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewLongLong_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  bool result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< long long > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewLongLong_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  Teuchos::ArrayView< long long >::size_type result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long >::size_type)((Teuchos::ArrayView< long long > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewLongLong_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  std::string result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< long long > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT long long * swigc_TeuchosArrayViewLongLong_front(void const *farg1) {
  long long * fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  long long *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long *) &((Teuchos::ArrayView< long long > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< long long* >(result);
  return fresult;
}


SWIGEXPORT long long * swigc_TeuchosArrayViewLongLong_back(void const *farg1) {
  long long * fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  long long *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long *) &((Teuchos::ArrayView< long long > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< long long* >(result);
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewLongLong_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  Teuchos::ArrayView< long long >::size_type arg2 ;
  Teuchos::ArrayView< long long >::size_type arg3 ;
  Teuchos::ArrayView< long long > result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< long long > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new Teuchos::ArrayView< long long >(static_cast< const Teuchos::ArrayView< long long >& >(result)));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewLongLong_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  Teuchos::ArrayView< long long > *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long > *) &((Teuchos::ArrayView< long long > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewLongLong_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< long long > *arg1 = (Teuchos::ArrayView< long long > *) 0 ;
  Teuchos::ArrayView< long long >::size_type arg2 ;
  Teuchos::ArrayView< long long >::size_type arg3 ;
  Teuchos::ArrayView< long long > *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg1));
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long > *) &((Teuchos::ArrayView< long long > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewLongLong__SWIG_2(swig::SwigfArrayWrapper< long long > *farg1) {
  void * fresult ;
  std::pair< long long *,std::size_t > arg1 ;
  Teuchos::ArrayView< long long > *result = 0 ;
  
  arg1 = ::std::pair< long long*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long > *)new_Teuchos_ArrayView_Sl_long_SS_long_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewLongLongConst__SWIG_0(long long *farg1, int const *farg2) {
  void * fresult ;
  long long *arg1 = (long long *) 0 ;
  Teuchos::ArrayView< long long const >::size_type arg2 ;
  Teuchos::ArrayView< long long const > *result = 0 ;
  
  arg1 = reinterpret_cast< long long * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long const > *)new Teuchos::ArrayView< long long const >((long long const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewLongLongConst__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< long long const > *arg1 = 0 ;
  Teuchos::ArrayView< long long const > *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long const > *)new Teuchos::ArrayView< long long const >((Teuchos::ArrayView< long long const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewLongLongConst(void *farg1) {
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewLongLongConst_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  bool result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< long long const > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewLongLongConst_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  Teuchos::ArrayView< long long const >::size_type result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long const >::size_type)((Teuchos::ArrayView< long long const > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewLongLongConst_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  std::string result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< long long const > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT long long swigc_TeuchosArrayViewLongLongConst_front(void const *farg1) {
  long long fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  long long *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long *) &((Teuchos::ArrayView< long long const > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT long long swigc_TeuchosArrayViewLongLongConst_back(void const *farg1) {
  long long fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  long long *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long *) &((Teuchos::ArrayView< long long const > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewLongLongConst_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  Teuchos::ArrayView< long long const >::size_type arg2 ;
  Teuchos::ArrayView< long long const >::size_type arg3 ;
  Teuchos::ArrayView< long long const > result;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< long long const > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new Teuchos::ArrayView< long long const >(static_cast< const Teuchos::ArrayView< long long const >& >(result)));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewLongLongConst_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  Teuchos::ArrayView< long long const > *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long const > *) &((Teuchos::ArrayView< long long const > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewLongLongConst_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< long long const > *arg1 = (Teuchos::ArrayView< long long const > *) 0 ;
  Teuchos::ArrayView< long long const >::size_type arg2 ;
  Teuchos::ArrayView< long long const >::size_type arg3 ;
  Teuchos::ArrayView< long long const > *result = 0 ;
  
  arg1 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg1));
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long const > *) &((Teuchos::ArrayView< long long const > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewLongLongConst__SWIG_2(swig::SwigfArrayWrapper< long long const > *farg1) {
  void * fresult ;
  std::pair< long long const *,std::size_t > arg1 ;
  Teuchos::ArrayView< long long const > *result = 0 ;
  
  arg1 = ::std::pair< const long long*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< long long const > *)new_Teuchos_ArrayView_Sl_long_SS_long_SS_const_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewDouble__SWIG_0(double *farg1, int const *farg2) {
  void * fresult ;
  double *arg1 = (double *) 0 ;
  Teuchos::ArrayView< double >::size_type arg2 ;
  Teuchos::ArrayView< double > *result = 0 ;
  
  arg1 = reinterpret_cast< double * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double > *)new Teuchos::ArrayView< double >(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewDouble__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< double > *arg1 = 0 ;
  Teuchos::ArrayView< double > *result = 0 ;
  
  arg1 = (Teuchos::ArrayView< double > *)(((Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double > *)new Teuchos::ArrayView< double >((Teuchos::ArrayView< double > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewDouble(void *farg1) {
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewDouble_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< double > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewDouble_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double >::size_type)((Teuchos::ArrayView< double > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewDouble_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< double > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT double * swigc_TeuchosArrayViewDouble_front(void const *farg1) {
  double * fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (double *) &((Teuchos::ArrayView< double > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< double* >(result);
  return fresult;
}


SWIGEXPORT double * swigc_TeuchosArrayViewDouble_back(void const *farg1) {
  double * fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (double *) &((Teuchos::ArrayView< double > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< double* >(result);
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewDouble_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::ArrayView< double >::size_type arg2 ;
  Teuchos::ArrayView< double >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double > result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< double > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<double> >(new Teuchos::ArrayView< double >((Teuchos::ArrayView< double > &)result));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewDouble_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double > *) &((Teuchos::ArrayView< double > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<double> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewDouble_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< double > *arg1 = (Teuchos::ArrayView< double > *) 0 ;
  Teuchos::ArrayView< double >::size_type arg2 ;
  Teuchos::ArrayView< double >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< double > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg1;
  arg1 = (Teuchos::ArrayView<double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double > *) &((Teuchos::ArrayView< double > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<double> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewDouble__SWIG_2(swig::SwigfArrayWrapper< double > *farg1) {
  void * fresult ;
  std::pair< double *,std::size_t > arg1 ;
  Teuchos::ArrayView< double > *result = 0 ;
  
  arg1 = ::std::pair< double*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double > *)new_Teuchos_ArrayView_Sl_double_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayViewDouble(void* farg1) {
  Teuchos::RCP< Teuchos::ArrayView<double> >* arg1 = (Teuchos::RCP< Teuchos::ArrayView<double> > *)farg1;
  return new Teuchos::RCP< Teuchos::ArrayView<double> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewDoubleConst__SWIG_0(double *farg1, int const *farg2) {
  void * fresult ;
  double *arg1 = (double *) 0 ;
  Teuchos::ArrayView< double const >::size_type arg2 ;
  Teuchos::ArrayView< double const > *result = 0 ;
  
  arg1 = reinterpret_cast< double * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double const > *)new Teuchos::ArrayView< double const >((double const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewDoubleConst__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< double const > *arg1 = 0 ;
  Teuchos::ArrayView< double const > *result = 0 ;
  
  arg1 = (Teuchos::ArrayView< double const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double const > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double const > *)new Teuchos::ArrayView< double const >((Teuchos::ArrayView< double const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewDoubleConst(void *farg1) {
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewDoubleConst_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< double const > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewDoubleConst_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double const >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double const >::size_type)((Teuchos::ArrayView< double const > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewDoubleConst_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< double const > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT double swigc_TeuchosArrayViewDoubleConst_front(void const *farg1) {
  double fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (double *) &((Teuchos::ArrayView< double const > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT double swigc_TeuchosArrayViewDoubleConst_back(void const *farg1) {
  double fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  double *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (double *) &((Teuchos::ArrayView< double const > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewDoubleConst_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::ArrayView< double const >::size_type arg2 ;
  Teuchos::ArrayView< double const >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double const > result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< double const > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<const double> >(new Teuchos::ArrayView< double const >((Teuchos::ArrayView< double const > &)result));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewDoubleConst_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double const > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double const > *) &((Teuchos::ArrayView< double const > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<const double> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewDoubleConst_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< double const > *arg1 = (Teuchos::ArrayView< double const > *) 0 ;
  Teuchos::ArrayView< double const >::size_type arg2 ;
  Teuchos::ArrayView< double const >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< double const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< double const > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg1;
  arg1 = (Teuchos::ArrayView<const double> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double const > *) &((Teuchos::ArrayView< double const > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<const double> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewDoubleConst__SWIG_2(swig::SwigfArrayWrapper< double const > *farg1) {
  void * fresult ;
  std::pair< double const *,std::size_t > arg1 ;
  Teuchos::ArrayView< double const > *result = 0 ;
  
  arg1 = ::std::pair< const double*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< double const > *)new_Teuchos_ArrayView_Sl_double_SS_const_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const double> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayViewDoubleConst(void* farg1) {
  Teuchos::RCP< Teuchos::ArrayView<const double> >* arg1 = (Teuchos::RCP< Teuchos::ArrayView<const double> > *)farg1;
  return new Teuchos::RCP< Teuchos::ArrayView<const double> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewSizeT__SWIG_0(unsigned long *farg1, int const *farg2) {
  void * fresult ;
  unsigned long *arg1 = (unsigned long *) 0 ;
  Teuchos::ArrayView< unsigned long >::size_type arg2 ;
  Teuchos::ArrayView< std::size_t > *result = 0 ;
  
  arg1 = reinterpret_cast< unsigned long * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< std::size_t > *)new Teuchos::ArrayView< std::size_t >(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<size_t> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewSizeT__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< unsigned long > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t > *result = 0 ;
  
  arg1 = (Teuchos::ArrayView< unsigned long > *)(((Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< unsigned long > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< std::size_t > *)new Teuchos::ArrayView< std::size_t >((Teuchos::ArrayView< unsigned long > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<size_t> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewSizeT(void *farg1) {
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewSizeT_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< std::size_t > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewSizeT_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< unsigned long >::size_type)((Teuchos::ArrayView< std::size_t > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewSizeT_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< std::size_t > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT unsigned long * swigc_TeuchosArrayViewSizeT_front(void const *farg1) {
  unsigned long * fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  unsigned long *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (unsigned long *) &((Teuchos::ArrayView< std::size_t > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< unsigned long* >(result);
  return fresult;
}


SWIGEXPORT unsigned long * swigc_TeuchosArrayViewSizeT_back(void const *farg1) {
  unsigned long * fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  unsigned long *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (unsigned long *) &((Teuchos::ArrayView< std::size_t > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = reinterpret_cast< unsigned long* >(result);
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewSizeT_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::ArrayView< unsigned long >::size_type arg2 ;
  Teuchos::ArrayView< unsigned long >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long > result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< std::size_t > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<size_t> >(new Teuchos::ArrayView< unsigned long >((Teuchos::ArrayView< unsigned long > &)result));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewSizeT_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< unsigned long > *) &((Teuchos::ArrayView< std::size_t > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<size_t> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewSizeT_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< std::size_t > *arg1 = (Teuchos::ArrayView< std::size_t > *) 0 ;
  Teuchos::ArrayView< unsigned long >::size_type arg2 ;
  Teuchos::ArrayView< unsigned long >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<size_t> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< unsigned long > *) &((Teuchos::ArrayView< std::size_t > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<size_t> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewSizeT__SWIG_2(swig::SwigfArrayWrapper< size_t > *farg1) {
  void * fresult ;
  std::pair< std::size_t *,std::size_t > arg1 ;
  Teuchos::ArrayView< std::size_t > *result = 0 ;
  
  arg1 = ::std::pair< size_t*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< std::size_t > *)new_Teuchos_ArrayView_Sl_std_size_t_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<size_t> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayViewSizeT(void* farg1) {
  Teuchos::RCP< Teuchos::ArrayView<size_t> >* arg1 = (Teuchos::RCP< Teuchos::ArrayView<size_t> > *)farg1;
  return new Teuchos::RCP< Teuchos::ArrayView<size_t> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewSizeTConst__SWIG_0(unsigned long *farg1, int const *farg2) {
  void * fresult ;
  unsigned long *arg1 = (unsigned long *) 0 ;
  Teuchos::ArrayView< unsigned long const >::size_type arg2 ;
  Teuchos::ArrayView< std::size_t const > *result = 0 ;
  
  arg1 = reinterpret_cast< unsigned long * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< std::size_t const > *)new Teuchos::ArrayView< std::size_t const >((unsigned long const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const size_t> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewSizeTConst__SWIG_1(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< unsigned long const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *result = 0 ;
  
  arg1 = (Teuchos::ArrayView< unsigned long const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< unsigned long const > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< std::size_t const > *)new Teuchos::ArrayView< std::size_t const >((Teuchos::ArrayView< unsigned long const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const size_t> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TeuchosArrayViewSizeTConst(void *farg1) {
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TeuchosArrayViewSizeTConst_is_null(void const *farg1) {
  bool fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Teuchos::ArrayView< std::size_t const > const *)arg1)->is_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosArrayViewSizeTConst_size(void const *farg1) {
  int fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long const >::size_type result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< unsigned long const >::size_type)((Teuchos::ArrayView< std::size_t const > const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewSizeTConst_toString(void const *farg1) {
  void * fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< std::size_t const > const *)arg1)->toString();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT unsigned long swigc_TeuchosArrayViewSizeTConst_front(void const *farg1) {
  unsigned long fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  unsigned long *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (unsigned long *) &((Teuchos::ArrayView< std::size_t const > const *)arg1)->front();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TeuchosArrayViewSizeTConst_back(void const *farg1) {
  unsigned long fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  unsigned long *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (unsigned long *) &((Teuchos::ArrayView< std::size_t const > const *)arg1)->back();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = *result;
  return fresult;
}


SWIGEXPORT void * swigc_TeuchosArrayViewSizeTConst_view(void const *farg1, int const *farg2, int const *farg3) {
  void * fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::ArrayView< unsigned long const >::size_type arg2 ;
  Teuchos::ArrayView< unsigned long const >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long const > result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Teuchos::ArrayView< std::size_t const > const *)arg1)->view(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<const size_t> >(new Teuchos::ArrayView< unsigned long const >((Teuchos::ArrayView< unsigned long const > &)result));
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewSizeTConst_assert_not_null(void const *farg1) {
  void const * fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long const > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< unsigned long const > *) &((Teuchos::ArrayView< std::size_t const > const *)arg1)->assert_not_null();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<const size_t> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void const * swigc_TeuchosArrayViewSizeTConst_assert_in_range(void const *farg1, int const *farg2, int const *farg3) {
  void const * fresult ;
  Teuchos::ArrayView< std::size_t const > *arg1 = (Teuchos::ArrayView< std::size_t const > *) 0 ;
  Teuchos::ArrayView< unsigned long const >::size_type arg2 ;
  Teuchos::ArrayView< unsigned long const >::size_type arg3 ;
  Teuchos::RCP< Teuchos::ArrayView< size_t const > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< unsigned long const > *result = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ArrayView<const size_t> > *)farg1;
  arg1 = (Teuchos::ArrayView<const size_t> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< unsigned long const > *) &((Teuchos::ArrayView< std::size_t const > const *)arg1)->assert_in_range(arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = new Teuchos::RCP<const Teuchos::ArrayView<const size_t> >(result SWIG_NO_NULL_DELETER_0);
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosArrayViewSizeTConst__SWIG_2(swig::SwigfArrayWrapper< size_t const > *farg1) {
  void * fresult ;
  std::pair< std::size_t const *,std::size_t > arg1 ;
  Teuchos::ArrayView< std::size_t const > *result = 0 ;
  
  arg1 = ::std::pair< const size_t*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ArrayView< std::size_t const > *)new_Teuchos_ArrayView_Sl_std_size_t_SS_const_Sg___SWIG_2(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ArrayView<const size_t> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TeuchosArrayViewSizeTConst(void* farg1) {
  Teuchos::RCP< Teuchos::ArrayView<const size_t> >* arg1 = (Teuchos::RCP< Teuchos::ArrayView<const size_t> > *)farg1;
  return new Teuchos::RCP< Teuchos::ArrayView<const size_t> >(*arg1);
}


SWIGEXPORT void * swigc_new_TeuchosComm__SWIG_0(int const *farg1) {
  void * fresult ;
  MPI_Comm arg1 ;
  Teuchos::Comm< int > *result = 0 ;
  
  
#ifdef HAVE_MPI
  arg1 = (MPI_Comm)(MPI_Comm_f2c(*(MPI_Fint *)(farg1)));
#else
  arg1 = *farg1;
#endif
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Comm< int > *)new_Teuchos_Comm_Sl_int_Sg___SWIG_0(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Comm<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TeuchosComm__SWIG_1() {
  void * fresult ;
  Teuchos::Comm< int > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::Comm< int > *)new_Teuchos_Comm_Sl_int_Sg___SWIG_1();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::Comm<int> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosComm_getRank(void const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Comm<int> > *)farg1;
  arg1 = (Teuchos::Comm<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)Teuchos_Comm_Sl_int_Sg__getRank((Teuchos::Comm< int > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TeuchosComm_getSize(void const *farg1) {
  int fresult ;
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Comm<int> > *)farg1;
  arg1 = (Teuchos::Comm<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)Teuchos_Comm_Sl_int_Sg__getSize((Teuchos::Comm< int > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TeuchosComm_barrier(void const *farg1) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::Comm<int> > *)farg1;
  arg1 = (Teuchos::Comm<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_Comm_Sl_int_Sg__barrier((Teuchos::Comm< int > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_delete_TeuchosComm(void *farg1) {
  Teuchos::Comm< int > *arg1 = (Teuchos::Comm< int > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::Comm<int> > *)farg1;
  arg1 = (Teuchos::Comm<int> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void* swigc_spcopy_TeuchosComm(void* farg1) {
  Teuchos::RCP< Teuchos::Comm<int> >* arg1 = (Teuchos::RCP< Teuchos::Comm<int> > *)farg1;
  return new Teuchos::RCP< Teuchos::Comm<int> >(*arg1);
}


SWIGEXPORT void * swigc_new_string() {
  void * fresult ;
  std::string *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (std::string *)new std::string();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_string_resize(void *farg1, unsigned long const *farg2) {
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  
  arg1 = static_cast< std::string * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resize(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_string_clear(void *farg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = static_cast< std::string * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->clear();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT unsigned long swigc_string_size(void const *farg1) {
  unsigned long fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type result;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (std::string::size_type)((std::string const *)arg1)->size();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_string_length(void const *farg1) {
  unsigned long fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type result;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (std::string::size_type)((std::string const *)arg1)->length();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_string_set(void *farg1, unsigned long const *farg2, char const *farg3) {
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  std::string::value_type arg3 ;
  
  arg1 = static_cast< std::string * >(farg1);
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      std_string_set(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT char swigc_string_get(void *farg1, unsigned long const *farg2) {
  char fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  std::string::value_type result;
  
  arg1 = static_cast< std::string * >(farg1);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (std::string::value_type)std_string_get(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_string(void *farg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = static_cast< std::string * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_print(void const *farg1) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Teuchos::ParameterList const *)arg1)->print();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_ParameterList__SWIG_0() {
  void * fresult ;
  Teuchos::ParameterList *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *)new_Teuchos_ParameterList__SWIG_0();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_ParameterList__SWIG_1(swig::SwigfArrayWrapper< char const > *farg1) {
  void * fresult ;
  std::pair< char const *,std::size_t > arg1 ;
  Teuchos::ParameterList *result = 0 ;
  
  arg1 = ::std::pair< const char*, std::size_t >();
  (&arg1)->first  = farg1->data;
  (&arg1)->second = farg1->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::ParameterList *)new_Teuchos_ParameterList__SWIG_1(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Teuchos::ParameterList >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_ParameterList_get__SWIG_0(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, double *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  double *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = reinterpret_cast< double * >(farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_get_scalar_Sl_double_Sg___SWIG_0(arg1,arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_0(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, double const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  double *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = reinterpret_cast< double * >(const_cast< double* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_set_scalar_Sl_double_Sg___SWIG_0(arg1,arg2,(double const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_get__SWIG_1(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, int *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  int *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = reinterpret_cast< int * >(farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_get_scalar_Sl_int_Sg___SWIG_1(arg1,arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_1(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, int const *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  int *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = reinterpret_cast< int * >(const_cast< int* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_set_scalar_Sl_int_Sg___SWIG_1(arg1,arg2,(int const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_2(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, swig::SwigfArrayWrapper< char const > *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  std::pair< char const *,std::size_t > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg3 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_set__SWIG_2(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_get__SWIG_2(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, swig::SwigfArrayWrapper< char > *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  std::pair< char *,std::size_t > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg3 = ::std::pair< char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_get__SWIG_2(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_3(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, swig::SwigfArrayWrapper< double const > *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  std::pair< double const *,std::size_t > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg3 = ::std::pair< const double*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_set_array_Sl_double_Sg___SWIG_3(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_get__SWIG_3(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, swig::SwigfArrayWrapper< double const > *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  std::pair< double const *,std::size_t > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg3 = ::std::pair< const double*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_get_array_Sl_double_Sg___SWIG_3(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_4(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, swig::SwigfArrayWrapper< int const > *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  std::pair< int const *,std::size_t > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg3 = ::std::pair< const int*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_set_array_Sl_int_Sg___SWIG_4(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_get__SWIG_4(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, swig::SwigfArrayWrapper< int const > *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  std::pair< int const *,std::size_t > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg3 = ::std::pair< const int*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_get_array_Sl_int_Sg___SWIG_4(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_set__SWIG_5(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, void *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList > arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  if (farg3) arg3 = *(Teuchos::RCP< Teuchos::ParameterList > *)farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_set__SWIG_5(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_ParameterList_get__SWIG_5(void *farg1, swig::SwigfArrayWrapper< char const > *farg2, void *farg3) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_get__SWIG_5(arg1,arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_ParameterList_sublist(void *farg1, swig::SwigfArrayWrapper< char const > *farg2) {
  void * fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > result;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = Teuchos_ParameterList_sublist(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Teuchos::ParameterList >(result) : 0;
  return fresult;
}


SWIGEXPORT int swigc_ParameterList_get_length(void *farg1, swig::SwigfArrayWrapper< char const > *farg2) {
  int fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  int result;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)Teuchos_ParameterList_get_length(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_ParameterList_remove(void *farg1, swig::SwigfArrayWrapper< char const > *farg2) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Teuchos_ParameterList_remove(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_ParameterList_is_parameter(void const *farg1, swig::SwigfArrayWrapper< char const > *farg2) {
  bool fresult ;
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList const > *smartarg1 = 0 ;
  bool result;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)Teuchos_ParameterList_is_parameter((Teuchos::ParameterList const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_ParameterList(void *farg1) {
  Teuchos::ParameterList *arg1 = (Teuchos::ParameterList *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  arg1 = (Teuchos::ParameterList *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void* swigc_spcopy_ParameterList(void* farg1) {
  Teuchos::RCP< Teuchos::ParameterList >* arg1 = (Teuchos::RCP< Teuchos::ParameterList > *)farg1;
  return new Teuchos::RCP< Teuchos::ParameterList >(*arg1);
}


SWIGEXPORT void swigc_load_from_xml(void *farg1, swig::SwigfArrayWrapper< char const > *farg2) {
  Teuchos::RCP< Teuchos::ParameterList > *arg1 = 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull1 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg1 : &tempnull1;
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      load_from_xml((Teuchos::RCP< Teuchos::ParameterList > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_save_to_xml(void const *farg1, swig::SwigfArrayWrapper< char const > *farg2) {
  Teuchos::ParameterList *arg1 = 0 ;
  std::pair< char const *,std::size_t > arg2 ;
  
  arg2 = ::std::pair< const char*, std::size_t >();
  arg1 = (Teuchos::ParameterList *)(((Teuchos::RCP<const Teuchos::ParameterList > *)farg1)
    ? ((Teuchos::RCP<const Teuchos::ParameterList > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ParameterList const &");
    return ;
  }
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      save_to_xml((Teuchos::ParameterList const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


#ifdef __cplusplus
}
#endif

