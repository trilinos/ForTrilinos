/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    throw std::logic_error(MSG); return NULLRETURN;


/* Contract support */
#define SWIG_contract_assert(NULLRETURN, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, NULLRETURN); }


#undef SWIG_exception_impl
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    swig::fortran_store_exception(CODE, MSG); return NULLRETURN;


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig
{
// Functions are defined in an imported module
void fortran_check_unhandled_exception();
void fortran_store_exception(int code, const char *msg);
} // end namespace swig


#include "fortran_operator.hpp"


#include "solver_handle.hpp"


#include "eigen_handle.hpp"


namespace swig {
template<class T>
struct SwigfArrayWrapper
{
    T* data;
    std::size_t size;
};
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void * swigc_new_TrilinosSolver() {
  void * fresult ;
  ForTrilinos::TrilinosSolver *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (ForTrilinos::TrilinosSolver *)new ForTrilinos::TrilinosSolver();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), NULL);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), NULL);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", NULL);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TrilinosSolver_init__SWIG_0(void *farg1) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->init();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_init__SWIG_1(void *farg1, void *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->init((Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_setup_matrix(void *farg1, void *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > tempnull2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  arg2 = farg2 ? (Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_matrix((Teuchos::RCP< ForTrilinos::TrilinosSolver::Matrix > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_setup_operator__SWIG_0(void *farg1, ForTrilinos::OperatorCallback farg2, void *farg3, void *farg4) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  ForTrilinos::OperatorCallback arg2 = (ForTrilinos::OperatorCallback) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > *arg4 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > tempnull3 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > tempnull4 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  arg2 = farg2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator(arg2,(Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > const &)*arg3,(Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_setup_operator__SWIG_1(void *farg1, ForTrilinos::OperatorCallback farg2, void *farg3) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  ForTrilinos::OperatorCallback arg2 = (ForTrilinos::OperatorCallback) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > tempnull3 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  arg2 = farg2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator(arg2,(Teuchos::RCP< ForTrilinos::TrilinosSolver::Map const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_setup_solver(void *farg1, void *farg2) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > arg2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  if (farg2) arg2 = *(Teuchos::RCP< Teuchos::ParameterList > *)farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_solver(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_solve(void const *farg1, void *farg2, void *farg3) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > tempnull2 ;
  Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > tempnull3 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(const_cast< void* >(farg1));
  arg2 = farg2 ? (Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((ForTrilinos::TrilinosSolver const *)arg1)->solve((Teuchos::RCP< ForTrilinos::TrilinosSolver::MultiVector const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosSolver_finalize(void *farg1) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->finalize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_delete_TrilinosSolver(void *farg1) {
  ForTrilinos::TrilinosSolver *arg1 = (ForTrilinos::TrilinosSolver *) 0 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosSolver * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_TrilinosEigenSolver() {
  void * fresult ;
  ForTrilinos::TrilinosEigenSolver *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (ForTrilinos::TrilinosEigenSolver *)new ForTrilinos::TrilinosEigenSolver();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), NULL);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), NULL);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", NULL);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TrilinosEigenSolver_init__SWIG_0(void *farg1) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->init();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_init__SWIG_1(void *farg1, void *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->init((Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_matrix(void *farg1, void *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > tempnull2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_matrix((Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_matrix_rhs(void *farg1, void *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > *arg2 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > tempnull2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_matrix_rhs((Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Matrix > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_operator__SWIG_0(void *farg1, ForTrilinos::OperatorCallback farg2, void *farg3, void *farg4) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  ForTrilinos::OperatorCallback arg2 = (ForTrilinos::OperatorCallback) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *arg4 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > tempnull3 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > tempnull4 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator(arg2,(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > const &)*arg3,(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_operator__SWIG_1(void *farg1, ForTrilinos::OperatorCallback farg2, void *farg3) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  ForTrilinos::OperatorCallback arg2 = (ForTrilinos::OperatorCallback) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > tempnull3 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator(arg2,(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_operator_rhs__SWIG_0(void *farg1, ForTrilinos::OperatorCallback farg2, void *farg3, void *farg4) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  ForTrilinos::OperatorCallback arg2 = (ForTrilinos::OperatorCallback) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *arg4 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > tempnull3 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > tempnull4 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator_rhs(arg2,(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > const &)*arg3,(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_operator_rhs__SWIG_1(void *farg1, ForTrilinos::OperatorCallback farg2, void *farg3) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  ForTrilinos::OperatorCallback arg2 = (ForTrilinos::OperatorCallback) 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > tempnull3 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_operator_rhs(arg2,(Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::Map const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_setup_solver(void *farg1, void *farg2) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setup_solver((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_solve(void const *farg1, swig::SwigfArrayWrapper< double > *farg2, void *farg3) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  std::pair< ForTrilinos::TrilinosEigenSolver::SC *,std::size_t > arg2 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > *arg3 = 0 ;
  Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > tempnull3 ;
  
  arg2 = ::std::pair< double*, std::size_t >();
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(const_cast< void* >(farg1));
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = farg3 ? (Teuchos::RCP< ForTrilinos::TrilinosEigenSolver::MultiVector > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((ForTrilinos::TrilinosEigenSolver const *)arg1)->solve(arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TrilinosEigenSolver_finalize(void *farg1) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->finalize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_delete_TrilinosEigenSolver(void *farg1) {
  ForTrilinos::TrilinosEigenSolver *arg1 = (ForTrilinos::TrilinosEigenSolver *) 0 ;
  
  arg1 = static_cast< ForTrilinos::TrilinosEigenSolver * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


#ifdef __cplusplus
}
#endif

