/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    throw std::logic_error(MSG); return NULLRETURN;


/* Contract support */
#define SWIG_contract_assert(NULLRETURN, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, NULLRETURN); }


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


#include <string>

SWIGINTERN void std_string_set(std::string *self,std::string::size_type pos,std::string::value_type v){
        // TODO: check range
        (*self)[pos] = v;
    }
SWIGINTERN std::string::value_type std_string_get(std::string *self,std::string::size_type pos){
        // TODO: check range
        return (*self)[pos];
    }

#include "BelosTypes.hpp"

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void * swigc_new_string() {
  void * fresult ;
  std::string *result = 0 ;
  
  result = (std::string *)new std::string();
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_string_resize(void *farg1, unsigned long const *farg2) {
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  
  arg1 = static_cast< std::string * >(farg1);
  arg2 = *farg2;
  (arg1)->resize(arg2);
  
}


SWIGEXPORT void swigc_string_clear(void *farg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = static_cast< std::string * >(farg1);
  (arg1)->clear();
  
}


SWIGEXPORT unsigned long swigc_string_size(void const *farg1) {
  unsigned long fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type result;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  result = (std::string::size_type)((std::string const *)arg1)->size();
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_string_length(void const *farg1) {
  unsigned long fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type result;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  result = (std::string::size_type)((std::string const *)arg1)->length();
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_string_set(void *farg1, unsigned long const *farg2, char const *farg3) {
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  std::string::value_type arg3 ;
  
  arg1 = static_cast< std::string * >(farg1);
  arg2 = *farg2;
  arg3 = *farg3;
  std_string_set(arg1,arg2,arg3);
  
}


SWIGEXPORT char swigc_string_get(void *farg1, unsigned long const *farg2) {
  char fresult ;
  std::string *arg1 = (std::string *) 0 ;
  std::string::size_type arg2 ;
  std::string::value_type result;
  
  arg1 = static_cast< std::string * >(farg1);
  arg2 = *farg2;
  result = (std::string::value_type)std_string_get(arg1,arg2);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_string(void *farg1) {
  std::string *arg1 = (std::string *) 0 ;
  
  arg1 = static_cast< std::string * >(farg1);
  delete arg1;
  
}


SWIGEXPORT void * swigc_new_BelosError(void const *farg1) {
  void * fresult ;
  std::string *arg1 = 0 ;
  Belos::BelosError *result = 0 ;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  result = (Belos::BelosError *)new Belos::BelosError((std::string const &)*arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_BelosError(void *farg1) {
  Belos::BelosError *arg1 = (Belos::BelosError *) 0 ;
  
  arg1 = static_cast< Belos::BelosError * >(farg1);
  delete arg1;
  
}


SWIGEXPORT void * swigc_convertReturnTypeToString(int *farg1) {
  void * fresult ;
  Belos::ReturnType arg1 ;
  std::string result;
  
  arg1 = static_cast< Belos::ReturnType >(*farg1);
  result = Belos::convertReturnTypeToString(arg1);
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT SWIGEXTERN int const swigc_StatusType = -1;

SWIGEXPORT SWIGEXTERN int const swigc_Passed = Belos::Passed;

SWIGEXPORT SWIGEXTERN int const swigc_Failed = Belos::Failed;

SWIGEXPORT SWIGEXTERN int const swigc_Undefined = Belos::Undefined;

SWIGEXPORT SWIGEXTERN int const swigc_ResetType = -1;

SWIGEXPORT SWIGEXTERN int const swigc_Problem = Belos::Problem;

SWIGEXPORT SWIGEXTERN int const swigc_RecycleSubspace = Belos::RecycleSubspace;

SWIGEXPORT void * swigc_convertStatusTypeToString(int *farg1) {
  void * fresult ;
  Belos::StatusType arg1 ;
  std::string result;
  
  arg1 = static_cast< Belos::StatusType >(*farg1);
  result = Belos::convertStatusTypeToString(arg1);
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT int swigc_convertStringToStatusType(void const *farg1) {
  int fresult ;
  std::string *arg1 = 0 ;
  Belos::StatusType result;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  result = (Belos::StatusType)Belos::convertStringToStatusType((std::string const &)*arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_convertStringToScaleType(void const *farg1) {
  int fresult ;
  std::string *arg1 = 0 ;
  Belos::ScaleType result;
  
  arg1 = static_cast< std::string * >(const_cast< void* >(farg1));
  result = (Belos::ScaleType)Belos::convertStringToScaleType((std::string const &)*arg1);
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_convertScaleTypeToString(int *farg1) {
  void * fresult ;
  Belos::ScaleType arg1 ;
  std::string result;
  
  arg1 = static_cast< Belos::ScaleType >(*farg1);
  result = Belos::convertScaleTypeToString(arg1);
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT SWIGEXTERN int const swigc_MsgType = -1;

SWIGEXPORT SWIGEXTERN int const swigc_Errors = Belos::Errors;

SWIGEXPORT SWIGEXTERN int const swigc_Warnings = Belos::Warnings;

SWIGEXPORT SWIGEXTERN int const swigc_IterationDetails = Belos::IterationDetails;

SWIGEXPORT SWIGEXTERN int const swigc_OrthoDetails = Belos::OrthoDetails;

SWIGEXPORT SWIGEXTERN int const swigc_FinalSummary = Belos::FinalSummary;

SWIGEXPORT SWIGEXTERN int const swigc_TimingDetails = Belos::TimingDetails;

SWIGEXPORT SWIGEXTERN int const swigc_StatusTestDetails = Belos::StatusTestDetails;

SWIGEXPORT SWIGEXTERN int const swigc_Debug = Belos::Debug;

SWIGEXPORT void * swigc_convertMsgTypeToString(int *farg1) {
  void * fresult ;
  Belos::MsgType arg1 ;
  std::string result;
  
  arg1 = static_cast< Belos::MsgType >(*farg1);
  result = Belos::convertMsgTypeToString(arg1);
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


#ifdef __cplusplus
}
#endif

