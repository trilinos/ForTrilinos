/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#ifndef SWIGEXTERN
#ifdef __cplusplus
#define SWIGEXTERN extern
#else
#define SWIGEXTERN
#endif
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




// Default exception handler
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    throw std::logic_error(MSG); return NULLRETURN;


/* Contract support */
#define SWIG_contract_assert(NULLRETURN, EXPR, MSG) \
    if (!(EXPR)) { SWIG_exception_impl(SWIG_ValueError, MSG, NULLRETURN); }


#undef SWIG_exception_impl
#define SWIG_exception_impl(CODE, MSG, NULLRETURN) \
    swig::fortran_store_exception(CODE, MSG); return NULLRETURN;


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig
{
// Functions are defined in an imported module
void fortran_check_unhandled_exception();
void fortran_store_exception(int code, const char *msg);
} // end namespace swig


#include "Tpetra_ConfigDefs.hpp"

typedef double                                  SC;
typedef int                                     LO;
typedef long long                               GO;
typedef Kokkos::Compat::KokkosSerialWrapperNode NO;


#include "Teuchos_RCP.hpp"
#include "Tpetra_Map.hpp"


#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN

SWIGINTERN Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_1(Tpetra::global_size_t numGlobalElements,Teuchos::RCP< Teuchos::Comm< int > const > const &comm,Tpetra::LocalGlobal lg=Tpetra::GloballyDistributed){
      return new Tpetra::Map<LO,GO,NO>(numGlobalElements, 1/*indexBase*/, comm, lg);
    }
SWIGINTERN Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_3(Tpetra::global_size_t numGlobalElements,size_t numLocalElements,Teuchos::RCP< Teuchos::Comm< int > const > const &comm){
      return new Tpetra::Map<LO,GO,NO>(numGlobalElements, numLocalElements, 1/*indexBase*/, comm);
    }

namespace swig {
template<class T>
struct SwigfArrayWrapper
{
    T* data;
    std::size_t size;
};
}

SWIGINTERN Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_4(Tpetra::global_size_t const numGlobalElements,std::pair< GO const *,std::size_t > indexList,Teuchos::RCP< Teuchos::Comm< int > const > const &comm){
      Teuchos::ArrayView<const GO> indexListView = Teuchos::arrayView(indexList.first, indexList.second);
      return new Tpetra::Map<LO,GO,NO>(numGlobalElements, indexListView, 1/*indexBase*/, comm);
    }
SWIGINTERN Tpetra::LookupStatus Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg__getRemoteIndexList__SWIG_0(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *self,std::pair< GO const *,std::size_t > GIDList,std::pair< int *,std::size_t > nodeIDList,std::pair< LO *,std::size_t > LIDList){
      Teuchos::ArrayView<const GO> GIDListView  = Teuchos::arrayView(GIDList.first, GIDList.second);
      Teuchos::ArrayView<int>  nodeIDListView   = Teuchos::arrayView(nodeIDList.first, nodeIDList.second);
      Teuchos::ArrayView<LO> LIDListView        = Teuchos::arrayView(LIDList.first, LIDList.second);

      return self->getRemoteIndexList(GIDListView, nodeIDListView, LIDListView);
    }
SWIGINTERN Tpetra::LookupStatus Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg__getRemoteIndexList__SWIG_1(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *self,std::pair< GO const *,std::size_t > GIDList,std::pair< int *,std::size_t > nodeIDList){
      Teuchos::ArrayView<const GO> GIDListView  = Teuchos::arrayView(GIDList.first, GIDList.second);
      Teuchos::ArrayView<int>  nodeIDListView   = Teuchos::arrayView(nodeIDList.first, nodeIDList.second);

      return self->getRemoteIndexList(GIDListView, nodeIDListView);
    }
SWIGINTERN void Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg__getNodeElementList(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *self,std::pair< GO const *,std::size_t > elementList){
      auto view = self->getNodeElementList();
      elementList.first  = view.getRawPtr();
      elementList.second = view.size();
    }

#include "Tpetra_Export.hpp"


#include "Tpetra_Import.hpp"


#include "Tpetra_MultiVector.hpp"

SWIGINTERN Tpetra::MultiVector< SC,LO,GO,NO,false > *new_Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_7(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &map,std::pair< SC const *,std::size_t > A,size_t const LDA,size_t const NumVectors){
      Teuchos::ArrayView<const SC> AView = Teuchos::arrayView(A.first, A.second);
      return new Tpetra::MultiVector<SC,LO,GO,NO,false>(map, AView, LDA, NumVectors);
    }
SWIGINTERN Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__subCopy(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,std::pair< std::size_t const *,std::size_t > cols){
      Teuchos::Array<size_t> colsArray(cols.second);
      for (int i = 0; i < colsArray.size(); i++)
        colsArray[i] = cols.first[i]-1;
      return self->subCopy(colsArray);
    }
SWIGINTERN Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__subView(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,std::pair< std::size_t const *,std::size_t > cols){
      Teuchos::Array<size_t> colsArray(cols.second);
      for (int i = 0; i < colsArray.size(); i++)
        colsArray[i] = cols.first[i]-1;
      return self->subView(colsArray);
    }
SWIGINTERN Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__subViewNonConst(Tpetra::MultiVector< SC,LO,GO,NO,false > *self,std::pair< std::size_t const *,std::size_t > cols){
      Teuchos::Array<size_t> colsArray(cols.second);
      for (int i = 0; i < colsArray.size(); i++)
        colsArray[i] = cols.first[i]-1;
      return self->subViewNonConst(colsArray);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__dot(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,Tpetra::MultiVector< SC,LO,GO,NO,false > const &A,std::pair< SC *,std::size_t > dots){
      Teuchos::ArrayView<SC> dotsView = Teuchos::arrayView(dots.first, dots.second);
      return self->dot(A, dotsView);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__norm1(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,std::pair< SC *,std::size_t > norms){
      Teuchos::ArrayView<SC> normsView = Teuchos::arrayView(norms.first, norms.second);
      return self->norm1(normsView);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__norm2(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,std::pair< SC *,std::size_t > norms){
      Teuchos::ArrayView<SC> normsView = Teuchos::arrayView(norms.first, norms.second);
      return self->norm2(normsView);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__normInf(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,std::pair< SC *,std::size_t > norms){
      Teuchos::ArrayView<SC> normsView = Teuchos::arrayView(norms.first, norms.second);
      return self->normInf(normsView);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__scale__SWIG_2(Tpetra::MultiVector< SC,LO,GO,NO,false > *self,std::pair< SC const *,std::size_t > alpha){
      Teuchos::ArrayView<const SC> alphaView = Teuchos::arrayView(alpha.first, alpha.second);
      self->scale(alphaView);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__meanValue(Tpetra::MultiVector< SC,LO,GO,NO,false > const *self,std::pair< SC *,std::size_t > means){
      Teuchos::ArrayView<SC> meansView = Teuchos::arrayView(means.first, means.second);
      self->meanValue(meansView);
    }

#include "Tpetra_CrsGraph.hpp"

SWIGINTERN Tpetra::CrsGraph< LO,GO,NO,false > *new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_6(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &rowMap,std::pair< std::size_t const *,std::size_t > numEntPerRow,Tpetra::ProfileType const pftype=Tpetra::DynamicProfile,Teuchos::RCP< Teuchos::ParameterList > const &params=Teuchos::null){
      Teuchos::ArrayRCP<const size_t> numEntPerRowRCP(numEntPerRow.first, 0, numEntPerRow.second, false/*has_ownership*/);
      return new Tpetra::CrsGraph<LO,GO,NO,false>(rowMap, numEntPerRowRCP, pftype, params);
    }
SWIGINTERN Tpetra::CrsGraph< LO,GO,NO,false > *new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_9(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &rowMap,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &colMap,std::pair< std::size_t const *,std::size_t > numEntPerRow,Tpetra::ProfileType const pftype=Tpetra::DynamicProfile,Teuchos::RCP< Teuchos::ParameterList > const &params=Teuchos::null){
      Teuchos::ArrayRCP<const size_t> numEntPerRowRCP(numEntPerRow.first, 0, numEntPerRow.second, false/*has_ownership*/);
      return new Tpetra::CrsGraph<LO,GO,NO,false>(rowMap, colMap, numEntPerRowRCP, pftype, params);
    }
SWIGINTERN Tpetra::CrsGraph< LO,GO,NO,false > *new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_12(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &rowMap,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &colMap,std::pair< std::size_t *,std::size_t > rowPointers,std::pair< LO *,std::size_t > columnIndices,Teuchos::RCP< Teuchos::ParameterList > const &params=Teuchos::null){
      Teuchos::Array<size_t> rowPointersArray(rowPointers.second);
      for (size_t i = 0; i < rowPointers.second; i++)
        rowPointersArray[i] = rowPointers.first[i]-1;
      Teuchos::Array<LO> columnIndicesArray(columnIndices.second);
      for (size_t i = 0; i < columnIndices.second; i++)
        columnIndicesArray[i] = columnIndices.first[i]-1;
      return new Tpetra::CrsGraph<LO,GO,NO,false>(rowMap, colMap,
        Teuchos::arcpFromArray(rowPointersArray), Teuchos::arcpFromArray(columnIndicesArray), params);
    }
SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg__insertLocalIndices(Tpetra::CrsGraph< LO,GO,NO,false > *self,LO const localRow,std::pair< LO *,std::size_t > indices){
      Teuchos::Array<LO> indicesArray(indices.second);
      for (size_t i = 0; i < indicesArray.size(); i++)
        indicesArray[i] = indices.first[i]-1;
    }

#include "Tpetra_CrsMatrix.hpp"

SWIGINTERN void Tpetra_CrsMatrix_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__getGlobalRowCopy(Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *self,GO GlobalRow,std::pair< GO *,std::size_t > Indices,std::pair< SC *,std::size_t > Values,size_t &NumIndices){
      Teuchos::ArrayView<GO> IndicesView = Teuchos::arrayView(Indices.first, Indices.second);
      Teuchos::ArrayView<SC> ValuesView  = Teuchos::arrayView(Values.first, Values.second);

      self->getGlobalRowCopy(GlobalRow, IndicesView, ValuesView, NumIndices);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void * swigc_new_TpetraMap__SWIG_0() {
  void * fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)new Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraMap(void *farg1) {
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TpetraMap_isOneToOne(void const *farg1) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isOneToOne();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraMap_getGlobalNumElements(void const *farg1) {
  unsigned long fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getGlobalNumElements();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraMap_getNodeNumElements(void const *farg1) {
  size_t fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getNodeNumElements();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMinLocalIndex(void const *farg1) {
  int fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getMinLocalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result + 1;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMaxLocalIndex(void const *farg1) {
  int fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getMaxLocalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result + 1;
  return fresult;
}


SWIGEXPORT long long swigc_TpetraMap_getMinGlobalIndex(void const *farg1) {
  long long fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  long long result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getMinGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT long long swigc_TpetraMap_getMaxGlobalIndex(void const *farg1) {
  long long fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  long long result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getMaxGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT long long swigc_TpetraMap_getMinAllGlobalIndex(void const *farg1) {
  long long fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  long long result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getMinAllGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT long long swigc_TpetraMap_getMaxAllGlobalIndex(void const *farg1) {
  long long fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  long long result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getMaxAllGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getLocalElement(void const *farg1, long long const *farg2) {
  int fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getLocalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result + 1;
  return fresult;
}


SWIGEXPORT long long swigc_TpetraMap_getGlobalElement(void const *farg1, int const *farg2) {
  long long fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  long long result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getGlobalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isNodeLocalElement(void const *farg1, int const *farg2) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isNodeLocalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isNodeGlobalElement(void const *farg1, long long const *farg2) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isNodeGlobalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isUniform(void const *farg1) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isUniform();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isContiguous(void const *farg1) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isContiguous();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isDistributed(void const *farg1) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isDistributed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isCompatible(void const *farg1, void const *farg2) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isCompatible((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isSameAs(void const *farg1, void const *farg2) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->isSameAs((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_locallySameAs(void const *farg1, void const *farg2) {
  bool fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *)(((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->locallySameAs((Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMap_getComm(void const *farg1) {
  void * fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Teuchos::Comm< int > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMap_description(void const *farg1) {
  void * fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMap_removeEmptyProcesses(void const *farg1) {
  void * fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->removeEmptyProcesses();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMap_replaceCommWithSubset(void const *farg1, void *farg2) {
  void * fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1)->replaceCommWithSubset((Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMap__SWIG_1(unsigned long const *farg1, void *farg2, int *farg3) {
  void * fresult ;
  Tpetra::global_size_t arg1 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Tpetra::LocalGlobal arg3 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg2 : &tempnull2;
  arg3 = static_cast< Tpetra::LocalGlobal >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_1(arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMap__SWIG_2(unsigned long const *farg1, void *farg2) {
  void * fresult ;
  Tpetra::global_size_t arg1 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_1(arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMap__SWIG_3(unsigned long const *farg1, size_t const *farg2, void *farg3) {
  void * fresult ;
  Tpetra::global_size_t arg1 ;
  size_t arg2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull3 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = *farg2;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_3(arg1,arg2,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMap__SWIG_4(unsigned long const *farg1, swig::SwigfArrayWrapper< long long const > *farg2, void *farg3) {
  void * fresult ;
  Tpetra::global_size_t arg1 ;
  std::pair< GO const *,std::size_t > arg2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull3 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *result = 0 ;
  
  arg2 = ::std::pair< const long long*, std::size_t >();
  arg1 = *farg1;
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)new_Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg___SWIG_4(arg1,arg2,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getRemoteIndexList__SWIG_0(void const *farg1, swig::SwigfArrayWrapper< long long const > *farg2, swig::SwigfArrayWrapper< int > *farg3, swig::SwigfArrayWrapper< int > *farg4) {
  int fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  std::pair< GO const *,std::size_t > arg2 ;
  std::pair< int *,std::size_t > arg3 ;
  std::pair< LO *,std::size_t > arg4 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  Tpetra::LookupStatus result;
  
  arg2 = ::std::pair< const long long*, std::size_t >();
  arg3 = ::std::pair< int*, std::size_t >();
  arg4 = ::std::pair< int*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  (&arg4)->first  = farg4->data;
  (&arg4)->second = farg4->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::LookupStatus)Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg__getRemoteIndexList__SWIG_0((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1,arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getRemoteIndexList__SWIG_1(void const *farg1, swig::SwigfArrayWrapper< long long const > *farg2, swig::SwigfArrayWrapper< int > *farg3) {
  int fresult ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  std::pair< GO const *,std::size_t > arg2 ;
  std::pair< int *,std::size_t > arg3 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  Tpetra::LookupStatus result;
  
  arg2 = ::std::pair< const long long*, std::size_t >();
  arg3 = ::std::pair< int*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::LookupStatus)Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg__getRemoteIndexList__SWIG_1((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraMap_getNodeElementList(void const *farg1, swig::SwigfArrayWrapper< long long const > *farg2) {
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = (Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *) 0 ;
  std::pair< GO const *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const long long*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  arg1 = (Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_Map_Sl_int_Sc_long_SS_long_Sc_Kokkos_Compat_KokkosSerialWrapperNode_Sg__getNodeElementList((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void* swigc_spcopy_TpetraMap(void* farg1) {
  Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >* arg1 = (Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg1;
  return new Teuchos::RCP< Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> >(*arg1);
}


SWIGEXPORT void * swigc_new_TpetraExport__SWIG_0(void *farg1, void *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraExport__SWIG_1(void *farg1, void *farg2, void *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraExport__SWIG_2(void const *farg1) {
  void * fresult ;
  Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  arg1 = (Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraExport__SWIG_3(void const *farg1) {
  void * fresult ;
  Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  arg1 = static_cast< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > * >(const_cast< void* >(farg1));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraExport(void *farg1) {
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraExport_setParameterList(void *farg1, void *farg2) {
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setParameterList((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT size_t swigc_TpetraExport_getNumSameIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Export< LO,GO,NO > const *)arg1)->getNumSameIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraExport_getNumPermuteIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Export< LO,GO,NO > const *)arg1)->getNumPermuteIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraExport_getNumRemoteIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Export< LO,GO,NO > const *)arg1)->getNumRemoteIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraExport_getNumExportIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Export< LO,GO,NO > const *)arg1)->getNumExportIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraExport_getSourceMap(void const *farg1) {
  void * fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Export< LO,GO,NO > const *)arg1)->getSourceMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraExport_getTargetMap(void const *farg1) {
  void * fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Export< LO,GO,NO > const *)arg1)->getTargetMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraExport_isLocallyComplete(void const *farg1) {
  bool fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Export<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Export< LO,GO,NO > const *)arg1)->isLocallyComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TpetraExport(void* farg1) {
  Teuchos::RCP< Tpetra::Export<LO,GO,NO> >* arg1 = (Teuchos::RCP< Tpetra::Export<LO,GO,NO> > *)farg1;
  return new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(*arg1);
}


SWIGEXPORT void * swigc_new_TpetraImport__SWIG_0(void *farg1, void *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraImport__SWIG_1(void *farg1, void *farg2, void *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraImport__SWIG_2(void *farg1, void *farg2, void *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::Array< int > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg2 : &tempnull2;
  arg3 = (Teuchos::Array< int > *)(((Teuchos::RCP< Teuchos::Array<int> > *)farg3)
    ? ((Teuchos::RCP< Teuchos::Array<int> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::Array< int > &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraImport__SWIG_3(void const *farg1) {
  void * fresult ;
  Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = (Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraImport__SWIG_4(void const *farg1) {
  void * fresult ;
  Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = (Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraImport(void *farg1) {
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraImport_setParameterList(void *farg1, void *farg2) {
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setParameterList((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT size_t swigc_TpetraImport_getNumSameIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Import< LO,GO,NO > const *)arg1)->getNumSameIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraImport_getNumPermuteIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Import< LO,GO,NO > const *)arg1)->getNumPermuteIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraImport_getNumRemoteIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Import< LO,GO,NO > const *)arg1)->getNumRemoteIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraImport_getNumExportIDs(void const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Import< LO,GO,NO > const *)arg1)->getNumExportIDs();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraImport_getSourceMap(void const *farg1) {
  void * fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->getSourceMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraImport_getTargetMap(void const *farg1) {
  void * fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->getTargetMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraImport_isLocallyComplete(void const *farg1) {
  bool fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Import< LO,GO,NO > const *)arg1)->isLocallyComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraImport_setUnion__SWIG_0(void const *farg1, void const *farg2) {
  void * fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->setUnion((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraImport_setUnion__SWIG_1(void const *farg1) {
  void * fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->setUnion();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraImport_createRemoteOnlyImport(void const *farg1, void *farg2) {
  void * fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg1;
  arg1 = (Tpetra::Import<LO,GO,NO> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->createRemoteOnlyImport((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TpetraImport(void* farg1) {
  Teuchos::RCP< Tpetra::Import<LO,GO,NO> >* arg1 = (Teuchos::RCP< Tpetra::Import<LO,GO,NO> > *)farg1;
  return new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(*arg1);
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_0() {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_1(void *farg1, size_t const *farg2, bool const *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  bool arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_2(void *farg1, size_t const *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_3(void const *farg1) {
  void * fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg1 = 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_4(void const *farg1, int *farg2) {
  void * fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg1 = 0 ;
  Teuchos::DataAccess arg2 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return 0;
  }
  arg2 = static_cast< Teuchos::DataAccess >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_5(void const *farg1, void const *farg2, size_t const *farg3) {
  void * fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg1 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return 0;
  }
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type *)(((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const &");
    return 0;
  }
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_6(void const *farg1, void const *farg2) {
  void * fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg1 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type *arg2 = 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1)->get()
    :0);
  if (!arg1)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return 0;
  }
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type *)(((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<int,long long,Kokkos::Compat::KokkosSerialWrapperNode> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new Tpetra::MultiVector< SC,LO,GO,NO,false >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraMultiVector(void *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_replaceGlobalValue(void const *farg1, long long const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3 - 1;
  arg4 = reinterpret_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type * >(const_cast< double* >(farg4));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->replaceGlobalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_sumIntoGlobalValue__SWIG_0(void const *farg1, long long const *farg2, size_t const *farg3, double const *farg4, bool const *farg5) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3 - 1;
  arg4 = reinterpret_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type * >(const_cast< double* >(farg4));
  arg5 = *farg5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->sumIntoGlobalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_sumIntoGlobalValue__SWIG_1(void const *farg1, long long const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3 - 1;
  arg4 = reinterpret_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type * >(const_cast< double* >(farg4));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->sumIntoGlobalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_replaceLocalValue(void const *farg1, int const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  arg4 = reinterpret_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type * >(const_cast< double* >(farg4));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->replaceLocalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_sumIntoLocalValue__SWIG_0(void const *farg1, int const *farg2, size_t const *farg3, double const *farg4, bool const *farg5) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  arg4 = reinterpret_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type * >(const_cast< double* >(farg4));
  arg5 = *farg5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->sumIntoLocalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_sumIntoLocalValue__SWIG_1(void const *farg1, int const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  arg4 = reinterpret_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type * >(const_cast< double* >(farg4));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->sumIntoLocalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_putScalar(void *farg1, double const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->putScalar((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_randomize__SWIG_0(void *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->randomize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_randomize__SWIG_1(void *farg1, double const *farg2, double const *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  arg3 = reinterpret_cast< double * >(const_cast< double* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->randomize((double const &)*arg2,(double const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_replaceMap(void *farg1, void *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceMap((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_reduce(void *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reduce();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_TpetraMultiVector_offsetView(void const *farg1, void *farg2, size_t const *farg3) {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->offsetView((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMultiVector_offsetViewNonConst(void *farg1, void *farg2, size_t const *farg3) {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > result;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (arg1)->offsetViewNonConst((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > >(result) : 0;
  return fresult;
}


SWIGEXPORT void swigc_TpetraMultiVector_get1dCopy(void const *farg1, void const *farg2, size_t const *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::ArrayView< double > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Teuchos::ArrayView< double > *)(((Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg2)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<double> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double > const &");
    return ;
  }
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->get1dCopy((Teuchos::ArrayView< double > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_abs(void *farg1, void const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->abs((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_reciprocal(void *farg1, void const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reciprocal((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_scale__SWIG_0(void *farg1, double const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_scale__SWIG_1(void *farg1, double const *farg2, void const *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((double const &)*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_update__SWIG_0(void *farg1, double const *farg2, void const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  double *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg4 = reinterpret_cast< double * >(const_cast< double* >(farg4));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->update((double const &)*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg3,(double const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_update__SWIG_1(void *farg1, double const *farg2, void const *farg3, double const *farg4, void const *farg5, double const *farg6) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  double *arg4 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg5 = 0 ;
  double *arg6 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg4 = reinterpret_cast< double * >(const_cast< double* >(farg4));
  arg5 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg5)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg5)->get()
    :0);
  if (!arg5)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg6 = reinterpret_cast< double * >(const_cast< double* >(farg6));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->update((double const &)*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg3,(double const &)*arg4,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg5,(double const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_multiply(void *farg1, int *farg2, int *farg3, double const *farg4, void const *farg5, void const *farg6, double const *farg7) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::ETransp arg2 ;
  Teuchos::ETransp arg3 ;
  double *arg4 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg5 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg6 = 0 ;
  double *arg7 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = static_cast< Teuchos::ETransp >(*farg2);
  arg3 = static_cast< Teuchos::ETransp >(*farg3);
  arg4 = reinterpret_cast< double * >(const_cast< double* >(farg4));
  arg5 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg5)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg5)->get()
    :0);
  if (!arg5)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg6 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg6)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg6)->get()
    :0);
  if (!arg6)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg7 = reinterpret_cast< double * >(const_cast< double* >(farg7));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->multiply(arg2,arg3,(double const &)*arg4,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg5,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg6,(double const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT size_t swigc_TpetraMultiVector_getNumVectors(void const *farg1) {
  size_t fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->getNumVectors();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraMultiVector_getLocalLength(void const *farg1) {
  size_t fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->getLocalLength();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraMultiVector_getGlobalLength(void const *farg1) {
  unsigned long fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->getGlobalLength();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraMultiVector_getStride(void const *farg1) {
  size_t fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->getStride();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMultiVector_isConstantStride(void const *farg1) {
  bool fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->isConstantStride();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMultiVector_description(void const *farg1) {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT void swigc_TpetraMultiVector_removeEmptyProcessesInPlace(void *farg1, void *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeEmptyProcessesInPlace((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_setCopyOrView(void *farg1, int *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::DataAccess arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = static_cast< Teuchos::DataAccess >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setCopyOrView(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TpetraMultiVector_getCopyOrView(void const *farg1) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::DataAccess result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::DataAccess)((Tpetra::MultiVector< SC,LO,GO,NO,false > const *)arg1)->getCopyOrView();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraMultiVector__SWIG_7(void *farg1, swig::SwigfArrayWrapper< double const > *farg2, size_t const *farg3, size_t const *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  std::pair< SC const *,std::size_t > arg2 ;
  size_t arg3 ;
  size_t arg4 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *result = 0 ;
  
  arg2 = ::std::pair< const double*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = *farg3;
  arg4 = *farg4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)new_Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_7((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMultiVector_subCopy(void const *farg1, swig::SwigfArrayWrapper< size_t const > *farg2) {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< std::size_t const *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > result;
  
  arg2 = ::std::pair< const size_t*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__subCopy((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMultiVector_subView(void const *farg1, swig::SwigfArrayWrapper< size_t const > *farg2) {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< std::size_t const *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > result;
  
  arg2 = ::std::pair< const size_t*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__subView((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMultiVector_subViewNonConst(void *farg1, swig::SwigfArrayWrapper< size_t const > *farg2) {
  void * fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< std::size_t const *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > result;
  
  arg2 = ::std::pair< const size_t*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__subViewNonConst(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > >(result) : 0;
  return fresult;
}


SWIGEXPORT void swigc_TpetraMultiVector_dot(void const *farg1, void const *farg2, swig::SwigfArrayWrapper< double > *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg2 = 0 ;
  std::pair< SC *,std::size_t > arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  arg3 = ::std::pair< double*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< SC,LO,GO,NO,false > const &");
    return ;
  }
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__dot((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_norm1(void const *farg1, swig::SwigfArrayWrapper< double > *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< SC *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< double*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__norm1((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_norm2(void const *farg1, swig::SwigfArrayWrapper< double > *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< SC *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< double*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__norm2((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_normInf(void const *farg1, swig::SwigfArrayWrapper< double > *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< SC *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< double*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__normInf((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_scale__SWIG_2(void *farg1, swig::SwigfArrayWrapper< double const > *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< SC const *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< const double*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__scale__SWIG_2(arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraMultiVector_meanValue(void const *farg1, swig::SwigfArrayWrapper< double > *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO,false > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO,false > *) 0 ;
  std::pair< SC *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  arg2 = ::std::pair< double*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::MultiVector<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__meanValue((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void* swigc_spcopy_TpetraMultiVector(void* farg1) {
  Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >* arg1 = (Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg1;
  return new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> >(*arg1);
}


SWIGEXPORT void swigc_set_RowInfo_localRow(void *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  arg2 = *farg2;
  if (arg1) (arg1)->localRow = arg2;
  
}


SWIGEXPORT size_t swigc_get_RowInfo_localRow(void *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  result = (size_t) ((arg1)->localRow);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_set_RowInfo_allocSize(void *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  arg2 = *farg2;
  if (arg1) (arg1)->allocSize = arg2;
  
}


SWIGEXPORT size_t swigc_get_RowInfo_allocSize(void *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  result = (size_t) ((arg1)->allocSize);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_set_RowInfo_numEntries(void *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  arg2 = *farg2;
  if (arg1) (arg1)->numEntries = arg2;
  
}


SWIGEXPORT size_t swigc_get_RowInfo_numEntries(void *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  result = (size_t) ((arg1)->numEntries);
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_set_RowInfo_offset1D(void *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  arg2 = *farg2;
  if (arg1) (arg1)->offset1D = arg2;
  
}


SWIGEXPORT size_t swigc_get_RowInfo_offset1D(void *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  result = (size_t) ((arg1)->offset1D);
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_new_RowInfo() {
  void * fresult ;
  Tpetra::RowInfo *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::RowInfo *)new Tpetra::RowInfo();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_RowInfo(void *farg1) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  
  arg1 = static_cast< Tpetra::RowInfo * >(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_0(void *farg1, size_t const *farg2, int *farg3, void *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new Tpetra::CrsGraph< LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_1(void *farg1, size_t const *farg2, int *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new Tpetra::CrsGraph< LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_2(void *farg1, size_t const *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new Tpetra::CrsGraph< LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_3(void *farg1, void *farg2, size_t const *farg3, int *farg4, void *farg5) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new Tpetra::CrsGraph< LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_4(void *farg1, void *farg2, size_t const *farg3, int *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new Tpetra::CrsGraph< LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_5(void *farg1, void *farg2, size_t const *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new Tpetra::CrsGraph< LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraCrsGraph(void *farg1) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_setParameterList(void *farg1, void *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setParameterList((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getValidParameters(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getValidParameters();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Teuchos::ParameterList const >(result) : 0;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsGraph_insertGlobalIndices__SWIG_0(void *farg1, long long const *farg2, void const *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg3));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalIndices(arg2,(Teuchos::ArrayView< long long const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_insertGlobalIndices__SWIG_1(void *farg1, long long const *farg2, int const *farg3, long long *farg4) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  int arg3 ;
  long long *arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  arg4 = reinterpret_cast< long long * >(farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalIndices(arg2,arg3,(long long const (*))arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_removeLocalIndices(void *farg1, int const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeLocalIndices(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_globalAssemble(void *farg1) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->globalAssemble();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_resumeFill__SWIG_0(void *farg1, void *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_resumeFill__SWIG_1(void *farg1) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_fillComplete__SWIG_0(void *farg1, void *farg2, void *farg3, void *farg4) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_fillComplete__SWIG_1(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_fillComplete__SWIG_2(void *farg1, void *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_fillComplete__SWIG_3(void *farg1) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_expertStaticFillComplete__SWIG_0(void *farg1, void *farg2, void *farg3, void *farg4, void *farg5, void *farg6) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *)farg5 : &tempnull5;
  arg6 = farg6 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg6 : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_expertStaticFillComplete__SWIG_1(void *farg1, void *farg2, void *farg3, void *farg4, void *farg5) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > tempnull5 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_expertStaticFillComplete__SWIG_2(void *farg1, void *farg2, void *farg3, void *farg4) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_expertStaticFillComplete__SWIG_3(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getComm(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Teuchos::Comm< int > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getRowMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getRowMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getColMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getDomainMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getDomainMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getRangeMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getRangeMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getImporter(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getImporter();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_getExporter(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getExporter();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsGraph_getGlobalNumRows(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsGraph_getGlobalNumCols(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNodeNumRows(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNodeNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNodeNumCols(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNodeNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsGraph_getGlobalNumEntries(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNodeNumEntries(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNodeNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNumEntriesInGlobalRow(void const *farg1, long long const *farg2) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNumEntriesInGlobalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNumEntriesInLocalRow(void const *farg1, int const *farg2) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNumEntriesInLocalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNodeAllocationSize(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNodeAllocationSize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNumAllocatedEntriesInGlobalRow(void const *farg1, long long const *farg2) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNumAllocatedEntriesInGlobalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNumAllocatedEntriesInLocalRow(void const *farg1, int const *farg2) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNumAllocatedEntriesInLocalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsGraph_getGlobalNumDiags(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalNumDiags();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNodeNumDiags(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNodeNumDiags();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getGlobalMaxNumRowEntries(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsGraph_getNodeMaxNumRowEntries(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getNodeMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_hasColMap(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->hasColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isLowerTriangular(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isLowerTriangular();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isUpperTriangular(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isUpperTriangular();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isLocallyIndexed(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isLocallyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isGloballyIndexed(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isGloballyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isFillComplete(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isFillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isFillActive(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isFillActive();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isSorted(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isSorted();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsGraph_isStorageOptimized(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->isStorageOptimized();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsGraph_getProfileType(void const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::ProfileType result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::ProfileType)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getProfileType();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsGraph_getGlobalRowCopy(void const *farg1, long long const *farg2, void const *farg3, size_t *farg4) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long > *arg3 = 0 ;
  size_t *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long > * >(const_cast< void* >(farg3));
  arg4 = reinterpret_cast< size_t * >(farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalRowCopy(arg2,(Teuchos::ArrayView< long long > const &)*arg3,*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_getLocalRowCopy(void const *farg1, int const *farg2, void const *farg3, size_t *farg4) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  int arg2 ;
  Teuchos::ArrayView< int > *arg3 = 0 ;
  size_t *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  // Original typemap: convert void* to thinvec reference
  arg3 = static_cast< Teuchos::ArrayView< int > * >(const_cast< void* >(farg3));
  
  // Construct temporary array and view
  Teuchos::Array<int> tmp = Teuchos::Array<int>(arg3->size());
  for (int i = 0; i < arg3->size(); i++)
  tmp[i] = (*arg3)[i] - 1;
  Teuchos::ArrayView<int> tmpview = tmp();
  
  // Make the input argument point to our temporary vector
  arg3 = &tmpview;
  arg4 = reinterpret_cast< size_t * >(farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getLocalRowCopy(arg2,(Teuchos::ArrayView< int > const &)*arg3,*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
  
  for (int i = 0; i < arg3->size(); i++)
  (*arg3)[i]++;
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_getGlobalRowView(void const *farg1, long long const *farg2, void *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->getGlobalRowView(arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TpetraCrsGraph_supportsRowViews(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->supportsRowViews();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsGraph_description(void const *farg1) {
  void * fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsGraph_replaceColMap(void *farg1, void *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceColMap((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_reindexColumns__SWIG_0(void *farg1, void *farg2, void *farg3, bool const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg3 = 0 ;
  bool arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg3 : &tempnull3;
  arg4 = *farg4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_reindexColumns__SWIG_1(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_reindexColumns__SWIG_2(void *farg1, void *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_replaceDomainMapAndImporter(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceDomainMapAndImporter((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsGraph_removeEmptyProcessesInPlace(void *farg1, void *farg2) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeEmptyProcessesInPlace((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TpetraCrsGraph_haveGlobalConstants(void const *farg1) {
  bool fresult ;
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO,false > const *)arg1)->haveGlobalConstants();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsGraph_computeGlobalConstants(void *farg1) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->computeGlobalConstants();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_6(void *farg1, swig::SwigfArrayWrapper< size_t const > *farg2, int *farg3, void *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  std::pair< std::size_t const *,std::size_t > arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg2 = ::std::pair< const size_t*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_6((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_7(void *farg1, swig::SwigfArrayWrapper< size_t const > *farg2, int *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  std::pair< std::size_t const *,std::size_t > arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg2 = ::std::pair< const size_t*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_6((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_8(void *farg1, swig::SwigfArrayWrapper< size_t const > *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  std::pair< std::size_t const *,std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg2 = ::std::pair< const size_t*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  (&arg2)->first  = farg2->data;
  (&arg2)->second = farg2->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_6((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_9(void *farg1, void *farg2, swig::SwigfArrayWrapper< size_t const > *farg3, int *farg4, void *farg5) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  std::pair< std::size_t const *,std::size_t > arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg3 = ::std::pair< const size_t*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_9((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_10(void *farg1, void *farg2, swig::SwigfArrayWrapper< size_t const > *farg3, int *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  std::pair< std::size_t const *,std::size_t > arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg3 = ::std::pair< const size_t*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_9((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_11(void *farg1, void *farg2, swig::SwigfArrayWrapper< size_t const > *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  std::pair< std::size_t const *,std::size_t > arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg3 = ::std::pair< const size_t*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_9((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_12(void *farg1, void *farg2, swig::SwigfArrayWrapper< size_t > *farg3, swig::SwigfArrayWrapper< int > *farg4, void *farg5) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  std::pair< std::size_t *,std::size_t > arg3 ;
  std::pair< LO *,std::size_t > arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg3 = ::std::pair< size_t*, std::size_t >();
  arg4 = ::std::pair< int*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  (&arg4)->first  = farg4->data;
  (&arg4)->second = farg4->size;
  arg5 = farg5 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_12((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsGraph__SWIG_13(void *farg1, void *farg2, swig::SwigfArrayWrapper< size_t > *farg3, swig::SwigfArrayWrapper< int > *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  std::pair< std::size_t *,std::size_t > arg3 ;
  std::pair< LO *,std::size_t > arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO,false > *result = 0 ;
  
  arg3 = ::std::pair< size_t*, std::size_t >();
  arg4 = ::std::pair< int*, std::size_t >();
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  (&arg4)->first  = farg4->data;
  (&arg4)->second = farg4->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO,false > *)new_Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg___SWIG_12((Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsGraph_insertLocalIndices(void *farg1, int const *farg2, swig::SwigfArrayWrapper< int > *farg3) {
  Tpetra::CrsGraph< LO,GO,NO,false > *arg1 = (Tpetra::CrsGraph< LO,GO,NO,false > *) 0 ;
  LO arg2 ;
  std::pair< LO *,std::size_t > arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg1 = 0 ;
  
  arg3 = ::std::pair< int*, std::size_t >();
  smartarg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sc_false_Sg__insertLocalIndices(arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void* swigc_spcopy_TpetraCrsGraph(void* farg1) {
  Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >* arg1 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg1;
  return new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> >(*arg1);
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_0(void *farg1, size_t const *farg2, int *farg3, void *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_1(void *farg1, size_t const *farg2, int *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_2(void *farg1, size_t const *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_3(void *farg1, void *farg2, size_t const *farg3, int *farg4, void *farg5) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_4(void *farg1, void *farg2, size_t const *farg3, int *farg4) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_5(void *farg1, void *farg2, size_t const *farg3) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = *farg3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_6(void *farg1, void *farg2) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > *arg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > *)farg1 : &tempnull1;
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > const &)*arg1,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_new_TpetraCrsMatrix__SWIG_7(void *farg1) {
  void * fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > tempnull1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *result = 0 ;
  
  arg1 = farg1 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > *)farg1 : &tempnull1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *)new Tpetra::CrsMatrix< SC,LO,GO,NO,false >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraCrsMatrix(void *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_insertGlobalValues__SWIG_0(void *farg1, long long const *farg2, void const *farg3, void const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg3));
  arg4 = (Teuchos::ArrayView< double const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double const > const &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_insertGlobalValues__SWIG_1(void *farg1, long long const *farg2, int const *farg3, double *farg4, long long *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  int arg3 ;
  double *arg4 ;
  long long *arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  arg4 = reinterpret_cast< double * >(farg4);
  arg5 = reinterpret_cast< long long * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalValues(arg2,arg3,(double const (*))arg4,(long long const (*))arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TpetraCrsMatrix_replaceGlobalValues__SWIG_1(void const *farg1, long long const *farg2, void const *farg3, void const *farg4) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg3));
  arg4 = (Teuchos::ArrayView< double const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double const > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->replaceGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsMatrix_replaceGlobalValues__SWIG_2(void const *farg1, long long const *farg2, int const *farg3, double *farg4, long long *farg5) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  int arg3 ;
  double *arg4 ;
  long long *arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  arg4 = reinterpret_cast< double * >(farg4);
  arg5 = reinterpret_cast< long long * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->replaceGlobalValues(arg2,arg3,(double const (*))arg4,(long long const (*))arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsMatrix_sumIntoGlobalValues__SWIG_0(void *farg1, long long const *farg2, void const *farg3, void const *farg4, bool const *farg5) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg3));
  arg4 = (Teuchos::ArrayView< double const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double const > const &");
    return 0;
  }
  arg5 = *farg5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)(arg1)->sumIntoGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsMatrix_sumIntoGlobalValues__SWIG_1(void *farg1, long long const *farg2, void const *farg3, void const *farg4) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(const_cast< void* >(farg3));
  arg4 = (Teuchos::ArrayView< double const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const double> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double const > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)(arg1)->sumIntoGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsMatrix_sumIntoGlobalValues__SWIG_2(void *farg1, long long const *farg2, int const *farg3, double *farg4, long long *farg5, bool const *farg6) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  int arg3 ;
  double *arg4 ;
  long long *arg5 ;
  bool arg6 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  arg4 = reinterpret_cast< double * >(farg4);
  arg5 = reinterpret_cast< long long * >(farg5);
  arg6 = *farg6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)(arg1)->sumIntoGlobalValues(arg2,arg3,(double const (*))arg4,(long long const (*))arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsMatrix_sumIntoGlobalValues__SWIG_3(void *farg1, long long const *farg2, int const *farg3, double *farg4, long long *farg5) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  int arg3 ;
  double *arg4 ;
  long long *arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = *farg3;
  arg4 = reinterpret_cast< double * >(farg4);
  arg5 = reinterpret_cast< long long * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)(arg1)->sumIntoGlobalValues(arg2,arg3,(double const (*))arg4,(long long const (*))arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsMatrix_setAllToScalar(void *farg1, double const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->setAllToScalar((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_scale(void *farg1, double const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = reinterpret_cast< double * >(const_cast< double* >(farg2));
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_globalAssemble(void *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->globalAssemble();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_resumeFill__SWIG_0(void *farg1, void *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_resumeFill__SWIG_1(void *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_fillComplete__SWIG_0(void *farg1, void *farg2, void *farg3, void *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_fillComplete__SWIG_1(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_fillComplete__SWIG_2(void *farg1, void *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_fillComplete__SWIG_3(void *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_expertStaticFillComplete__SWIG_0(void *farg1, void *farg2, void *farg3, void *farg4, void *farg5, void *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *)farg5 : &tempnull5;
  arg6 = farg6 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg6 : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_expertStaticFillComplete__SWIG_1(void *farg1, void *farg2, void *farg3, void *farg4, void *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > tempnull5 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_expertStaticFillComplete__SWIG_2(void *farg1, void *farg2, void *farg3, void *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_expertStaticFillComplete__SWIG_3(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_replaceColMap(void *farg1, void *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceColMap((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_reindexColumns__SWIG_0(void *farg1, void *farg2, void *farg3, void *farg4, bool const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *arg2 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *) (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *)0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  smartarg2 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg2;
  arg2 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg2 ? smartarg2->get() : 0);
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  arg5 = *farg5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns(arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_reindexColumns__SWIG_1(void *farg1, void *farg2, void *farg3, void *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *arg2 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *) (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *)0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  smartarg2 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg2;
  arg2 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg2 ? smartarg2->get() : 0);
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns(arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_reindexColumns__SWIG_2(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *arg2 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *) (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type *)0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO,false > > *smartarg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  smartarg2 = (Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO,false> > *)farg2;
  arg2 = (Tpetra::CrsGraph<LO,GO,NO,false> *)(smartarg2 ? smartarg2->get() : 0);
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns(arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_replaceDomainMapAndImporter(void *farg1, void *farg2, void *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > tempnull3 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  arg3 = farg3 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceDomainMapAndImporter((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_removeEmptyProcessesInPlace(void *farg1, void *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg2 : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeEmptyProcessesInPlace((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_getComm(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Teuchos::Comm< int > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_getRowMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getRowMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_getColMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_getCrsGraph(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getCrsGraph();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::crs_graph_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsMatrix_getGlobalNumRows(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getGlobalNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsMatrix_getGlobalNumCols(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getGlobalNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getNodeNumRows(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getNodeNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getNodeNumCols(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getNodeNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsMatrix_getGlobalNumEntries(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getGlobalNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getNodeNumEntries(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getNodeNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getNumEntriesInGlobalRow(void const *farg1, long long const *farg2) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getNumEntriesInGlobalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraCrsMatrix_getGlobalNumDiags(void const *farg1) {
  unsigned long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getGlobalNumDiags();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getNodeNumDiags(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getNodeNumDiags();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getGlobalMaxNumRowEntries(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getGlobalMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraCrsMatrix_getNodeMaxNumRowEntries(void const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getNodeMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_hasColMap(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->hasColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isLowerTriangular(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isLowerTriangular();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isUpperTriangular(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isUpperTriangular();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isLocallyIndexed(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isLocallyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isGloballyIndexed(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isGloballyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isFillComplete(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isFillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isFillActive(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isFillActive();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isStorageOptimized(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isStorageOptimized();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraCrsMatrix_getProfileType(void const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::ProfileType result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::ProfileType)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getProfileType();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_isStaticGraph(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->isStaticGraph();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT double swigc_TpetraCrsMatrix_getFrobeniusNorm(void const *farg1) {
  double fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::mag_type result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::mag_type)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getFrobeniusNorm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_supportsRowViews(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->supportsRowViews();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsMatrix_getGlobalRowView(void const *farg1, long long const *farg2, void *farg3, void *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  arg3 = static_cast< Teuchos::ArrayView< long long const > * >(farg3);
  arg4 = (Teuchos::ArrayView< double const > *)(((Teuchos::RCP< Teuchos::ArrayView<const double> > *)farg4)
    ? ((Teuchos::RCP< Teuchos::ArrayView<const double> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< double const > &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getGlobalRowView(arg2,*arg3,*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT int swigc_TpetraCrsMatrix_getLocalRowViewRaw(void const *farg1, int const *farg2, int *farg3, int **farg4, double **farg5) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int **arg4 = 0 ;
  double **arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2 - 1;
  arg3 = reinterpret_cast< int * >(farg3);
  arg4 = const_cast< int ** >(farg4);
  arg5 = const_cast< double ** >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getLocalRowViewRaw(arg2,*arg3,(int const *&)*arg4,(double const *&)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsMatrix_apply__SWIG_0(void const *farg1, void const *farg2, void *farg3, int *farg4, double const *farg5, double const *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  double arg5 ;
  double arg6 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  arg5 = *farg5;
  arg6 = *farg6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,*arg3,arg4,arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_apply__SWIG_1(void const *farg1, void const *farg2, void *farg3, int *farg4, double const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  double arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  arg5 = *farg5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,*arg3,arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_apply__SWIG_2(void const *farg1, void const *farg2, void *farg3, int *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_apply__SWIG_3(void const *farg1, void const *farg2, void *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_hasTransposeApply(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->hasTransposeApply();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_getDomainMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getDomainMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_getRangeMap(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->getRangeMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const >(result) : 0;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsMatrix_gaussSeidel(void const *farg1, void const *farg2, void *farg3, void const *farg4, double const *farg5, int *farg6, int const *farg7) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg4 = 0 ;
  double *arg5 = 0 ;
  Tpetra::ESweepDirection arg6 ;
  int arg7 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg4 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg5 = reinterpret_cast< double * >(const_cast< double* >(farg5));
  arg6 = static_cast< Tpetra::ESweepDirection >(*farg6);
  arg7 = *farg7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->gaussSeidel((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,*arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg4,(double const &)*arg5,arg6,arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_reorderedGaussSeidel(void const *farg1, void const *farg2, void *farg3, void const *farg4, void const *farg5, double const *farg6, int *farg7, int const *farg8) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg4 = 0 ;
  Teuchos::ArrayView< int > *arg5 = 0 ;
  double *arg6 = 0 ;
  Tpetra::ESweepDirection arg7 ;
  int arg8 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg4 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg5 = (Teuchos::ArrayView< int > *)(((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg5)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg5)->get()
    :0);
  if (!arg5)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int > const &");
    return ;
  }
  arg6 = reinterpret_cast< double * >(const_cast< double* >(farg6));
  arg7 = static_cast< Tpetra::ESweepDirection >(*farg7);
  arg8 = *farg8;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->reorderedGaussSeidel((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg2,*arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg4,(Teuchos::ArrayView< int > const &)*arg5,(double const &)*arg6,arg7,arg8);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_gaussSeidelCopy(void const *farg1, void *farg2, void const *farg3, void const *farg4, double const *farg5, int *farg6, int const *farg7, bool const *farg8) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg4 = 0 ;
  double *arg5 = 0 ;
  Tpetra::ESweepDirection arg6 ;
  int arg7 ;
  bool arg8 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg4 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg5 = reinterpret_cast< double * >(const_cast< double* >(farg5));
  arg6 = static_cast< Tpetra::ESweepDirection >(*farg6);
  arg7 = *farg7;
  arg8 = *farg8;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->gaussSeidelCopy(*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg4,(double const &)*arg5,arg6,arg7,arg8);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_reorderedGaussSeidelCopy(void const *farg1, void *farg2, void const *farg3, void const *farg4, void const *farg5, double const *farg6, int *farg7, int const *farg8, bool const *farg9) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg3 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *arg4 = 0 ;
  Teuchos::ArrayView< int > *arg5 = 0 ;
  double *arg6 = 0 ;
  Tpetra::ESweepDirection arg7 ;
  int arg8 ;
  bool arg9 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)
    ? ((Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > &");
    return ;
  }
  arg3 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg4 = (Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > *)(((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)
    ? ((Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO,false> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &");
    return ;
  }
  arg5 = (Teuchos::ArrayView< int > *)(((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg5)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg5)->get()
    :0);
  if (!arg5)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int > const &");
    return ;
  }
  arg6 = reinterpret_cast< double * >(const_cast< double* >(farg6));
  arg7 = static_cast< Tpetra::ESweepDirection >(*farg7);
  arg8 = *farg8;
  arg9 = *farg9;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->reorderedGaussSeidelCopy(*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const &)*arg4,(Teuchos::ArrayView< int > const &)*arg5,(double const &)*arg6,arg7,arg8,arg9);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void * swigc_TpetraCrsMatrix_description(void const *farg1) {
  void * fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = (new std::string(static_cast< const std::string& >(result)));
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsMatrix_importAndFillComplete__SWIG_0(void const *farg1, void *farg2, void const *farg3, void *farg4, void *farg5, void *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *)(((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &");
    return ;
  }
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg5 : &tempnull5;
  arg6 = farg6 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg6 : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_importAndFillComplete__SWIG_1(void const *farg1, void *farg2, void const *farg3, void *farg4, void *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull5 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *)(((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &");
    return ;
  }
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_importAndFillComplete__SWIG_2(void const *farg1, void *farg2, void const *farg3, void const *farg4, void *farg5, void *farg6, void *farg7) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *arg3 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg6 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull6 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull7 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *)(((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &");
    return ;
  }
  arg4 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type *)(((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg4)
    ? ((Teuchos::RCP<const Tpetra::Import<LO,GO,NO> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &");
    return ;
  }
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg5 : &tempnull5;
  arg6 = farg6 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg6 : &tempnull6;
  arg7 = farg7 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg7 : &tempnull7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &)*arg3,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::import_type const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg5,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg6,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_exportAndFillComplete__SWIG_0(void const *farg1, void *farg2, void const *farg3, void *farg4, void *farg5, void *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &");
    return ;
  }
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg5 : &tempnull5;
  arg6 = farg6 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg6 : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_exportAndFillComplete__SWIG_1(void const *farg1, void *farg2, void const *farg3, void *farg4, void *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull5 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &");
    return ;
  }
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg4 : &tempnull4;
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_exportAndFillComplete__SWIG_2(void const *farg1, void *farg2, void const *farg3, void *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull4 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &");
    return ;
  }
  arg4 = farg4 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_exportAndFillComplete__SWIG_3(void const *farg1, void *farg2, void const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &");
    return ;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void swigc_TpetraCrsMatrix_exportAndFillComplete__SWIG_4(void const *farg1, void *farg2, void const *farg3, void const *farg4, void *farg5, void *farg6, void *farg7) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *arg3 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *arg6 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > tempnull6 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull7 ;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = farg2 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > > *)farg2 : &tempnull2;
  arg3 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &");
    return ;
  }
  arg4 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type *)(((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg4)
    ? ((Teuchos::RCP<const Tpetra::Export<LO,GO,NO> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &");
    return ;
  }
  arg5 = farg5 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg5 : &tempnull5;
  arg6 = farg6 ? (Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > *)farg6 : &tempnull6;
  arg7 = farg7 ? (Teuchos::RCP< Teuchos::ParameterList > *)farg7 : &tempnull7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &)*arg3,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::export_type const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg5,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false >::map_type const > const &)*arg6,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT bool swigc_TpetraCrsMatrix_haveGlobalConstants(void const *farg1) {
  bool fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO,false > const *)arg1)->haveGlobalConstants();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), 0);
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_TpetraCrsMatrix_getGlobalRowCopy(void const *farg1, long long const *farg2, swig::SwigfArrayWrapper< long long > *farg3, swig::SwigfArrayWrapper< double > *farg4, size_t *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO,false > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO,false > *) 0 ;
  GO arg2 ;
  std::pair< GO *,std::size_t > arg3 ;
  std::pair< SC *,std::size_t > arg4 ;
  size_t *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO,false > const > *smartarg1 = 0 ;
  
  arg3 = ::std::pair< long long*, std::size_t >();
  arg4 = ::std::pair< double*, std::size_t >();
  smartarg1 = (Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  arg1 = (Tpetra::CrsMatrix<SC,LO,GO,NO,false> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  (&arg3)->first  = farg3->data;
  (&arg3)->second = farg3->size;
  (&arg4)->first  = farg4->data;
  (&arg4)->second = farg4->size;
  arg5 = reinterpret_cast< size_t * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsMatrix_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sc_false_Sg__getGlobalRowCopy((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode,false > const *)arg1,arg2,arg3,arg4,*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_IndexError, e.what(), );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl(SWIG_RuntimeError, e.what(), );
    }
    catch (...)
    {
      SWIG_exception_impl(SWIG_UnknownError, "An unknown exception occurred", );
    }
  }
  
}


SWIGEXPORT void* swigc_spcopy_TpetraCrsMatrix(void* farg1) {
  Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >* arg1 = (Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> > *)farg1;
  return new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO,false> >(*arg1);
}


#ifdef __cplusplus
}
#endif

