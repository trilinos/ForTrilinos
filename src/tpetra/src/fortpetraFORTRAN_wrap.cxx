/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* Contract support */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) { \
swig::fortran_store_exception(SWIG_ValueError, msg); return nullreturn; }


#include <algorithm>


#include <stdexcept>


#include <sstream>


namespace swig
{
void array_size_check(size_t src, size_t dst)
{
    if (dst < src)
    {
        std::ostringstream os;
        os << "Array size mismatch: " << src << " != " << dst;
        throw std::range_error(os.str());
    }
}
}



namespace swig
{
// Functions are defined in an imported module
void fortran_check_unhandled_exception();
void fortran_store_exception(int code, const char *msg);
} // end namespace swig


#include <string>


namespace swig
{
void string_size_check(size_t src, size_t dst)
{
    if (dst < src)
    {
        std::ostringstream os;
        os << "String size too small: " << dst << " < " << src;
        throw std::range_error(os.str());
    }
}

void string_copyout(const std::string& str, char* s, size_t count)
{
    string_size_check(str.size(), count);

    s = std::copy(str.begin(), str.end(), s);
    std::fill_n(s, count - str.size(), ' ');
}
}



#include "Tpetra_ConfigDefs.hpp"

typedef double Scalar;
typedef int LocalOrdinal;
typedef int GlobalOrdinal;
typedef Kokkos::Compat::KokkosSerialWrapperNode Node;


#include "Teuchos_RCP.hpp"
#include "Tpetra_Map.hpp"


#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


#if __cplusplus >= 201103L
#include <utility>
#endif

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT void* swigc_new_ArithTraitsScalar() {
  void* fresult = 0 ;
  Kokkos::Details::ArithTraits< Scalar > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Kokkos::Details::ArithTraits< Scalar > *)new Kokkos::Details::ArithTraits< Scalar >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void swigc_delete_ArithTraitsScalar(void* farg1) {
  Kokkos::Details::ArithTraits< Scalar > *arg1 = (Kokkos::Details::ArithTraits< Scalar > *) 0 ;
  
  arg1 = (Kokkos::Details::ArithTraits< Scalar > *)(farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return ; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return ; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return ; 
      } while(0);
    }
  }
}


SWIGEXPORT void* swigc_new_TpetraMap__SWIG_0(const unsigned long* farg1, const int* farg2, void * farg3, int* farg4) {
  void* fresult = 0 ;
  Tpetra::global_size_t arg1 ;
  int arg2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg3 = 0 ;
  Tpetra::LocalGlobal arg4 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull3 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = *farg2;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg3 : &tempnull3;
  arg4 = (Tpetra::LocalGlobal)(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *)new Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node >(arg1,arg2,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_new_TpetraMap__SWIG_1(const unsigned long* farg1, const int* farg2, void * farg3) {
  void* fresult = 0 ;
  Tpetra::global_size_t arg1 ;
  int arg2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull3 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = *farg2;
  arg3 = farg3 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg3 : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *)new Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node >(arg1,arg2,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_new_TpetraMap__SWIG_2(const unsigned long* farg1, const size_t* farg2, const int* farg3, void * farg4) {
  void* fresult = 0 ;
  Tpetra::global_size_t arg1 ;
  size_t arg2 ;
  int arg3 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg4 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull4 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = *farg2;
  arg3 = *farg3;
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *)new Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node >(arg1,arg2,arg3,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_new_TpetraMap__SWIG_3(const unsigned long* farg1, int * farg2, const int* farg3, const int* farg4, void * farg5) {
  void* fresult = 0 ;
  Tpetra::global_size_t arg1 ;
  int *arg2 ;
  int arg3 ;
  int arg4 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull5 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = farg2;
  arg3 = *farg3;
  arg4 = *farg4;
  arg5 = farg5 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg5 : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *)new Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node >(arg1,(int const (*))arg2,arg3,arg4,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_new_TpetraMap__SWIG_4(const unsigned long* farg1, const void* farg2, const int* farg3, void * farg4) {
  void* fresult = 0 ;
  Tpetra::global_size_t arg1 ;
  Teuchos::ArrayView< int const > *arg2 = 0 ;
  int arg3 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg4 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull4 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *result = 0 ;
  
  arg1 = *farg1;
  arg2 = (Teuchos::ArrayView< int const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg2)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int const > const &");
    return 0;
  }
  arg3 = *farg3;
  arg4 = farg4 ? (Teuchos::RCP< Teuchos::Comm< int > const > *)farg4 : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *)new Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node >(arg1,(Teuchos::ArrayView< int const > const &)*arg2,arg3,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_new_TpetraMap__SWIG_5() {
  void* fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *)new Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result ? new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(result SWIG_NO_NULL_DELETER_1) : 0;
  return fresult;
}


SWIGEXPORT void swigc_delete_TpetraMap(void* farg1) {
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > > *smartarg1 = 0 ;
  
  smartarg1 = (Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return ; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return ; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return ; 
      } while(0);
    }
  }
}


SWIGEXPORT bool swigc_TpetraMap_isOneToOne(const void* farg1) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isOneToOne();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT unsigned long swigc_TpetraMap_getGlobalNumElements(const void* farg1) {
  unsigned long fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  Tpetra::global_size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getGlobalNumElements();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT size_t swigc_TpetraMap_getNodeNumElements(const void* farg1) {
  size_t fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  size_t result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getNodeNumElements();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getIndexBase(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getIndexBase();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMinLocalIndex(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getMinLocalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMaxLocalIndex(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getMaxLocalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMinGlobalIndex(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getMinGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMaxGlobalIndex(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getMaxGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMinAllGlobalIndex(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getMinAllGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getMaxAllGlobalIndex(const void* farg1) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getMaxAllGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getLocalElement(const void* farg1, const int* farg2) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getLocalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getGlobalElement(const void* farg1, const int* farg2) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  int result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getGlobalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getRemoteIndexList__SWIG_0(const void* farg1, const void* farg2, const void* farg3, const void* farg4) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::ArrayView< int const > *arg2 = 0 ;
  Teuchos::ArrayView< int > *arg3 = 0 ;
  Teuchos::ArrayView< int > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  Tpetra::LookupStatus result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Teuchos::ArrayView< int const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg2)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int const > const &");
    return 0;
  }
  arg3 = (Teuchos::ArrayView< int > *)(((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg3)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int > const &");
    return 0;
  }
  arg4 = (Teuchos::ArrayView< int > *)(((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg4)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg4)->get()
    :0);
  if (!arg4)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::LookupStatus)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getRemoteIndexList((Teuchos::ArrayView< int const > const &)*arg2,(Teuchos::ArrayView< int > const &)*arg3,(Teuchos::ArrayView< int > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT int swigc_TpetraMap_getRemoteIndexList__SWIG_1(const void* farg1, const void* farg2, const void* farg3) {
  int fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::ArrayView< int const > *arg2 = 0 ;
  Teuchos::ArrayView< int > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  Tpetra::LookupStatus result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Teuchos::ArrayView< int const > *)(((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg2)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<const int> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int const > const &");
    return 0;
  }
  arg3 = (Teuchos::ArrayView< int > *)(((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg3)
    ? ((Teuchos::RCP<const Teuchos::ArrayView<int> > *)farg3)->get()
    :0);
  if (!arg3)
  {
    throw std::logic_error("Attempt to dereference null Teuchos::ArrayView< int > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::LookupStatus)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getRemoteIndexList((Teuchos::ArrayView< int const > const &)*arg2,(Teuchos::ArrayView< int > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void* swigc_TpetraMap_getNodeElementList(const void* farg1) {
  void* fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  Teuchos::ArrayView< int const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getNodeElementList();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = new Teuchos::RCP< Teuchos::ArrayView<const int> >(new Teuchos::ArrayView< int const >((Teuchos::ArrayView< int const > &)result));
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isNodeLocalElement(const void* farg1, const int* farg2) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isNodeLocalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isNodeGlobalElement(const void* farg1, const int* farg2) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = *farg2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isNodeGlobalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isUniform(const void* farg1) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isUniform();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isContiguous(const void* farg1) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isContiguous();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isDistributed(const void* farg1) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isDistributed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isCompatible(const void* farg1, const void* farg2) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isCompatible((Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_isSameAs(const void* farg1, const void* farg2) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > *)(((Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->isSameAs((Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT bool swigc_TpetraMap_locallySameAs(const void* farg1, const void* farg2) {
  bool fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Tpetra::Map< int,int,Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  bool result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  arg2 = (Tpetra::Map< int,int,Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *)(((Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg2)
    ? ((Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg2)->get()
    :0);
  if (!arg2)
  {
    throw std::logic_error("Attempt to dereference null Tpetra::Map< int,int,Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &");
    return 0;
  }
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->locallySameAs((Tpetra::Map< int,int,Tpetra::Map< int,int,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void * swigc_TpetraMap_getComm(const void* farg1) {
  void * fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  fresult = (!Teuchos::is_null(result)) ? new Teuchos::RCP< Teuchos::Comm< int > const >(result) : 0;
  return fresult;
}


SWIGEXPORT void* swigc_TpetraMap_description(const void* farg1) {
  void* fresult = 0 ;
  Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *arg1 = (Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const > *smartarg1 = 0 ;
  std::string result;
  
  smartarg1 = (Teuchos::RCP<const Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  arg1 = (Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> *)(smartarg1 ? smartarg1->get() : 0);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    swig::fortran_check_unhandled_exception();
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LocalOrdinal,GlobalOrdinal,Node > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_IndexError, e.what()); return 0; 
      } while(0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      do {
        swig::fortran_store_exception(SWIG_RuntimeError, e.what()); return 0; 
      } while(0);
    }
    catch (...)
    {
      do {
        swig::fortran_store_exception(SWIG_UnknownError, "An unknown exception occurred"); return 0; 
      } while(0);
    }
  }
  
#if __cplusplus >= 201103L
  fresult = new std::string(std::move(result));
#else
  fresult = new std::string(result);
#endif
  
  return fresult;
}


SWIGEXPORT void* swigc_spcopy_TpetraMap(void* farg1) {
  Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >* arg1 = (Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> > *)farg1;
  return new Teuchos::RCP< Tpetra::Map<LocalOrdinal,GlobalOrdinal,Node> >(*arg1);
}


#ifdef __cplusplus
}
#endif

