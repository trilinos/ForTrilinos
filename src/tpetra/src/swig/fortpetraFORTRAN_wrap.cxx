/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/*
 * Copyright 2017-2018, UT-Battelle, LLC
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * License-Filename: LICENSE
 */


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* qualifier for exported *const* global data variables*/
#ifndef SWIGEXTERN
# ifdef __cplusplus
#   define SWIGEXTERN extern
# else
#   define SWIGEXTERN
# endif
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
 { throw std::logic_error("In " DECL ": " MSG); }


extern "C" {
void SWIG_check_unhandled_exception_impl(const char* decl);
void SWIG_store_exception(const char* decl, int errcode, const char *msg);
}


#undef SWIG_exception_impl
#define SWIG_exception_impl(DECL, CODE, MSG, RETURNNULL) \
    SWIG_store_exception(DECL, CODE, MSG); RETURNNULL;


enum SwigMemFlags {
    SWIG_MEM_OWN = 0x01,
    SWIG_MEM_RVALUE = 0x02,
    SWIG_MEM_CONST = 0x04
};


#define SWIG_check_sp_nonnull(INPUT, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(INPUT)) { \
    SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }

#define SWIG_constsp_mem_flags SWIG_MEM_CONST
#define SWIG_sp_mem_flags 0



#define SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
  if (!(SWIG_CLASS_WRAPPER).cptr) { \
    SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
                        "Cannot pass null " TYPENAME " (class " FNAME ") " \
                        "as a reference", RETURNNULL); \
  }


namespace swig {
enum AssignmentType {
  ASSIGNMENT_DEFAULT,
  ASSIGNMENT_NODESTRUCT,
  ASSIGNMENT_SMARTPTR
};
}


#define SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    if ((SWIG_CLASS_WRAPPER).cmemflags & SWIG_MEM_CONST) { \
        SWIG_exception_impl(FUNCNAME, SWIG_TypeError, \
            "Cannot pass const " TYPENAME " (class " FNAME ") " \
            "as a mutable reference", \
            RETURNNULL); \
    }


#define SWIG_check_mutable_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL) \
    SWIG_check_nonnull(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL); \
    SWIG_check_mutable(SWIG_CLASS_WRAPPER, TYPENAME, FNAME, FUNCNAME, RETURNNULL);

#define SWIGPOLICY_Tpetra__MapT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__ImportT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__ExportT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__MultiVectorT_double_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__OperatorT_double_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_ForTpetraOperator swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__RowInfo swig::ASSIGNMENT_DEFAULT
#define SWIGPOLICY_Tpetra__CrsGraphT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__CrsMatrixT_double_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__MatrixMarket__ReaderT_Tpetra__CrsMatrixT_SC_LO_GO_NO_t_t swig::ASSIGNMENT_SMARTPTR
#define SWIGPOLICY_Tpetra__MatrixMarket__WriterT_Tpetra__CrsMatrixT_SC_LO_GO_NO_t_t swig::ASSIGNMENT_SMARTPTR

#include <stdexcept>


/* Support for the `contract` feature.
 *
 * Note that RETURNNULL is first because it's inserted via a 'Replaceall' in
 * the fortran.cxx file.
 */
#define SWIG_contract_assert(RETURNNULL, EXPR, MSG) \
 if (!(EXPR)) { SWIG_exception_impl("$decl", SWIG_ValueError, MSG, RETURNNULL); } 


#define SWIGVERSION 0x040000 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include "Kokkos_DefaultNode.hpp"


typedef double                                  SC;
typedef int                                     LO;
typedef long long                               GO;
typedef Kokkos::Compat::KokkosSerialWrapperNode NO;
typedef char                                    Packet;


#include "Tpetra_ConfigDefs.hpp"


#include "Tpetra_CombineMode.hpp"


struct SwigClassWrapper {
    void* cptr;
    int cmemflags;
};


SWIGINTERN SwigClassWrapper SwigClassWrapper_uninitialized() {
    SwigClassWrapper result;
    result.cptr = NULL;
    result.cmemflags = 0;
    return result;
}


#include <stdlib.h>
#ifdef _MSC_VER
# ifndef strtoull
#  define strtoull _strtoui64
# endif
# ifndef strtoll
#  define strtoll _strtoi64
# endif
#endif


struct SwigArrayWrapper {
    void* data;
    size_t size;
};


SWIGINTERN SwigArrayWrapper SwigArrayWrapper_uninitialized() {
  SwigArrayWrapper result;
  result.data = NULL;
  result.size = 0;
  return result;
}


#include <string.h>


#include "Teuchos_RCP.hpp"
#include "Tpetra_Map.hpp"


#define SWIG_NO_NULL_DELETER_0 , Teuchos::RCP_WEAK_NO_DEALLOC
#define SWIG_NO_NULL_DELETER_1
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_NEW
#define SWIG_NO_NULL_DELETER_SWIG_POINTER_OWN


namespace swig {

template<class T, AssignmentType A>
struct DestructorPolicy {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    delete static_cast<T*>(self.cptr);
    return SwigClassWrapper_uninitialized();
  }
};
template<class T>
struct DestructorPolicy<T, ASSIGNMENT_NODESTRUCT> {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    SWIG_exception_impl("assignment", SWIG_TypeError, "Invalid assignment: class type has private destructor", return SwigClassWrapper_uninitialized());
  }
};
}


namespace swig {

template<class T, AssignmentType A>
struct AssignmentPolicy {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    return DestructorPolicy<T, A>::destruct(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destruct(self);
    }
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    if (self.cmemflags & SWIG_MEM_OWN) {
      destruct(self);
    }
    self.cptr = other.cptr;
    self.cmemflags = other.cmemflags & ~SWIG_MEM_OWN;
    return self;
  }
};

template<class T>
struct AssignmentPolicy<T, ASSIGNMENT_SMARTPTR> {
  static SwigClassWrapper destruct(SwigClassWrapper self) {
    return DestructorPolicy<T, ASSIGNMENT_SMARTPTR>::destruct(self);
  }
  static SwigClassWrapper alias(SwigClassWrapper other) {
    SwigClassWrapper self;
    self.cptr = new T(*static_cast<T*>(other.cptr));
    self.cmemflags = other.cmemflags | SWIG_MEM_OWN;
    return self;
  }
  static SwigClassWrapper move_alias(SwigClassWrapper self, SwigClassWrapper other) {
    self = copy_alias(self, other);
    self.cmemflags = other.cmemflags & ~SWIG_MEM_RVALUE;
    destruct(other);
    return self;
  }
  static SwigClassWrapper copy_alias(SwigClassWrapper self, SwigClassWrapper other) {
    // LHS and RHS should both 'own' their shared pointers
    T *pself = static_cast<T*>(self.cptr);
    T *pother = static_cast<T*>(other.cptr);
    *pself = *pother;
    return self;
  }
};

} // end namespace swig

template<class T, swig::AssignmentType A>
SWIGINTERN void SWIG_assign(SwigClassWrapper* self, SwigClassWrapper other) {
  typedef swig::AssignmentPolicy<T, A> Policy_t;

  if (self->cptr == NULL) {
    /* LHS is unassigned */
    if (other.cmemflags & SWIG_MEM_RVALUE) {
      /* Capture pointer from RHS, clear 'moving' flag */
      self->cptr = other.cptr;
      self->cmemflags = other.cmemflags & (~SWIG_MEM_RVALUE);
    } else {
      /* Aliasing another class; clear ownership or copy smart pointer */
      *self = Policy_t::alias(other);
    }
  } else if (other.cptr == NULL) {
    /* Replace LHS with a null pointer */
    *self = Policy_t::destruct(*self);
  } else if (other.cmemflags & SWIG_MEM_RVALUE) {
    /* Transferred ownership from a variable that's about to be lost.
     * Move-assign and delete the transient data */
    *self = Policy_t::move_alias(*self, other);
  } else {
    /* RHS shouldn't be deleted, alias to LHS */
    *self = Policy_t::copy_alias(*self, other);
  }
}


#include "Tpetra_Import.hpp"
#include "Tpetra_Export.hpp"

SWIGINTERN size_t Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumSameIDs(Tpetra::Import< LO,GO,NO > const *self){
    return self->getNumSameIDs();
  }
SWIGINTERN size_t Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumPermuteIDs(Tpetra::Import< LO,GO,NO > const *self){
    return self->getNumPermuteIDs();
  }
SWIGINTERN size_t Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumRemoteIDs(Tpetra::Import< LO,GO,NO > const *self){
    return self->getNumRemoteIDs();
  }
SWIGINTERN size_t Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumExportIDs(Tpetra::Import< LO,GO,NO > const *self){
    return self->getNumExportIDs();
  }
SWIGINTERN Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getSourceMap(Tpetra::Import< LO,GO,NO > const *self){
    return self->getSourceMap();
  }
SWIGINTERN Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getTargetMap(Tpetra::Import< LO,GO,NO > const *self){
    return self->getTargetMap();
  }
SWIGINTERN size_t Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumSameIDs(Tpetra::Export< LO,GO,NO > const *self){
    return self->getNumSameIDs();
  }
SWIGINTERN size_t Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumPermuteIDs(Tpetra::Export< LO,GO,NO > const *self){
    return self->getNumPermuteIDs();
  }
SWIGINTERN size_t Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumRemoteIDs(Tpetra::Export< LO,GO,NO > const *self){
    return self->getNumRemoteIDs();
  }
SWIGINTERN size_t Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumExportIDs(Tpetra::Export< LO,GO,NO > const *self){
    return self->getNumExportIDs();
  }
SWIGINTERN Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getSourceMap(Tpetra::Export< LO,GO,NO > const *self){
    return self->getSourceMap();
  }
SWIGINTERN Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getTargetMap(Tpetra::Export< LO,GO,NO > const *self){
    return self->getTargetMap();
  }

#include "Tpetra_MultiVector.hpp"


#include <type_traits>

SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_0(Tpetra::MultiVector< SC,LO,GO,NO > *self,Tpetra::MultiVector< SC,LO,GO,NO > const &source,Tpetra::Import< LO,GO,NO > const &importer,Tpetra::CombineMode CM){
      self->doImport(source, importer, CM);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_1(Tpetra::MultiVector< SC,LO,GO,NO > *self,Tpetra::MultiVector< SC,LO,GO,NO > const &source,Tpetra::Export< LO,GO,NO > const &exporter,Tpetra::CombineMode CM){
      self->doImport(source, exporter, CM);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_0(Tpetra::MultiVector< SC,LO,GO,NO > *self,Tpetra::MultiVector< SC,LO,GO,NO > const &source,Tpetra::Export< LO,GO,NO > const &exporter,Tpetra::CombineMode CM){
      self->doExport(source, exporter, CM);
    }
SWIGINTERN void Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_1(Tpetra::MultiVector< SC,LO,GO,NO > *self,Tpetra::MultiVector< SC,LO,GO,NO > const &source,Tpetra::Import< LO,GO,NO > const &importer,Tpetra::CombineMode CM){
      self->doExport(source, importer, CM);
    }

#include "Tpetra_Operator.hpp"


extern "C" {
/* Fortran BIND(C) function */
void swigd_ForTpetraOperator_apply(
        SwigClassWrapper const *fself,
        SwigClassWrapper const *farg1,
        SwigClassWrapper const *farg2,
        int *farg3,
        double const *farg4,
        double const *farg5
        );
SwigClassWrapper swigd_ForTpetraOperator_getDomainMap(
        SwigClassWrapper const *fself
        );
SwigClassWrapper swigd_ForTpetraOperator_getRangeMap(
        SwigClassWrapper const *fself
        );
}


  class ForTpetraOperator : public Tpetra::Operator<SC,LO,GO,NO> {
    // Pointer to polymorphic fortran pointer
    void* fhandle_;
   public:
    /* DIRECTOR FUNCTIONS */
    const void* fhandle() const { assert(fhandle_); return this->fhandle_; }
    void init(void* fh) { fhandle_ = fh; }

    /* TPETRA */
    typedef Tpetra::MultiVector<SC,LO,GO,NO> vector_type;
    typedef Tpetra::Map<LO,GO,NO> map_type;
    ForTpetraOperator() : fhandle_(NULL) { /* * */ }


    virtual Teuchos::RCP<const map_type> getDomainMap() const {
      /* construct "this" pointer */
      Teuchos::RCP<ForTpetraOperator> tempthis(
             const_cast<ForTpetraOperator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST;

      SwigClassWrapper fresult = swigd_ForTpetraOperator_getDomainMap(&self);

      Teuchos::RCP<const map_type>* smartresult = static_cast< Teuchos::RCP<const map_type>* >(fresult.cptr);
      return *smartresult;
    }

    virtual Teuchos::RCP<const map_type> getRangeMap() const {
      /* construct "this" pointer */
      Teuchos::RCP<ForTpetraOperator> tempthis(
             const_cast<ForTpetraOperator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST;

      SwigClassWrapper fresult = swigd_ForTpetraOperator_getRangeMap(&self);

      Teuchos::RCP<const map_type>* smartresult = static_cast< Teuchos::RCP<const map_type>* >(fresult.cptr);
      return *smartresult;
    }

    virtual void apply(const vector_type &X, vector_type &Y,
                       Teuchos::ETransp mode, SC alpha, SC beta) const
    {
      /* construct "this" pointer */
      Teuchos::RCP<ForTpetraOperator> tempthis(
             const_cast<ForTpetraOperator*>(this) SWIG_NO_NULL_DELETER_0);
      SwigClassWrapper self;
      self.cptr = &tempthis;
      self.cmemflags = SWIG_MEM_CONST;

      /* convert X -> class wrapper */
      Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> > temprcp1(&X SWIG_NO_NULL_DELETER_0);

      SwigClassWrapper farg1;
      farg1.cptr = &temprcp1;
      farg1.cmemflags = SWIG_MEM_CONST;

      Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> > temprcp2(&Y SWIG_NO_NULL_DELETER_0);

      SwigClassWrapper farg2;
      farg2.cptr = &temprcp2;
      farg2.cmemflags = 0;

      /* convert scalars to wrappers */
      int farg3 = mode;
      double farg4 = alpha;
      double farg5 = beta;

      swigd_ForTpetraOperator_apply(&self, &farg1, &farg2, &farg3, &farg4, &farg5);
    }
  };


#include "Tpetra_CrsGraph.hpp"

SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__getNodeRowPtrs(Tpetra::CrsGraph< LO,GO,NO > const *self,Teuchos::ArrayView< std::size_t > rowPointers){
      auto rowPointersArrayRCP = self->getNodeRowPtrs();
      TEUCHOS_TEST_FOR_EXCEPTION(rowPointersArrayRCP.size() != rowPointers.size(), std::runtime_error, "Wrong rowPointers size");
      auto n = rowPointers.size();
      for (int i = 0; i < n; i++)
        rowPointers[i] = rowPointersArrayRCP[i]+1;
    }
SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__getNodePackedIndices(Tpetra::CrsGraph< LO,GO,NO > const *self,Teuchos::ArrayView< std::size_t > columnIndices){
      auto columnIndicesArrayRCP = self->getNodeRowPtrs();
      TEUCHOS_TEST_FOR_EXCEPTION(columnIndicesArrayRCP.size() != columnIndices.size(), std::runtime_error, "Wrong columnIndices size");
      auto nnz = columnIndices.size();
      for (int i = 0; i < nnz; i++)
        columnIndices[i] = columnIndicesArrayRCP[i]+1;
    }
SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_0(Tpetra::CrsGraph< LO,GO,NO > *self,Tpetra::CrsGraph< LO,GO,NO > const &source,Tpetra::Import< LO,GO,NO > const &importer,Tpetra::CombineMode CM){
      self->doImport(source, importer, CM);
    }
SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_1(Tpetra::CrsGraph< LO,GO,NO > *self,Tpetra::CrsGraph< LO,GO,NO > const &source,Tpetra::Export< LO,GO,NO > const &exporter,Tpetra::CombineMode CM){
      self->doImport(source, exporter, CM);
    }
SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_0(Tpetra::CrsGraph< LO,GO,NO > *self,Tpetra::CrsGraph< LO,GO,NO > const &source,Tpetra::Export< LO,GO,NO > const &exporter,Tpetra::CombineMode CM){
      self->doExport(source, exporter, CM);
    }
SWIGINTERN void Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_1(Tpetra::CrsGraph< LO,GO,NO > *self,Tpetra::CrsGraph< LO,GO,NO > const &source,Tpetra::Import< LO,GO,NO > const &importer,Tpetra::CombineMode CM){
      self->doExport(source, importer, CM);
    }

#include "Tpetra_CrsMatrix.hpp"

SWIGINTERN void Tpetra_CrsMatrix_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__getAllValues(Tpetra::CrsMatrix< SC,LO,GO,NO > const *self,Teuchos::ArrayView< std::size_t > rowPointers,Teuchos::ArrayView< LO > columnIndices,Teuchos::ArrayView< SC > values){
      Teuchos::ArrayRCP<const size_t> rowPointersArrayRCP;
      Teuchos::ArrayRCP<const LO>     columnIndicesArrayRCP;
      Teuchos::ArrayRCP<const SC>     valuesArrayRCP;
      self->getAllValues(rowPointersArrayRCP, columnIndicesArrayRCP, valuesArrayRCP);
      TEUCHOS_TEST_FOR_EXCEPTION(rowPointersArrayRCP.size()   != rowPointers.size(),    std::runtime_error, "Wrong rowPointers size");
      TEUCHOS_TEST_FOR_EXCEPTION(columnIndicesArrayRCP.size() != columnIndices.size(),  std::runtime_error, "Wrong columnIndices size");
      TEUCHOS_TEST_FOR_EXCEPTION(valuesArrayRCP.size()        != values.size(),         std::runtime_error, "Wrong values size");
      auto n = rowPointers.size();
      for (int i = 0; i < n; i++)
        rowPointers[i] = rowPointersArrayRCP[i]+1;
      auto nnz = columnIndices.size();
      for (int i = 0; i < nnz; i++) {
        columnIndices[i] = columnIndicesArrayRCP[i]+1;
        values       [i] = valuesArrayRCP[i];
      }
    }

#include "Tpetra_CrsMatrix.hpp"


namespace ForTrilinos {
  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  Teuchos::RCP<Tpetra::CrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> >
  operator_to_matrix(Teuchos::RCP<Tpetra::Operator<Scalar,LocalOrdinal,GlobalOrdinal,Node> > op) {
    auto A = Teuchos::rcp_dynamic_cast<Tpetra::CrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> >(op);
    TEUCHOS_TEST_FOR_EXCEPTION(A.is_null(), std::runtime_error, "operator_to_matrix: the provided operator is not a Tpetra CrsMatrix");
    return A;
  }
  template <class Scalar, class LocalOrdinal, class GlobalOrdinal, class Node>
  Teuchos::RCP<Tpetra::Operator<Scalar, LocalOrdinal, GlobalOrdinal, Node> >
  matrix_to_operator(Teuchos::RCP<Tpetra::CrsMatrix<Scalar, LocalOrdinal, GlobalOrdinal, Node> > A) {
    auto op = Teuchos::rcp_dynamic_cast<Tpetra::Operator<Scalar, LocalOrdinal, GlobalOrdinal, Node> >(A);
    return op;
  }
}


#include "MatrixMarket_Tpetra.hpp"


#include "Teuchos_RCP.hpp"
#include "TpetraExt_MatrixMatrix.hpp"

extern "C" {
SWIGEXPORT void _wrap_setCombineModeParameter(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Teuchos::ParameterList *arg1 = 0 ;
  std::string *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *smartarg1 ;
  std::string tempstr2 ;
  
  SWIG_check_sp_nonnull(farg1, "Teuchos::ParameterList *", "ParameterList", "Tpetra::setCombineModeParameter(Teuchos::ParameterList &,std::string const &)", return )
  smartarg1 = static_cast< Teuchos::RCP< Teuchos::ParameterList >* >(farg1->cptr);
  arg1 = const_cast< Teuchos::ParameterList* >(smartarg1->get());
  tempstr2 = std::string(static_cast<const char *>(farg2->data), farg2->size);
  arg2 = &tempstr2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::setCombineModeParameter(Teuchos::ParameterList &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::setCombineModeParameter(*arg1,(std::string const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::setCombineModeParameter(Teuchos::ParameterList &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::setCombineModeParameter(Teuchos::ParameterList &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::setCombineModeParameter(Teuchos::ParameterList &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigArrayWrapper _wrap_combineModeToString(int const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::CombineMode arg1 ;
  std::string result;
  
  arg1 = static_cast< Tpetra::CombineMode >(*farg1);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::combineModeToString(Tpetra::CombineMode const)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::combineModeToString(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::combineModeToString(Tpetra::CombineMode const)", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::combineModeToString(Tpetra::CombineMode const)", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::combineModeToString(Tpetra::CombineMode const)", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.size = (&result)->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, (&result)->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMap__SWIG_0(long const *farg1, SwigClassWrapper const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  Tpetra::global_size_t arg1 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg3 = 0 ;
  Tpetra::LocalGlobal arg4 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull3 ;
  Tpetra::Map< LO,GO,NO > *result = 0 ;
  
  {
    arg2 = 1;
  }
  arg1 = static_cast< Tpetra::global_size_t >(*farg1);
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg3->cptr) : &tempnull3;
  arg4 = static_cast< Tpetra::LocalGlobal >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &,Tpetra::LocalGlobal const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LO,GO,NO > *)new Tpetra::Map< LO,GO,NO >(arg1,arg2,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &,Tpetra::LocalGlobal const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &,Tpetra::LocalGlobal const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &,Tpetra::LocalGlobal const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Map<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMap__SWIG_1(long const *farg1, SwigClassWrapper const *farg3) {
  SwigClassWrapper fresult ;
  Tpetra::global_size_t arg1 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull3 ;
  Tpetra::Map< LO,GO,NO > *result = 0 ;
  
  {
    arg2 = 1;
  }
  arg1 = static_cast< Tpetra::global_size_t >(*farg1);
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LO,GO,NO > *)new Tpetra::Map< LO,GO,NO >(arg1,arg2,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Map<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMap__SWIG_2(long const *farg1, int const *farg2, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  Tpetra::global_size_t arg1 ;
  size_t arg2 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg3 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg4 = 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull4 ;
  Tpetra::Map< LO,GO,NO > *result = 0 ;
  
  {
    arg3 = 1;
  }
  arg1 = static_cast< Tpetra::global_size_t >(*farg1);
  arg2 = static_cast< size_t >(*farg2);
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LO,GO,NO > *)new Tpetra::Map< LO,GO,NO >(arg1,arg2,arg3,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,size_t const,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Map<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMap__SWIG_4(long const *farg1, SwigArrayWrapper *farg2, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  Tpetra::global_size_t arg1 ;
  Teuchos::ArrayView< long long const > *arg2 = 0 ;
  long long arg3 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg4 = 0 ;
  Teuchos::ArrayView< long long const > tmpview2 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull4 ;
  Tpetra::Map< LO,GO,NO > *result = 0 ;
  
  {
    arg3 = 1;
  }
  arg1 = static_cast< Tpetra::global_size_t >(*farg1);
  tmpview2 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Teuchos::ArrayView< long long const > const &,long long const,Teuchos::RCP< Teuchos::Comm< int > const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LO,GO,NO > *)new Tpetra::Map< LO,GO,NO >(arg1,(Teuchos::ArrayView< long long const > const &)*arg2,arg3,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Teuchos::ArrayView< long long const > const &,long long const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Teuchos::ArrayView< long long const > const &,long long const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::global_size_t const,Teuchos::ArrayView< long long const > const &,long long const,Teuchos::RCP< Teuchos::Comm< int > const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Map<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMap__SWIG_5() {
  SwigClassWrapper fresult ;
  Tpetra::Map< LO,GO,NO > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::Map()");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LO,GO,NO > *)new Tpetra::Map< LO,GO,NO >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Map<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMap__SWIG_6(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Tpetra::Map< LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *", "TpetraMap", "Tpetra::Map< LO,GO,NO >::Map(Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Map< LO,GO,NO > *)new Tpetra::Map< LO,GO,NO >((Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::Map(Tpetra::Map< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Map<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraMap(SwigClassWrapper *farg1) {
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::~Map()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::~Map()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::~Map()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::~Map()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraMap_isOneToOne(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isOneToOne() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isOneToOne();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isOneToOne() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isOneToOne() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isOneToOne() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT long _wrap_TpetraMap_getGlobalNumElements(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalNumElements() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::Map< LO,GO,NO > const *)arg1)->getGlobalNumElements();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalNumElements() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalNumElements() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalNumElements() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_getNodeNumElements(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeNumElements() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::Map< LO,GO,NO > const *)arg1)->getNodeNumElements();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeNumElements() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeNumElements() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeNumElements() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_getMinLocalIndex(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getMinLocalIndex() const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LO,GO,NO > const *)arg1)->getMinLocalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinLocalIndex() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinLocalIndex() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinLocalIndex() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result + 1;
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_getMaxLocalIndex(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxLocalIndex() const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LO,GO,NO > const *)arg1)->getMaxLocalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxLocalIndex() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxLocalIndex() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxLocalIndex() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result + 1;
  return fresult;
}


SWIGEXPORT long long _wrap_TpetraMap_getMinGlobalIndex(SwigClassWrapper const *farg1) {
  long long fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  long long result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getMinGlobalIndex() const");;
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< LO,GO,NO > const *)arg1)->getMinGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinGlobalIndex() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinGlobalIndex() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinGlobalIndex() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< long long >(result);
  return fresult;
}


SWIGEXPORT long long _wrap_TpetraMap_getMaxGlobalIndex(SwigClassWrapper const *farg1) {
  long long fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  long long result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxGlobalIndex() const");;
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< LO,GO,NO > const *)arg1)->getMaxGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxGlobalIndex() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxGlobalIndex() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxGlobalIndex() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< long long >(result);
  return fresult;
}


SWIGEXPORT long long _wrap_TpetraMap_getMinAllGlobalIndex(SwigClassWrapper const *farg1) {
  long long fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  long long result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getMinAllGlobalIndex() const");;
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< LO,GO,NO > const *)arg1)->getMinAllGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinAllGlobalIndex() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinAllGlobalIndex() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMinAllGlobalIndex() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< long long >(result);
  return fresult;
}


SWIGEXPORT long long _wrap_TpetraMap_getMaxAllGlobalIndex(SwigClassWrapper const *farg1) {
  long long fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  long long result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxAllGlobalIndex() const");;
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< LO,GO,NO > const *)arg1)->getMaxAllGlobalIndex();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxAllGlobalIndex() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxAllGlobalIndex() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getMaxAllGlobalIndex() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< long long >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_getLocalElement(SwigClassWrapper const *farg1, long long const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getLocalElement(long long) const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::Map< LO,GO,NO > const *)arg1)->getLocalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getLocalElement(long long) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getLocalElement(long long) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getLocalElement(long long) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result + 1;
  return fresult;
}


SWIGEXPORT long long _wrap_TpetraMap_getGlobalElement(SwigClassWrapper const *farg1, int const *farg2) {
  long long fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  long long result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalElement(int) const");;
    try
    {
      // Attempt the wrapped function call
      result = (long long)((Tpetra::Map< LO,GO,NO > const *)arg1)->getGlobalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalElement(int) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalElement(int) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getGlobalElement(int) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< long long >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_getRemoteIndexList__SWIG_0(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< long long const > *arg2 = 0 ;
  Teuchos::ArrayView< int > *arg3 = 0 ;
  Teuchos::ArrayView< int > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview2 ;
  Teuchos::ArrayView< int > tmpview3 ;
  Teuchos::ArrayView< int > tmpview4 ;
  Tpetra::LookupStatus result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  tmpview3 = Teuchos::ArrayView<int>(static_cast<int*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<int>(static_cast<int*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< int > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::LookupStatus)((Tpetra::Map< LO,GO,NO > const *)arg1)->getRemoteIndexList((Teuchos::ArrayView< long long const > const &)*arg2,(Teuchos::ArrayView< int > const &)*arg3,(Teuchos::ArrayView< int > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< int > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< int > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< int > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  for (int i = 0; i < tmpview3.size(); i++)
  tmpview3[i] += 1;
  for (int i = 0; i < tmpview4.size(); i++)
  tmpview4[i] += 1;
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_getRemoteIndexList__SWIG_1(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< long long const > *arg2 = 0 ;
  Teuchos::ArrayView< int > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview2 ;
  Teuchos::ArrayView< int > tmpview3 ;
  Tpetra::LookupStatus result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  tmpview3 = Teuchos::ArrayView<int>(static_cast<int*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::LookupStatus)((Tpetra::Map< LO,GO,NO > const *)arg1)->getRemoteIndexList((Teuchos::ArrayView< long long const > const &)*arg2,(Teuchos::ArrayView< int > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getRemoteIndexList(Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< int > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  for (int i = 0; i < tmpview3.size(); i++)
  tmpview3[i] += 1;
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMap_getNodeElementList(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeElementList() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LO,GO,NO > const *)arg1)->getNodeElementList();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeElementList() const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeElementList() const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getNodeElementList() const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isNodeLocalElement(SwigClassWrapper const *farg1, int const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  int arg2 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeLocalElement(int) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isNodeLocalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeLocalElement(int) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeLocalElement(int) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeLocalElement(int) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isNodeGlobalElement(SwigClassWrapper const *farg1, long long const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeGlobalElement(long long) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isNodeGlobalElement(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeGlobalElement(long long) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeGlobalElement(long long) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isNodeGlobalElement(long long) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isUniform(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isUniform() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isUniform();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isUniform() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isUniform() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isUniform() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isContiguous(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isContiguous() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isContiguous();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isContiguous() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isContiguous() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isContiguous() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isDistributed(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isDistributed() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isDistributed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isDistributed() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isDistributed() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isDistributed() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isCompatible(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMap", "Tpetra::Map< LO,GO,NO >::isCompatible(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", return 0)
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isCompatible(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isCompatible((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isCompatible(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isCompatible(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isCompatible(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isSameAs(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMap", "Tpetra::Map< LO,GO,NO >::isSameAs(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", return 0)
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isSameAs(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isSameAs((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isSameAs(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isSameAs(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isSameAs(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_locallySameAs(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *", "TpetraMap", "Tpetra::Map< LO,GO,NO >::locallySameAs(Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &) const", return 0)
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::locallySameAs(Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->locallySameAs((Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::locallySameAs(Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::locallySameAs(Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::locallySameAs(Tpetra::Map< int,long long,Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMap_isLocallyFitted(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  int fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMap", "Tpetra::Map< LO,GO,NO >::isLocallyFitted(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", return 0)
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::isLocallyFitted(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::Map< LO,GO,NO > const *)arg1)->isLocallyFitted((Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isLocallyFitted(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isLocallyFitted(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::isLocallyFitted(Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMap_getComm(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::getComm() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LO,GO,NO > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getComm() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getComm() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::getComm() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Teuchos::Comm<int> >(static_cast< const Teuchos::RCP<const Teuchos::Comm<int> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMap_description(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  std::string result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::description() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LO,GO,NO > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::description() const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::description() const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::description() const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.size = (&result)->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, (&result)->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMap_removeEmptyProcesses(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::removeEmptyProcesses() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LO,GO,NO > const *)arg1)->removeEmptyProcesses();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::removeEmptyProcesses() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::removeEmptyProcesses() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::removeEmptyProcesses() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMap_replaceCommWithSubset(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::Comm< int > const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Teuchos::Comm< int > const > tempnull2 ;
  Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::Comm< int > const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Map< LO,GO,NO >::replaceCommWithSubset(Teuchos::RCP< Teuchos::Comm< int > const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Map< LO,GO,NO > const *)arg1)->replaceCommWithSubset((Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::replaceCommWithSubset(Teuchos::RCP< Teuchos::Comm< int > const > const &) const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::replaceCommWithSubset(Teuchos::RCP< Teuchos::Comm< int > const > const &) const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Map< LO,GO,NO >::replaceCommWithSubset(Teuchos::RCP< Teuchos::Comm< int > const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_TpetraMap_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::Map< LO,GO,NO > *arg1 = (Tpetra::Map< LO,GO,NO > *) 0 ;
  Tpetra::Map< LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::Map< LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Map<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Map< LO,GO,NO > *", "TpetraMap", "Tpetra::Map< LO,GO,NO >::operator =(Tpetra::Map< LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::Map<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Map<LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::Map<LO,GO,NO> >, SWIGPOLICY_Tpetra__MapT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraImport__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraImport__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraImport__SWIG_2(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraImport", "Tpetra::Import< LO,GO,NO >::Import(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraImport__SWIG_3(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  Tpetra::Import< LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraExport", "Tpetra::Import< LO,GO,NO >::Import(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Import< LO,GO,NO > *)new Tpetra::Import< LO,GO,NO >((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::Import(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Import<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraImport(SwigClassWrapper *farg1) {
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::~Import()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::~Import()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::~Import()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::~Import()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraImport_setUnion__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraImport", "Tpetra::Import< LO,GO,NO >::setUnion(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", return SwigClassWrapper_uninitialized())
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->setUnion((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraImport_setUnion__SWIG_1(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->setUnion();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::setUnion() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraImport_createRemoteOnlyImport(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::createRemoteOnlyImport(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::Import< LO,GO,NO > const *)arg1)->createRemoteOnlyImport((Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::createRemoteOnlyImport(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::createRemoteOnlyImport(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::createRemoteOnlyImport(Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraImport_getNumSameIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::getNumSameIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumSameIDs((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumSameIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumSameIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumSameIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraImport_getNumPermuteIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::getNumPermuteIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumPermuteIDs((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumPermuteIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumPermuteIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumPermuteIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraImport_getNumRemoteIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::getNumRemoteIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumRemoteIDs((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumRemoteIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumRemoteIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumRemoteIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraImport_getNumExportIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::getNumExportIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getNumExportIDs((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumExportIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumExportIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getNumExportIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraImport_getSourceMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::getSourceMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getSourceMap((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getSourceMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getSourceMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getSourceMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraImport_getTargetMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Import< LO,GO,NO >::getTargetMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_Import_Sl_LO_Sc_GO_Sc_NO_Sg__getTargetMap((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getTargetMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getTargetMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Import< LO,GO,NO >::getTargetMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_TpetraImport_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::Import< LO,GO,NO > *arg1 = (Tpetra::Import< LO,GO,NO > *) 0 ;
  Tpetra::Import< LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Import< LO,GO,NO > *", "TpetraImport", "Tpetra::Import< LO,GO,NO >::operator =(Tpetra::Import< LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::Import<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::Import<LO,GO,NO> >, SWIGPOLICY_Tpetra__ImportT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraExport__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraExport__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraExport__SWIG_2(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraExport", "Tpetra::Export< LO,GO,NO >::Export(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraExport__SWIG_3(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg1 ;
  Tpetra::Export< LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraImport", "Tpetra::Export< LO,GO,NO >::Export(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::Export< LO,GO,NO > *)new Tpetra::Export< LO,GO,NO >((Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::Export(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::Export<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraExport(SwigClassWrapper *farg1) {
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::~Export()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::~Export()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::~Export()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::~Export()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT size_t _wrap_TpetraExport_getNumSameIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::getNumSameIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumSameIDs((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumSameIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumSameIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumSameIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraExport_getNumPermuteIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::getNumPermuteIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumPermuteIDs((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumPermuteIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumPermuteIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumPermuteIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraExport_getNumRemoteIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::getNumRemoteIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumRemoteIDs((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumRemoteIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumRemoteIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumRemoteIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraExport_getNumExportIDs(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::getNumExportIDs() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getNumExportIDs((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumExportIDs() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumExportIDs() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getNumExportIDs() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraExport_getSourceMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::getSourceMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getSourceMap((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getSourceMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getSourceMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getSourceMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraExport_getTargetMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Export< LO,GO,NO >::getTargetMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra_Export_Sl_LO_Sc_GO_Sc_NO_Sg__getTargetMap((Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getTargetMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getTargetMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Export< LO,GO,NO >::getTargetMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_TpetraExport_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::Export< LO,GO,NO > *arg1 = (Tpetra::Export< LO,GO,NO > *) 0 ;
  Tpetra::Export< LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Export<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Export< LO,GO,NO > *", "TpetraExport", "Tpetra::Export< LO,GO,NO >::operator =(Tpetra::Export< LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::Export<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::Export<LO,GO,NO> >, SWIGPOLICY_Tpetra__ExportT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_0() {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector()");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_1(SwigClassWrapper const *farg1, size_t const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  bool arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  arg3 = (*farg3 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,bool const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,bool const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,bool const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,bool const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_2(SwigClassWrapper const *farg1, size_t const *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_3(SwigClassWrapper const *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::DataAccess arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = static_cast< Teuchos::DataAccess >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_4(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, size_t const *farg3, size_t const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< double const > *arg2 = 0 ;
  size_t arg3 ;
  size_t arg4 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< double const > tmpview2 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg3 = static_cast< size_t >(*farg3);
  arg4 = static_cast< size_t >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< double const > const &,size_t const,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< double const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< double const > const &,size_t const,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< double const > const &,size_t const,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< double const > const &,size_t const,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_6(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_7(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraMultiVector__SWIG_8(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::MultiVector< SC,LO,GO,NO > *)new Tpetra::MultiVector< SC,LO,GO,NO >((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::MultiVector(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraMultiVector(SwigClassWrapper *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::~MultiVector()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::~MultiVector()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::~MultiVector()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::~MultiVector()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_swap(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::swap(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::swap(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->swap(*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::swap(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::swap(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::swap(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_replaceGlobalValue(SwigClassWrapper const *farg1, long long const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  arg3 = *farg3 - 1;
  temp4 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type >(*farg4);
  arg4 = &temp4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->replaceGlobalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_sumIntoGlobalValue__SWIG_0(SwigClassWrapper const *farg1, long long const *farg2, size_t const *farg3, double const *farg4, int const *farg5) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  arg3 = *farg3 - 1;
  temp4 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type >(*farg4);
  arg4 = &temp4;
  arg5 = (*farg5 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->sumIntoGlobalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_sumIntoGlobalValue__SWIG_1(SwigClassWrapper const *farg1, long long const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  arg3 = *farg3 - 1;
  temp4 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type >(*farg4);
  arg4 = &temp4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->sumIntoGlobalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoGlobalValue(long long const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_replaceLocalValue(SwigClassWrapper const *farg1, int const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  temp4 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type >(*farg4);
  arg4 = &temp4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->replaceLocalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_sumIntoLocalValue__SWIG_0(SwigClassWrapper const *farg1, int const *farg2, size_t const *farg3, double const *farg4, int const *farg5) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  temp4 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type >(*farg4);
  arg4 = &temp4;
  arg5 = (*farg5 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->sumIntoLocalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &,bool const) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_sumIntoLocalValue__SWIG_1(SwigClassWrapper const *farg1, int const *farg2, size_t const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  size_t arg3 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  arg3 = *farg3 - 1;
  temp4 = static_cast< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type >(*farg4);
  arg4 = &temp4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->sumIntoLocalValue(arg2,arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sumIntoLocalValue(int const,size_t const,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_putScalar(SwigClassWrapper const *farg1, double const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::putScalar(double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->putScalar((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::putScalar(double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::putScalar(double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::putScalar(double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_randomize__SWIG_0(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->randomize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_randomize__SWIG_1(SwigClassWrapper const *farg1, double const *farg2, double const *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  double *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  double temp3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  temp3 = static_cast< double >(*farg3);
  arg3 = &temp3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize(double const &,double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->randomize((double const &)*arg2,(double const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize(double const &,double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize(double const &,double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::randomize(double const &,double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_replaceMap(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceMap(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceMap((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceMap(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceMap(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::replaceMap(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_reduce(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reduce()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reduce();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reduce()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reduce()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reduce()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMultiVector_subCopy(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< std::size_t const >::value_type *tmpbegin2 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< std::size_t const >::value_type >::type > tmparr2 ;
  Teuchos::ArrayView< std::size_t const > tmpview2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpbegin2 = static_cast<Teuchos::ArrayView< std::size_t const >::value_type*>(farg2->data);
  tmparr2.resize(farg2->size);
  for (int i = 0; i < tmparr2.size(); i++)
  tmparr2[i] = tmpbegin2[i] - 1;
  tmpview2 = tmparr2();
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subCopy(Teuchos::ArrayView< std::size_t const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->subCopy((Teuchos::ArrayView< std::size_t const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subCopy(Teuchos::ArrayView< std::size_t const > const &) const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subCopy(Teuchos::ArrayView< std::size_t const > const &) const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subCopy(Teuchos::ArrayView< std::size_t const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMultiVector_subView(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< std::size_t const >::value_type *tmpbegin2 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< std::size_t const >::value_type >::type > tmparr2 ;
  Teuchos::ArrayView< std::size_t const > tmpview2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpbegin2 = static_cast<Teuchos::ArrayView< std::size_t const >::value_type*>(farg2->data);
  tmparr2.resize(farg2->size);
  for (int i = 0; i < tmparr2.size(); i++)
  tmparr2[i] = tmpbegin2[i] - 1;
  tmpview2 = tmparr2();
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subView(Teuchos::ArrayView< std::size_t const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->subView((Teuchos::ArrayView< std::size_t const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subView(Teuchos::ArrayView< std::size_t const > const &) const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subView(Teuchos::ArrayView< std::size_t const > const &) const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subView(Teuchos::ArrayView< std::size_t const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMultiVector_subViewNonConst(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< std::size_t const >::value_type *tmpbegin2 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< std::size_t const >::value_type >::type > tmparr2 ;
  Teuchos::ArrayView< std::size_t const > tmpview2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > result;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpbegin2 = static_cast<Teuchos::ArrayView< std::size_t const >::value_type*>(farg2->data);
  tmparr2.resize(farg2->size);
  for (int i = 0; i < tmparr2.size(); i++)
  tmparr2[i] = tmpbegin2[i] - 1;
  tmpview2 = tmparr2();
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subViewNonConst(Teuchos::ArrayView< std::size_t const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (arg1)->subViewNonConst((Teuchos::ArrayView< std::size_t const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subViewNonConst(Teuchos::ArrayView< std::size_t const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subViewNonConst(Teuchos::ArrayView< std::size_t const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::subViewNonConst(Teuchos::ArrayView< std::size_t const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMultiVector_offsetView(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetView(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->offsetView((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetView(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const) const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetView(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const) const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetView(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const) const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraMultiVector_offsetViewNonConst(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3) {
  SwigClassWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > result;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetViewNonConst(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (arg1)->offsetViewNonConst((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetViewNonConst(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetViewNonConst(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::offsetViewNonConst(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMultiVector_getData(SwigClassWrapper const *farg1, size_t const *farg2) {
  SwigArrayWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayRCP< double const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getData(size_t) const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->getData(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getData(size_t) const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getData(size_t) const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getData(size_t) const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMultiVector_getDataNonConst(SwigClassWrapper const *farg1, size_t const *farg2) {
  SwigArrayWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayRCP< double > result;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getDataNonConst(size_t)");;
    try
    {
      // Attempt the wrapped function call
      result = (arg1)->getDataNonConst(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getDataNonConst(size_t)", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getDataNonConst(size_t)", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getDataNonConst(size_t)", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT void _wrap_TpetraMultiVector_get1dCopy(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, size_t const *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< double > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< double > tmpview2 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<double>(static_cast<double*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg3 = static_cast< size_t >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dCopy(Teuchos::ArrayView< double > const &,size_t const) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->get1dCopy((Teuchos::ArrayView< double > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dCopy(Teuchos::ArrayView< double > const &,size_t const) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dCopy(Teuchos::ArrayView< double > const &,size_t const) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dCopy(Teuchos::ArrayView< double > const &,size_t const) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMultiVector_get1dView(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayRCP< double const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dView() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->get1dView();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dView() const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dView() const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dView() const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMultiVector_get1dViewNonConst(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayRCP< double > result;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dViewNonConst()");;
    try
    {
      // Attempt the wrapped function call
      result = (arg1)->get1dViewNonConst();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dViewNonConst()", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dViewNonConst()", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::get1dViewNonConst()", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.data = (void*)(&result)->getRawPtr();
  fresult.size = (&result)->size();
  return fresult;
}


SWIGEXPORT void _wrap_TpetraMultiVector_clear_sync_state(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::clear_sync_state()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->clear_sync_state();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::clear_sync_state()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::clear_sync_state()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::clear_sync_state()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_sync_host(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_host()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->sync_host();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_host()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_host()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_host()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_sync_device(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_device()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->sync_device();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_device()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_device()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::sync_device()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraMultiVector_need_sync_host(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_host() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->need_sync_host();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_host() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_host() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_host() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMultiVector_need_sync_device(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_device() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->need_sync_device();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_device() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_device() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::need_sync_device() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraMultiVector_modify_device(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_device()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->modify_device();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_device()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_device()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_device()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_modify_host(SwigClassWrapper const *farg1) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_host()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->modify_host();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_host()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_host()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::modify_host()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_dot__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::ArrayView< double > tmpview3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::dot(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > const &) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  tmpview3 = Teuchos::ArrayView<double>(static_cast<double*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::dot(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->dot((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::dot(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::dot(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::dot(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::dot_type > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_abs(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::abs(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::abs(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->abs((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::abs(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::abs(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::abs(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_reciprocal(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::reciprocal(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reciprocal(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reciprocal((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reciprocal(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reciprocal(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::reciprocal(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_scale__SWIG_0(SwigClassWrapper const *farg1, double const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_scale__SWIG_1(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< double const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< double const > tmpview2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(Teuchos::ArrayView< double const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((Teuchos::ArrayView< double const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(Teuchos::ArrayView< double const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(Teuchos::ArrayView< double const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(Teuchos::ArrayView< double const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_scale__SWIG_2(SwigClassWrapper const *farg1, double const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((double const &)*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::scale(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_update__SWIG_0(SwigClassWrapper const *farg1, double const *farg2, SwigClassWrapper const *farg3, double const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  double *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg3 ;
  double temp4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  temp4 = static_cast< double >(*farg4);
  arg4 = &temp4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->update((double const &)*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,(double const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_update__SWIG_1(SwigClassWrapper const *farg1, double const *farg2, SwigClassWrapper const *farg3, double const *farg4, SwigClassWrapper const *farg5, double const *farg6) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  double *arg4 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg5 = 0 ;
  double *arg6 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg3 ;
  double temp4 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg5 ;
  double temp6 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  temp4 = static_cast< double >(*farg4);
  arg4 = &temp4;
  SWIG_check_sp_nonnull(farg5, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", return )
  smartarg5 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg5->cptr);
  arg5 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg5->get());
  temp6 = static_cast< double >(*farg6);
  arg6 = &temp6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->update((double const &)*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,(double const &)*arg4,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg5,(double const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::update(double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_norm1__SWIG_3(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< double > tmpview2 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<double>(static_cast<double*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm1(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->norm1((Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm1(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm1(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm1(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_norm2__SWIG_3(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< double > tmpview2 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<double>(static_cast<double*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm2(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->norm2((Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm2(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm2(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::norm2(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_normInf__SWIG_3(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< double > tmpview2 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<double>(static_cast<double*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::normInf(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->normInf((Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::normInf(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::normInf(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::normInf(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_meanValue(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< double > tmpview2 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpview2 = Teuchos::ArrayView<double>(static_cast<double*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::meanValue(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->meanValue((Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::meanValue(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::meanValue(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::meanValue(Teuchos::ArrayView< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::impl_scalar_type > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_multiply(SwigClassWrapper const *farg1, int const *farg2, int const *farg3, double const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6, double const *farg7) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::ETransp arg2 ;
  Teuchos::ETransp arg3 ;
  double *arg4 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg5 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg6 = 0 ;
  double *arg7 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  double temp4 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg5 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg6 ;
  double temp7 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Teuchos::ETransp >(*farg2);
  arg3 = static_cast< Teuchos::ETransp >(*farg3);
  temp4 = static_cast< double >(*farg4);
  arg4 = &temp4;
  SWIG_check_sp_nonnull(farg5, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::multiply(Teuchos::ETransp,Teuchos::ETransp,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", return )
  smartarg5 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg5->cptr);
  arg5 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg5->get());
  SWIG_check_sp_nonnull(farg6, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::multiply(Teuchos::ETransp,Teuchos::ETransp,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", return )
  smartarg6 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg6->cptr);
  arg6 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg6->get());
  temp7 = static_cast< double >(*farg7);
  arg7 = &temp7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::multiply(Teuchos::ETransp,Teuchos::ETransp,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->multiply(arg2,arg3,(double const &)*arg4,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg5,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg6,(double const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::multiply(Teuchos::ETransp,Teuchos::ETransp,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::multiply(Teuchos::ETransp,Teuchos::ETransp,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::multiply(Teuchos::ETransp,Teuchos::ETransp,double const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT size_t _wrap_TpetraMultiVector_getNumVectors(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getNumVectors() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->getNumVectors();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getNumVectors() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getNumVectors() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getNumVectors() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMultiVector_getLocalLength(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getLocalLength() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->getLocalLength();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getLocalLength() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getLocalLength() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getLocalLength() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT long _wrap_TpetraMultiVector_getGlobalLength(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getGlobalLength() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->getGlobalLength();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getGlobalLength() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getGlobalLength() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getGlobalLength() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraMultiVector_getStride(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getStride() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->getStride();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getStride() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getStride() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getStride() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMultiVector_isConstantStride(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isConstantStride() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->isConstantStride();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isConstantStride() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isConstantStride() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isConstantStride() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraMultiVector_description(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  std::string result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::description() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::description() const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::description() const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::description() const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.size = (&result)->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, (&result)->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT void _wrap_TpetraMultiVector_removeEmptyProcessesInPlace(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeEmptyProcessesInPlace((Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_setCopyOrView(SwigClassWrapper const *farg1, int const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::DataAccess arg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Teuchos::DataAccess >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::setCopyOrView(Teuchos::DataAccess const)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setCopyOrView(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::setCopyOrView(Teuchos::DataAccess const)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::setCopyOrView(Teuchos::DataAccess const)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::setCopyOrView(Teuchos::DataAccess const)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraMultiVector_getCopyOrView(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::DataAccess result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getCopyOrView() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Teuchos::DataAccess)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->getCopyOrView();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getCopyOrView() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getCopyOrView() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::getCopyOrView() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraMultiVector_isSameSize(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  int fresult ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::isSameSize(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", return 0)
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isSameSize(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::MultiVector< SC,LO,GO,NO > const *)arg1)->isSameSize((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isSameSize(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isSameSize(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::isSameSize(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraMultiVector_doImport__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg2 = 0 ;
  Tpetra::Import< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< SC,LO,GO,NO > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Import< LO,GO,NO > *", "TpetraImport", "Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_0(arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_doImport__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg2 = 0 ;
  Tpetra::Export< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< SC,LO,GO,NO > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Export< LO,GO,NO > *", "TpetraExport", "Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_1(arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doImport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_doExport__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg2 = 0 ;
  Tpetra::Export< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< SC,LO,GO,NO > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Export< LO,GO,NO > *", "TpetraExport", "Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_0(arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_doExport__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg2 = 0 ;
  Tpetra::Import< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< SC,LO,GO,NO > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Import< LO,GO,NO > *", "TpetraImport", "Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_MultiVector_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_1(arg1,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MultiVector< SC,LO,GO,NO >::doExport(Tpetra::MultiVector< SC,LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMultiVector_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MultiVector< SC,LO,GO,NO > *arg1 = (Tpetra::MultiVector< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< SC,LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< SC,LO,GO,NO > *", "TpetraMultiVector", "Tpetra::MultiVector< SC,LO,GO,NO >::operator =(Tpetra::MultiVector< SC,LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >, SWIGPOLICY_Tpetra__MultiVectorT_double_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_delete_TpetraOperator(SwigClassWrapper *farg1) {
  Tpetra::Operator< SC,LO,GO,NO > *arg1 = (Tpetra::Operator< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Operator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::Operator< SC,LO,GO,NO >::~Operator()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Operator< SC,LO,GO,NO >::~Operator()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::Operator< SC,LO,GO,NO >::~Operator()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::Operator< SC,LO,GO,NO >::~Operator()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraOperator_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::Operator< SC,LO,GO,NO > *arg1 = (Tpetra::Operator< SC,LO,GO,NO > *) 0 ;
  Tpetra::Operator< SC,LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::Operator<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::Operator< SC,LO,GO,NO > *", "TpetraOperator", "Tpetra::Operator< SC,LO,GO,NO >::operator =(Tpetra::Operator< SC,LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::Operator<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >, SWIGPOLICY_Tpetra__OperatorT_double_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT void * _wrap_ForTpetraOperator_fhandle(SwigClassWrapper const *farg1) {
  void * fresult ;
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  Teuchos::RCP< ForTpetraOperator const > *smartarg1 ;
  void *result = 0 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::fhandle() const");;
    try
    {
      // Attempt the wrapped function call
      result = (void *)((ForTpetraOperator const *)arg1)->fhandle();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::fhandle() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::fhandle() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::fhandle() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = result;
  return fresult;
}


SWIGEXPORT void _wrap_ForTpetraOperator_init(SwigClassWrapper const *farg1, void *farg2) {
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  void *arg2 = (void *) 0 ;
  Teuchos::RCP< ForTpetraOperator > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  arg2 = reinterpret_cast< void * >(farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::init(void *)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->init(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::init(void *)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::init(void *)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::init(void *)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_new_ForTpetraOperator() {
  SwigClassWrapper fresult ;
  ForTpetraOperator *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::ForTpetraOperator()");;
    try
    {
      // Attempt the wrapped function call
      result = (ForTpetraOperator *)new ForTpetraOperator();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::ForTpetraOperator()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::ForTpetraOperator()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::ForTpetraOperator()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< ForTpetraOperator >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ForTpetraOperator_getDomainMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  Teuchos::RCP< ForTpetraOperator const > *smartarg1 ;
  Teuchos::RCP< ForTpetraOperator::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::getDomainMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForTpetraOperator const *)arg1)->getDomainMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::getDomainMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::getDomainMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::getDomainMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_ForTpetraOperator_getRangeMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  Teuchos::RCP< ForTpetraOperator const > *smartarg1 ;
  Teuchos::RCP< ForTpetraOperator::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::getRangeMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((ForTpetraOperator const *)arg1)->getRangeMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::getRangeMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::getRangeMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::getRangeMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_ForTpetraOperator_apply(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4, double const *farg5, double const *farg6) {
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  ForTpetraOperator::vector_type *arg2 = 0 ;
  ForTpetraOperator::vector_type *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  SC arg5 ;
  SC arg6 ;
  Teuchos::RCP< ForTpetraOperator const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "ForTpetraOperator::vector_type *", "TpetraMultiVector", "ForTpetraOperator::apply(ForTpetraOperator::vector_type const &,ForTpetraOperator::vector_type &,Teuchos::ETransp,SC,SC) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "ForTpetraOperator::vector_type *", "TpetraMultiVector", "ForTpetraOperator::apply(ForTpetraOperator::vector_type const &,ForTpetraOperator::vector_type &,Teuchos::ETransp,SC,SC) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  arg5 = static_cast< SC >(*farg5);
  arg6 = static_cast< SC >(*farg6);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::apply(ForTpetraOperator::vector_type const &,ForTpetraOperator::vector_type &,Teuchos::ETransp,SC,SC) const");;
    try
    {
      // Attempt the wrapped function call
      ((ForTpetraOperator const *)arg1)->apply((ForTpetraOperator::vector_type const &)*arg2,*arg3,arg4,arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::apply(ForTpetraOperator::vector_type const &,ForTpetraOperator::vector_type &,Teuchos::ETransp,SC,SC) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::apply(ForTpetraOperator::vector_type const &,ForTpetraOperator::vector_type &,Teuchos::ETransp,SC,SC) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::apply(ForTpetraOperator::vector_type const &,ForTpetraOperator::vector_type &,Teuchos::ETransp,SC,SC) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_delete_ForTpetraOperator(SwigClassWrapper *farg1) {
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  Teuchos::RCP< ForTpetraOperator > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTpetraOperator::~ForTpetraOperator()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::~ForTpetraOperator()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTpetraOperator::~ForTpetraOperator()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("ForTpetraOperator::~ForTpetraOperator()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_ForTpetraOperator_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  ForTpetraOperator *arg1 = (ForTpetraOperator *) 0 ;
  ForTpetraOperator *arg2 = 0 ;
  Teuchos::RCP< ForTpetraOperator > *smartarg1 ;
  Teuchos::RCP< ForTpetraOperator > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< ForTpetraOperator >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< ForTpetraOperator* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "ForTpetraOperator *", "ForTpetraOperator", "ForTpetraOperator::operator =(ForTpetraOperator &)", return )
  smartarg2 = static_cast< Teuchos::RCP< ForTpetraOperator >* >(farg2->cptr);
  arg2 = const_cast< ForTpetraOperator* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< ForTpetraOperator >, SWIGPOLICY_ForTpetraOperator>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_RowInfo_localRow_set(SwigClassWrapper const *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::localRow", return );
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  arg2 = static_cast< size_t >(*farg2);
  if (arg1) (arg1)->localRow = arg2;
}


SWIGEXPORT size_t _wrap_RowInfo_localRow_get(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::localRow", return 0);
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  result = (size_t) ((arg1)->localRow);
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT void _wrap_RowInfo_allocSize_set(SwigClassWrapper const *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::allocSize", return );
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  arg2 = static_cast< size_t >(*farg2);
  if (arg1) (arg1)->allocSize = arg2;
}


SWIGEXPORT size_t _wrap_RowInfo_allocSize_get(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::allocSize", return 0);
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  result = (size_t) ((arg1)->allocSize);
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT void _wrap_RowInfo_numEntries_set(SwigClassWrapper const *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::numEntries", return );
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  arg2 = static_cast< size_t >(*farg2);
  if (arg1) (arg1)->numEntries = arg2;
}


SWIGEXPORT size_t _wrap_RowInfo_numEntries_get(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::numEntries", return 0);
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  result = (size_t) ((arg1)->numEntries);
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT void _wrap_RowInfo_offset1D_set(SwigClassWrapper const *farg1, size_t const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t arg2 ;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::offset1D", return );
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  arg2 = static_cast< size_t >(*farg2);
  if (arg1) (arg1)->offset1D = arg2;
}


SWIGEXPORT size_t _wrap_RowInfo_offset1D_get(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  size_t result;
  
  SWIG_check_mutable_nonnull(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::offset1D", return 0);
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  result = (size_t) ((arg1)->offset1D);
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_RowInfo() {
  SwigClassWrapper fresult ;
  Tpetra::RowInfo *result = 0 ;
  
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::RowInfo::RowInfo()");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::RowInfo *)new Tpetra::RowInfo();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::RowInfo::RowInfo()", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::RowInfo::RowInfo()", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::RowInfo::RowInfo()", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result;
  fresult.cmemflags = SWIG_MEM_RVALUE | (1 ? SWIG_MEM_OWN : 0);
  return fresult;
}


SWIGEXPORT void _wrap_delete_RowInfo(SwigClassWrapper *farg1) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  
  SWIG_check_mutable(*farg1, "Tpetra::RowInfo *", "RowInfo", "Tpetra::RowInfo::~RowInfo()", return );
  arg1 = static_cast< Tpetra::RowInfo * >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::RowInfo::~RowInfo()");;
    try
    {
      // Attempt the wrapped function call
      delete arg1;
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::RowInfo::~RowInfo()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::RowInfo::~RowInfo()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::RowInfo::~RowInfo()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_RowInfo_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::RowInfo *arg1 = (Tpetra::RowInfo *) 0 ;
  Tpetra::RowInfo *arg2 = 0 ;
  
  (void)sizeof(arg1);
  (void)sizeof(arg2);
  SWIG_assign<Tpetra::RowInfo, SWIGPOLICY_Tpetra__RowInfo>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_0(SwigClassWrapper const *farg1, size_t const *farg2, int const *farg3, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_1(SwigClassWrapper const *farg1, size_t const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_2(SwigClassWrapper const *farg1, size_t const *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_3(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, int const *farg3, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< unsigned long const > tmpview2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< std::size_t const > const &)*arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_4(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< unsigned long const > tmpview2 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< std::size_t const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_5(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< unsigned long const > tmpview2 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< std::size_t const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_6(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3, int const *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_7(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_8(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_9(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, int const *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg3 = 0 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayView< unsigned long const > tmpview3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpview3 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayView< std::size_t const > const &)*arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_10(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg3 = 0 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayView< unsigned long const > tmpview3 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpview3 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayView< std::size_t const > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_11(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayView< unsigned long const > tmpview3 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpview3 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayView< std::size_t const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_12(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayRCP< std::size_t > *arg3 = 0 ;
  Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > *arg4 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayRCP< std::size_t >::value_type *tmpbegin3 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< std::size_t >::value_type >::type > tmparr3 ;
  Teuchos::ArrayRCP< std::size_t > tmprcp3 ;
  Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >::value_type *tmpbegin4 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >::value_type >::type > tmparr4 ;
  Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > tmprcp4 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpbegin3 = static_cast<Teuchos::ArrayRCP< std::size_t >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmprcp3 = tmparr3;
  arg3 = &tmprcp3;
  tmpbegin4 = static_cast<Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >::value_type*>(farg4->data);
  tmparr4.resize(farg4->size);
  for (int i = 0; i < tmparr4.size(); i++)
  tmparr4[i] = tmpbegin4[i] - 1;
  tmprcp4 = tmparr4;
  arg4 = &tmprcp4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayRCP< std::size_t > const &)*arg3,(Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)*arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_13(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayRCP< std::size_t > *arg3 = 0 ;
  Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayRCP< std::size_t >::value_type *tmpbegin3 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< std::size_t >::value_type >::type > tmparr3 ;
  Teuchos::ArrayRCP< std::size_t > tmprcp3 ;
  Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >::value_type *tmpbegin4 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >::value_type >::type > tmparr4 ;
  Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > tmprcp4 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpbegin3 = static_cast<Teuchos::ArrayRCP< std::size_t >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmprcp3 = tmparr3;
  arg3 = &tmprcp3;
  tmpbegin4 = static_cast<Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >::value_type*>(farg4->data);
  tmparr4.resize(farg4->size);
  for (int i = 0; i < tmparr4.size(); i++)
  tmparr4[i] = tmpbegin4[i] - 1;
  tmprcp4 = tmparr4;
  arg4 = &tmprcp4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayRCP< std::size_t > const &)*arg3,(Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsGraph__SWIG_14(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Tpetra::CrsGraph< LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsGraph< LO,GO,NO > *)new Tpetra::CrsGraph< LO,GO,NO >((Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::CrsGraph(Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::node_type > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraCrsGraph(SwigClassWrapper *farg1) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::~CrsGraph()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::~CrsGraph()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::~CrsGraph()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::~CrsGraph()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isIdenticalTo(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg2 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::isIdenticalTo(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", return 0)
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isIdenticalTo(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isIdenticalTo((Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isIdenticalTo(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isIdenticalTo(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isIdenticalTo(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsGraph_setParameterList(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::setParameterList(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setParameterList((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::setParameterList(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::setParameterList(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::setParameterList(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getValidParameters(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getValidParameters() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getValidParameters();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getValidParameters() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getValidParameters() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getValidParameters() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Teuchos::ParameterList >(static_cast< const Teuchos::RCP<const Teuchos::ParameterList >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsGraph_insertGlobalIndices__SWIG_0(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type >(*farg2);
  tmpview3 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalIndices(arg2,(Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_insertGlobalIndices__SWIG_1(SwigClassWrapper const *farg1, long long const *farg2, int const *farg3, long long const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg3 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type *arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type >(*farg2);
  arg3 = static_cast< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type >(*farg3);
  arg4 = const_cast< long long * >(farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const [])");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalIndices(arg2,arg3,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const (*))arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const [])", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const [])", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertGlobalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type const [])", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_insertLocalIndices(SwigClassWrapper const *farg1, int const *farg2, SwigArrayWrapper *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg2 ;
  Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const >::value_type *tmpbegin3 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const >::value_type >::type > tmparr3 ;
  Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > tmpview3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  tmpbegin3 = static_cast<Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmpview3 = tmparr3();
  arg3 = &tmpview3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertLocalIndices(arg2,(Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::insertLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_removeLocalIndices(SwigClassWrapper const *farg1, int const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeLocalIndices(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeLocalIndices(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_globalAssemble(SwigClassWrapper const *farg1) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::globalAssemble()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->globalAssemble();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::globalAssemble()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::globalAssemble()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::globalAssemble()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_resumeFill__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_resumeFill__SWIG_1(SwigClassWrapper const *farg1) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::resumeFill()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_fillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_fillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_fillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_fillComplete__SWIG_3(SwigClassWrapper const *farg1) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::fillComplete()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_expertStaticFillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_expertStaticFillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > tempnull5 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_expertStaticFillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_expertStaticFillComplete__SWIG_3(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getComm(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getComm() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getComm() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getComm() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getComm() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Teuchos::Comm<int> >(static_cast< const Teuchos::RCP<const Teuchos::Comm<int> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getRowMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRowMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getRowMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRowMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRowMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRowMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getColMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getColMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getColMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getColMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getColMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getDomainMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getDomainMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getDomainMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getDomainMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getDomainMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getDomainMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getRangeMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRangeMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getRangeMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRangeMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRangeMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getRangeMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getImporter(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getImporter() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getImporter();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getImporter() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getImporter() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getImporter() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsGraph_getExporter(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getExporter() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getExporter();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getExporter() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getExporter() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getExporter() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT long _wrap_TpetraCrsGraph_getGlobalNumRows(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumRows() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getGlobalNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumRows() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumRows() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumRows() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT long _wrap_TpetraCrsGraph_getGlobalNumCols(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumCols() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getGlobalNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumCols() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumCols() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumCols() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNodeNumRows(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumRows() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNodeNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumRows() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumRows() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumRows() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNodeNumCols(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumCols() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNodeNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumCols() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumCols() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumCols() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT long _wrap_TpetraCrsGraph_getGlobalNumEntries(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getGlobalNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalNumEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNodeNumEntries(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNodeNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeNumEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNumEntriesInGlobalRow(SwigClassWrapper const *farg1, long long const *farg2) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNumEntriesInGlobalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_getNumEntriesInLocalRow(SwigClassWrapper const *farg1, int const *farg2) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNumEntriesInLocalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNodeAllocationSize(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeAllocationSize() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNodeAllocationSize();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeAllocationSize() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeAllocationSize() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeAllocationSize() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNumAllocatedEntriesInGlobalRow(SwigClassWrapper const *farg1, long long const *farg2) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNumAllocatedEntriesInGlobalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInGlobalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_getNumAllocatedEntriesInLocalRow(SwigClassWrapper const *farg1, int const *farg2) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNumAllocatedEntriesInLocalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNumAllocatedEntriesInLocalRow(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getGlobalMaxNumRowEntries(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalMaxNumRowEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getGlobalMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalMaxNumRowEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalMaxNumRowEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalMaxNumRowEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsGraph_getNodeMaxNumRowEntries(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeMaxNumRowEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getNodeMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeMaxNumRowEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeMaxNumRowEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeMaxNumRowEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_hasColMap(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::hasColMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->hasColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::hasColMap() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::hasColMap() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::hasColMap() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isLocallyIndexed(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isLocallyIndexed() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isLocallyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isLocallyIndexed() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isLocallyIndexed() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isLocallyIndexed() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isGloballyIndexed(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isGloballyIndexed() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isGloballyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isGloballyIndexed() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isGloballyIndexed() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isGloballyIndexed() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isFillComplete(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillComplete() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isFillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillComplete() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillComplete() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillComplete() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isFillActive(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillActive() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isFillActive();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillActive() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillActive() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isFillActive() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isSorted(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isSorted() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isSorted();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isSorted() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isSorted() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isSorted() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_isStorageOptimized(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isStorageOptimized() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->isStorageOptimized();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isStorageOptimized() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isStorageOptimized() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::isStorageOptimized() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_getProfileType(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Tpetra::ProfileType result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getProfileType() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::ProfileType)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getProfileType();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getProfileType() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getProfileType() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getProfileType() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsGraph_getGlobalRowCopy(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3, size_t *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type arg2 ;
  Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type > *arg3 = 0 ;
  size_t *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long > tmpview3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type >(*farg2);
  tmpview3 = Teuchos::ArrayView<long long>(static_cast<long long*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  arg4 = reinterpret_cast< size_t * >(farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type > const &,size_t &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getGlobalRowCopy(arg2,(Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type > const &)*arg3,*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type > const &,size_t &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type > const &,size_t &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getGlobalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type > const &,size_t &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_getLocalRowCopy(SwigClassWrapper const *farg1, int const *farg2, SwigArrayWrapper *farg3, size_t *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg2 ;
  Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > *arg3 = 0 ;
  size_t *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< int > tmpview3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  tmpview3 = Teuchos::ArrayView<int>(static_cast<int*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  arg4 = reinterpret_cast< size_t * >(farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getLocalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,size_t &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->getLocalRowCopy(arg2,(Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &)*arg3,*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getLocalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,size_t &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getLocalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,size_t &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getLocalRowCopy(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Teuchos::ArrayView< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type > const &,size_t &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  for (int i = 0; i < tmpview3.size(); i++)
  tmpview3[i] += 1;
}


SWIGEXPORT int _wrap_TpetraCrsGraph_supportsRowViews(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::supportsRowViews() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->supportsRowViews();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::supportsRowViews() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::supportsRowViews() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::supportsRowViews() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraCrsGraph_description(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  std::string result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::description() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::description() const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::description() const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::description() const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.size = (&result)->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, (&result)->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsGraph_replaceColMap(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceColMap((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_reindexColumns__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg3 = 0 ;
  bool arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = (*farg4 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_reindexColumns__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_reindexColumns__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::reindexColumns(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_replaceDomainMapAndImporter(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceDomainMapAndImporter((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_removeEmptyProcessesInPlace(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeEmptyProcessesInPlace((Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_importAndFillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_importAndFillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_importAndFillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6, SwigClassWrapper const *farg7) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg3 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg6 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull6 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull7 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  SWIG_check_sp_nonnull(farg4, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg4->get());
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg6->cptr) : &tempnull6;
  arg7 = farg7->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg7->cptr) : &tempnull7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg3,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg6,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_exportAndFillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_exportAndFillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_exportAndFillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_exportAndFillComplete__SWIG_3(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_exportAndFillComplete__SWIG_4(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6, SwigClassWrapper const *farg7) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg6 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull6 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull7 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  SWIG_check_sp_nonnull(farg4, "Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg4->get());
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg6->cptr) : &tempnull6;
  arg7 = farg7->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg7->cptr) : &tempnull7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg4,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg6,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsGraph< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::global_ordinal_type,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraCrsGraph_haveGlobalConstants(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::haveGlobalConstants() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsGraph< LO,GO,NO > const *)arg1)->haveGlobalConstants();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::haveGlobalConstants() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::haveGlobalConstants() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::haveGlobalConstants() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsGraph_computeGlobalConstants(SwigClassWrapper const *farg1, int const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  bool arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = (*farg2 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::computeGlobalConstants(bool const)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->computeGlobalConstants(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::computeGlobalConstants(bool const)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::computeGlobalConstants(bool const)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::computeGlobalConstants(bool const)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_getNodeRowPtrs(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = Teuchos::ArrayView<unsigned long>(static_cast<unsigned long*>(farg2->data), farg2->size);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeRowPtrs(Teuchos::ArrayView< std::size_t >) const");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__getNodeRowPtrs((Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeRowPtrs(Teuchos::ArrayView< std::size_t >) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeRowPtrs(Teuchos::ArrayView< std::size_t >) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodeRowPtrs(Teuchos::ArrayView< std::size_t >) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_getNodePackedIndices(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< std::size_t > arg2 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = Teuchos::ArrayView<unsigned long>(static_cast<unsigned long*>(farg2->data), farg2->size);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodePackedIndices(Teuchos::ArrayView< std::size_t >) const");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__getNodePackedIndices((Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodePackedIndices(Teuchos::ArrayView< std::size_t >) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodePackedIndices(Teuchos::ArrayView< std::size_t >) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::getNodePackedIndices(Teuchos::ArrayView< std::size_t >) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_doImport__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< LO,GO,NO > *arg2 = 0 ;
  Tpetra::Import< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsGraph< LO,GO,NO > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Import< LO,GO,NO > *", "TpetraImport", "Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_0(arg1,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_doImport__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< LO,GO,NO > *arg2 = 0 ;
  Tpetra::Export< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsGraph< LO,GO,NO > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Export< LO,GO,NO > *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doImport__SWIG_1(arg1,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doImport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_doExport__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< LO,GO,NO > *arg2 = 0 ;
  Tpetra::Export< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsGraph< LO,GO,NO > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Export< LO,GO,NO > *", "TpetraExport", "Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_0(arg1,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Export< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Export< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_doExport__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< LO,GO,NO > *arg2 = 0 ;
  Tpetra::Import< LO,GO,NO > *arg3 = 0 ;
  Tpetra::CombineMode arg4 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsGraph< LO,GO,NO > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::Import< LO,GO,NO > *", "TpetraImport", "Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Tpetra::CombineMode >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsGraph_Sl_LO_Sc_GO_Sc_NO_Sg__doExport__SWIG_1(arg1,(Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,(Tpetra::Import< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsGraph< LO,GO,NO >::doExport(Tpetra::CrsGraph< LO,GO,NO > const &,Tpetra::Import< LO,GO,NO > const &,Tpetra::CombineMode)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsGraph_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsGraph< LO,GO,NO > *arg1 = (Tpetra::CrsGraph< LO,GO,NO > *) 0 ;
  Tpetra::CrsGraph< LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsGraph< LO,GO,NO > *", "TpetraCrsGraph", "Tpetra::CrsGraph< LO,GO,NO >::operator =(Tpetra::CrsGraph< LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >, SWIGPOLICY_Tpetra__CrsGraphT_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_0(SwigClassWrapper const *farg1, size_t const *farg2, int const *farg3, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_1(SwigClassWrapper const *farg1, size_t const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_2(SwigClassWrapper const *farg1, size_t const *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  size_t arg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = static_cast< size_t >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_3(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, int const *farg3, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< unsigned long const > tmpview2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< std::size_t const > const &)*arg2,arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_4(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Tpetra::ProfileType arg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< unsigned long const > tmpview2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  arg3 = static_cast< Tpetra::ProfileType >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< std::size_t const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_5(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::ArrayView< unsigned long const > tmpview2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  tmpview2 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg2->data), farg2->size);
  arg2 = &tmpview2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::ArrayView< std::size_t const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_6(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3, int const *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_7(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_8(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, size_t const *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  size_t arg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = static_cast< size_t >(*farg3);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,size_t const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_9(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, int const *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg3 = 0 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayView< unsigned long const > tmpview3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull5 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpview3 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayView< std::size_t const > const &)*arg3,arg4,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_10(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, int const *farg4) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg3 = 0 ;
  Tpetra::ProfileType arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayView< unsigned long const > tmpview3 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpview3 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  arg4 = static_cast< Tpetra::ProfileType >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayView< std::size_t const > const &)*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &,Tpetra::ProfileType const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_11(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayView< std::size_t const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayView< unsigned long const > tmpview3 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpview3 = Teuchos::ArrayView<unsigned long const>(static_cast<unsigned long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayView< std::size_t const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayView< std::size_t const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_12(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > *arg1 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > tempnull1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &)*arg1,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_13(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > tempnull1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > * >(farg1->cptr) : &tempnull1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &)*arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_18(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4, SwigArrayWrapper *farg5, SwigClassWrapper const *farg6) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayRCP< std::size_t > *arg3 = 0 ;
  Teuchos::ArrayRCP< int > *arg4 = 0 ;
  Teuchos::ArrayRCP< double > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayRCP< std::size_t >::value_type *tmpbegin3 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< std::size_t >::value_type >::type > tmparr3 ;
  Teuchos::ArrayRCP< std::size_t > tmprcp3 ;
  Teuchos::ArrayRCP< int >::value_type *tmpbegin4 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< int >::value_type >::type > tmparr4 ;
  Teuchos::ArrayRCP< int > tmprcp4 ;
  Teuchos::ArrayRCP< double > tmparr5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpbegin3 = static_cast<Teuchos::ArrayRCP< std::size_t >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmprcp3 = tmparr3;
  arg3 = &tmprcp3;
  tmpbegin4 = static_cast<Teuchos::ArrayRCP< int >::value_type*>(farg4->data);
  tmparr4.resize(farg4->size);
  for (int i = 0; i < tmparr4.size(); i++)
  tmparr4[i] = tmpbegin4[i] - 1;
  tmprcp4 = tmparr4;
  arg4 = &tmprcp4;
  tmparr5 = Teuchos::ArrayRCP<double>(static_cast<double*>(farg5->data), 0, farg5->size, false, Teuchos::RCP_DISABLE_NODE_LOOKUP);
  arg5 = &tmparr5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayRCP< std::size_t > const &)*arg3,(Teuchos::ArrayRCP< int > const &)*arg4,(Teuchos::ArrayRCP< double > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_19(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4, SwigArrayWrapper *farg5) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg1 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::ArrayRCP< std::size_t > *arg3 = 0 ;
  Teuchos::ArrayRCP< int > *arg4 = 0 ;
  Teuchos::ArrayRCP< double > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::ArrayRCP< std::size_t >::value_type *tmpbegin3 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< std::size_t >::value_type >::type > tmparr3 ;
  Teuchos::ArrayRCP< std::size_t > tmprcp3 ;
  Teuchos::ArrayRCP< int >::value_type *tmpbegin4 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< int >::value_type >::type > tmparr4 ;
  Teuchos::ArrayRCP< int > tmprcp4 ;
  Teuchos::ArrayRCP< double > tmparr5 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  arg1 = farg1->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg1->cptr) : &tempnull1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  tmpbegin3 = static_cast<Teuchos::ArrayRCP< std::size_t >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmprcp3 = tmparr3;
  arg3 = &tmprcp3;
  tmpbegin4 = static_cast<Teuchos::ArrayRCP< int >::value_type*>(farg4->data);
  tmparr4.resize(farg4->size);
  for (int i = 0; i < tmparr4.size(); i++)
  tmparr4[i] = tmpbegin4[i] - 1;
  tmprcp4 = tmparr4;
  arg4 = &tmprcp4;
  tmparr5 = Teuchos::ArrayRCP<double>(static_cast<double*>(farg5->data), 0, farg5->size, false, Teuchos::RCP_DISABLE_NODE_LOOKUP);
  arg5 = &tmparr5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::ArrayRCP< std::size_t > const &)*arg3,(Teuchos::ArrayRCP< int > const &)*arg4,(Teuchos::ArrayRCP< double > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_new_TpetraCrsMatrix__SWIG_26(SwigClassWrapper const *farg1, int const *farg2) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  Teuchos::DataAccess arg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *result = 0 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", return SwigClassWrapper_uninitialized())
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = static_cast< Teuchos::DataAccess >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< SC,LO,GO,NO > *)new Tpetra::CrsMatrix< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::CrsMatrix(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Teuchos::DataAccess const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = result ? new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(result SWIG_NO_NULL_DELETER_1) : NULL;
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraCrsMatrix(SwigClassWrapper *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::~CrsMatrix()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::~CrsMatrix()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::~CrsMatrix()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::~CrsMatrix()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_insertGlobalValues(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  tmpview3 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_insertLocalValues(SwigClassWrapper const *farg1, int const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  Teuchos::ArrayView< int const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< int const >::value_type *tmpbegin3 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< int const >::value_type >::type > tmparr3 ;
  Teuchos::ArrayView< int const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  tmpbegin3 = static_cast<Teuchos::ArrayView< int const >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmpview3 = tmparr3();
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->insertLocalValues(arg2,(Teuchos::ArrayView< int const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::insertLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_replaceGlobalValues(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  tmpview3 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->replaceGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_replaceLocalValues__SWIG_1(SwigClassWrapper const *farg1, int const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  Teuchos::ArrayView< int const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< int const >::value_type *tmpbegin3 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< int const >::value_type >::type > tmparr3 ;
  Teuchos::ArrayView< int const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  tmpbegin3 = static_cast<Teuchos::ArrayView< int const >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmpview3 = tmparr3();
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->replaceLocalValues(arg2,(Teuchos::ArrayView< int const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_replaceLocalValues__SWIG_2(SwigClassWrapper const *farg1, int const *farg2, int const *farg3, double const *farg4, int const *farg5) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  int arg3 ;
  double *arg4 ;
  int *arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  int result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  arg3 = static_cast< int >(*farg3);
  arg4 = const_cast< double * >(farg4);
  arg5 = const_cast< int * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,int const,double const [],int const []) const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->replaceLocalValues(arg2,arg3,(double const (*))arg4,(int const (*))arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,int const,double const [],int const []) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,int const,double const [],int const []) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceLocalValues(int const,int const,double const [],int const []) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_sumIntoGlobalValues__SWIG_0(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  int result;
  
  {
    arg5 = false;
  }
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  tmpview3 = Teuchos::ArrayView<long long const>(static_cast<long long const*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      result = (int)(arg1)->sumIntoGlobalValues(arg2,(Teuchos::ArrayView< long long const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &,bool const)", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &,bool const)", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoGlobalValues(long long const,Teuchos::ArrayView< long long const > const &,Teuchos::ArrayView< double const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_sumIntoLocalValues__SWIG_0(SwigClassWrapper const *farg1, int const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  Teuchos::ArrayView< int const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< int const >::value_type *tmpbegin3 ;
  Teuchos::Array< std::remove_const< Teuchos::ArrayView< int const >::value_type >::type > tmparr3 ;
  Teuchos::ArrayView< int const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  int result;
  
  {
    arg5 = false;
  }
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  tmpbegin3 = static_cast<Teuchos::ArrayView< int const >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmpview3 = tmparr3();
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double const>(static_cast<double const*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &,bool const) const");;
    try
    {
      // Attempt the wrapped function call
      result = (int)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->sumIntoLocalValues(arg2,(Teuchos::ArrayView< int const > const &)*arg3,(Teuchos::ArrayView< double const > const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &,bool const) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &,bool const) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::sumIntoLocalValues(int const,Teuchos::ArrayView< int const > const &,Teuchos::ArrayView< double const > const &,bool const) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_setAllToScalar(SwigClassWrapper const *farg1, double const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllToScalar(double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setAllToScalar((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllToScalar(double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllToScalar(double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllToScalar(double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_scale(SwigClassWrapper const *farg1, double const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  double *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  double temp2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  temp2 = static_cast< double >(*farg2);
  arg2 = &temp2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::scale(double const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->scale((double const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::scale(double const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::scale(double const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::scale(double const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_setAllValues__SWIG_1(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayRCP< std::size_t > *arg2 = 0 ;
  Teuchos::ArrayRCP< int > *arg3 = 0 ;
  Teuchos::ArrayRCP< double > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::ArrayRCP< std::size_t >::value_type *tmpbegin2 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< std::size_t >::value_type >::type > tmparr2 ;
  Teuchos::ArrayRCP< std::size_t > tmprcp2 ;
  Teuchos::ArrayRCP< int >::value_type *tmpbegin3 ;
  Teuchos::ArrayRCP< std::remove_const< Teuchos::ArrayRCP< int >::value_type >::type > tmparr3 ;
  Teuchos::ArrayRCP< int > tmprcp3 ;
  Teuchos::ArrayRCP< double > tmparr4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  tmpbegin2 = static_cast<Teuchos::ArrayRCP< std::size_t >::value_type*>(farg2->data);
  tmparr2.resize(farg2->size);
  for (int i = 0; i < tmparr2.size(); i++)
  tmparr2[i] = tmpbegin2[i] - 1;
  tmprcp2 = tmparr2;
  arg2 = &tmprcp2;
  tmpbegin3 = static_cast<Teuchos::ArrayRCP< int >::value_type*>(farg3->data);
  tmparr3.resize(farg3->size);
  for (int i = 0; i < tmparr3.size(); i++)
  tmparr3[i] = tmpbegin3[i] - 1;
  tmprcp3 = tmparr3;
  arg3 = &tmprcp3;
  tmparr4 = Teuchos::ArrayRCP<double>(static_cast<double*>(farg4->data), 0, farg4->size, false, Teuchos::RCP_DISABLE_NODE_LOOKUP);
  arg4 = &tmparr4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllValues(Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->setAllValues((Teuchos::ArrayRCP< std::size_t > const &)*arg2,(Teuchos::ArrayRCP< int > const &)*arg3,(Teuchos::ArrayRCP< double > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllValues(Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllValues(Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::setAllValues(Teuchos::ArrayRCP< std::size_t > const &,Teuchos::ArrayRCP< int > const &,Teuchos::ArrayRCP< double > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_globalAssemble(SwigClassWrapper const *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::globalAssemble()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->globalAssemble();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::globalAssemble()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::globalAssemble()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::globalAssemble()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_resumeFill__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_resumeFill__SWIG_1(SwigClassWrapper const *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->resumeFill();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::resumeFill()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_fillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_fillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_fillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete((Teuchos::RCP< Teuchos::ParameterList > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete(Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_fillComplete__SWIG_3(SwigClassWrapper const *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->fillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::fillComplete()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_expertStaticFillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_expertStaticFillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > tempnull5 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_expertStaticFillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_expertStaticFillComplete__SWIG_3(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->expertStaticFillComplete((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::expertStaticFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_replaceColMap(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceColMap((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceColMap(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_reindexColumns__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, int const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *arg2 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *) (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *)0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  bool arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = smartarg2 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get()) : NULL;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = (*farg5 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns(arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_reindexColumns__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *arg2 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *) (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *)0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = smartarg2 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get()) : NULL;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns(arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_reindexColumns__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *arg2 = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *) (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *)0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsGraph< LO,GO,NO > > *smartarg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >* >(farg2->cptr);
  arg2 = smartarg2 ? const_cast< Tpetra::CrsGraph<LO,GO,NO>* >(smartarg2->get()) : NULL;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->reindexColumns(arg2,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::reindexColumns(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type *const,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_replaceDomainMapAndImporter(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > tempnull3 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->replaceDomainMapAndImporter((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::replaceDomainMapAndImporter(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const > &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_removeEmptyProcessesInPlace(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->removeEmptyProcessesInPlace((Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::removeEmptyProcessesInPlace(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsMatrix_getComm(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Teuchos::Comm< int > const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getComm() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getComm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getComm() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getComm() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getComm() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Teuchos::Comm<int> >(static_cast< const Teuchos::RCP<const Teuchos::Comm<int> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsMatrix_getRowMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRowMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getRowMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRowMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRowMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRowMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsMatrix_getColMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getColMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getColMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getColMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getColMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsMatrix_getCrsGraph(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::crs_graph_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getCrsGraph() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getCrsGraph();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getCrsGraph() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getCrsGraph() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getCrsGraph() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::CrsGraph<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT long _wrap_TpetraCrsMatrix_getGlobalNumRows(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumRows() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getGlobalNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumRows() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumRows() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumRows() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT long _wrap_TpetraCrsMatrix_getGlobalNumCols(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumCols() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getGlobalNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumCols() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumCols() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumCols() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsMatrix_getNodeNumRows(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumRows() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getNodeNumRows();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumRows() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumRows() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumRows() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsMatrix_getNodeNumCols(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumCols() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getNodeNumCols();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumCols() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumCols() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumCols() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT long _wrap_TpetraCrsMatrix_getGlobalNumEntries(SwigClassWrapper const *farg1) {
  long fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::global_size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::global_size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getGlobalNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalNumEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::global_size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsMatrix_getNodeNumEntries(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getNodeNumEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeNumEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsMatrix_getNumEntriesInGlobalRow(SwigClassWrapper const *farg1, long long const *farg2) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInGlobalRow(long long) const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getNumEntriesInGlobalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInGlobalRow(long long) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInGlobalRow(long long) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInGlobalRow(long long) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_getNumEntriesInLocalRow(SwigClassWrapper const *farg1, int const *farg2) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type arg2 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getNumEntriesInLocalRow(arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNumEntriesInLocalRow(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::local_ordinal_type) const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsMatrix_getGlobalMaxNumRowEntries(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalMaxNumRowEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getGlobalMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalMaxNumRowEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalMaxNumRowEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalMaxNumRowEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT size_t _wrap_TpetraCrsMatrix_getNodeMaxNumRowEntries(SwigClassWrapper const *farg1) {
  size_t fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  size_t result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeMaxNumRowEntries() const");;
    try
    {
      // Attempt the wrapped function call
      result = (size_t)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getNodeMaxNumRowEntries();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeMaxNumRowEntries() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeMaxNumRowEntries() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getNodeMaxNumRowEntries() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< size_t >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_hasColMap(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasColMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->hasColMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasColMap() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasColMap() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasColMap() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_isLocallyIndexed(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isLocallyIndexed() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->isLocallyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isLocallyIndexed() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isLocallyIndexed() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isLocallyIndexed() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_isGloballyIndexed(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isGloballyIndexed() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->isGloballyIndexed();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isGloballyIndexed() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isGloballyIndexed() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isGloballyIndexed() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_isFillComplete(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillComplete() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->isFillComplete();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillComplete() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillComplete() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillComplete() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_isFillActive(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillActive() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->isFillActive();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillActive() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillActive() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isFillActive() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_isStorageOptimized(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStorageOptimized() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->isStorageOptimized();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStorageOptimized() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStorageOptimized() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStorageOptimized() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_getProfileType(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::ProfileType result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getProfileType() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::ProfileType)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getProfileType();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getProfileType() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getProfileType() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getProfileType() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< int >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_isStaticGraph(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStaticGraph() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->isStaticGraph();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStaticGraph() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStaticGraph() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::isStaticGraph() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT double _wrap_TpetraCrsMatrix_getFrobeniusNorm(SwigClassWrapper const *farg1) {
  double fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getFrobeniusNorm() const");;
    try
    {
      // Attempt the wrapped function call
      result = (Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getFrobeniusNorm();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getFrobeniusNorm() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getFrobeniusNorm() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getFrobeniusNorm() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = static_cast< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::mag_type >(result);
  return fresult;
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_supportsRowViews(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::supportsRowViews() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->supportsRowViews();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::supportsRowViews() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::supportsRowViews() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::supportsRowViews() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_getGlobalRowCopy(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4, size_t *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long > *arg3 = 0 ;
  Teuchos::ArrayView< double > *arg4 = 0 ;
  size_t *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long > tmpview3 ;
  Teuchos::ArrayView< double > tmpview4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  tmpview3 = Teuchos::ArrayView<long long>(static_cast<long long*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double>(static_cast<double*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  arg5 = reinterpret_cast< size_t * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowCopy(long long,Teuchos::ArrayView< long long > const &,Teuchos::ArrayView< double > const &,size_t &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getGlobalRowCopy(arg2,(Teuchos::ArrayView< long long > const &)*arg3,(Teuchos::ArrayView< double > const &)*arg4,*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowCopy(long long,Teuchos::ArrayView< long long > const &,Teuchos::ArrayView< double > const &,size_t &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowCopy(long long,Teuchos::ArrayView< long long > const &,Teuchos::ArrayView< double > const &,size_t &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowCopy(long long,Teuchos::ArrayView< long long > const &,Teuchos::ArrayView< double > const &,size_t &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_getLocalRowCopy(SwigClassWrapper const *farg1, int const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4, size_t *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  int arg2 ;
  Teuchos::ArrayView< int > *arg3 = 0 ;
  Teuchos::ArrayView< double > *arg4 = 0 ;
  size_t *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< int > tmpview3 ;
  Teuchos::ArrayView< double > tmpview4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = *farg2 - 1;
  tmpview3 = Teuchos::ArrayView<int>(static_cast<int*>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView<double>(static_cast<double*>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  arg5 = reinterpret_cast< size_t * >(farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getLocalRowCopy(int,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< double > const &,size_t &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getLocalRowCopy(arg2,(Teuchos::ArrayView< int > const &)*arg3,(Teuchos::ArrayView< double > const &)*arg4,*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getLocalRowCopy(int,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< double > const &,size_t &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getLocalRowCopy(int,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< double > const &,size_t &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getLocalRowCopy(int,Teuchos::ArrayView< int > const &,Teuchos::ArrayView< double > const &,size_t &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  for (int i = 0; i < tmpview3.size(); i++)
  tmpview3[i] += 1;
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_getGlobalRowView(SwigClassWrapper const *farg1, long long const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  long long arg2 ;
  Teuchos::ArrayView< long long const > *arg3 = 0 ;
  Teuchos::ArrayView< double const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::ArrayView< long long const > tmpview3 ;
  Teuchos::ArrayView< double const > tmpview4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = static_cast< long long >(*farg2);
  tmpview3 = Teuchos::ArrayView< long long const >(static_cast<Teuchos::ArrayView< long long const >::pointer>(farg3->data), farg3->size);
  arg3 = &tmpview3;
  tmpview4 = Teuchos::ArrayView< double const >(static_cast<Teuchos::ArrayView< double const >::pointer>(farg4->data), farg4->size);
  arg4 = &tmpview4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowView(long long,Teuchos::ArrayView< long long const > &,Teuchos::ArrayView< double const > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getGlobalRowView(arg2,*arg3,*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowView(long long,Teuchos::ArrayView< long long const > &,Teuchos::ArrayView< double const > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowView(long long,Teuchos::ArrayView< long long const > &,Teuchos::ArrayView< double const > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getGlobalRowView(long long,Teuchos::ArrayView< long long const > &,Teuchos::ArrayView< double const > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
  farg3->data = (void*)tmpview3.getRawPtr();
  farg3->size = tmpview3.size();
  farg4->data = (void*)tmpview4.getRawPtr();
  farg4->size = tmpview4.size();
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_localApply__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4, double const *farg5, double const *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  double *arg5 = 0 ;
  double *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  double temp5 ;
  double temp6 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &,double const &) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &,double const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  temp5 = static_cast< double >(*farg5);
  arg5 = &temp5;
  temp6 = static_cast< double >(*farg6);
  arg6 = &temp6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &,double const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->localApply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,arg4,(double const &)*arg5,(double const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &,double const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &,double const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &,double const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_localApply__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4, double const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  double *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  double temp5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  temp5 = static_cast< double >(*farg5);
  arg5 = &temp5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->localApply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,arg4,(double const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const,double const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_localApply__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->localApply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp const) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_localApply__SWIG_3(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->localApply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::localApply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_apply__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4, double const *farg5, double const *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  double arg5 ;
  double arg6 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double,double) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double,double) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  arg5 = static_cast< double >(*farg5);
  arg6 = static_cast< double >(*farg6);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double,double) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,arg4,arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double,double) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double,double) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double,double) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_apply__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4, double const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  double arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  arg5 = static_cast< double >(*farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp,double) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_apply__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, int const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::ETransp arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = static_cast< Teuchos::ETransp >(*farg4);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Teuchos::ETransp) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_apply__SWIG_3(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->apply((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::apply(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_hasTransposeApply(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasTransposeApply() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->hasTransposeApply();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasTransposeApply() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasTransposeApply() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::hasTransposeApply() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsMatrix_getDomainMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getDomainMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getDomainMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getDomainMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getDomainMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getDomainMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraCrsMatrix_getRangeMap(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRangeMap() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->getRangeMap();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRangeMap() const", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRangeMap() const", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getRangeMap() const", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_gaussSeidel(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, double const *farg5, int const *farg6, int const *farg7) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg4 = 0 ;
  double *arg5 = 0 ;
  Tpetra::ESweepDirection arg6 ;
  int arg7 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg4 ;
  double temp5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const", return )
  smartarg2 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const", return )
  smartarg3 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  SWIG_check_sp_nonnull(farg4, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg4->get());
  temp5 = static_cast< double >(*farg5);
  arg5 = &temp5;
  arg6 = static_cast< Tpetra::ESweepDirection >(*farg6);
  arg7 = static_cast< int >(*farg7);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->gaussSeidel((Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg2,*arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg4,(double const &)*arg5,arg6,arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidel(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_gaussSeidelCopy(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, double const *farg5, int const *farg6, int const *farg7, int const *farg8) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg2 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg4 = 0 ;
  double *arg5 = 0 ;
  Tpetra::ESweepDirection arg6 ;
  int arg7 ;
  bool arg8 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > > *smartarg2 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::MultiVector< SC,LO,GO,NO > const > *smartarg4 ;
  double temp5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_check_sp_nonnull(farg3, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg3->get());
  SWIG_check_sp_nonnull(farg4, "Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraMultiVector", "Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::MultiVector<SC,LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::MultiVector<SC,LO,GO,NO>* >(smartarg4->get());
  temp5 = static_cast< double >(*farg5);
  arg5 = &temp5;
  arg6 = static_cast< Tpetra::ESweepDirection >(*farg6);
  arg7 = static_cast< int >(*farg7);
  arg8 = (*farg8 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->gaussSeidelCopy(*arg2,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg4,(double const &)*arg5,arg6,arg7,arg8);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::gaussSeidelCopy(Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,double const &,Tpetra::ESweepDirection const,int const,bool const) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT SwigArrayWrapper _wrap_TpetraCrsMatrix_description(SwigClassWrapper const *farg1) {
  SwigArrayWrapper fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  std::string result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::description() const");;
    try
    {
      // Attempt the wrapped function call
      result = ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->description();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::description() const", SWIG_IndexError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::description() const", SWIG_RuntimeError, e.what(), return SwigArrayWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::description() const", SWIG_UnknownError, "An unknown exception occurred", return SwigArrayWrapper_uninitialized());
    }
  }
  fresult.size = (&result)->size();
  if (fresult.size > 0) {
    fresult.data = malloc(fresult.size);
    memcpy(fresult.data, (&result)->c_str(), fresult.size);
  } else {
    fresult.data = NULL;
  }
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_importAndFillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_importAndFillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_importAndFillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6, SwigClassWrapper const *farg7) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg3 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg6 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::Import< LO,GO,NO > const > *smartarg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull6 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull7 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg3->get());
  SWIG_check_sp_nonnull(farg4, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type *", "TpetraImport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::Import<LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::Import<LO,GO,NO>* >(smartarg4->get());
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg6->cptr) : &tempnull6;
  arg7 = farg7->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg7->cptr) : &tempnull7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->importAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg3,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg6,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::importAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::import_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_exportAndFillComplete__SWIG_0(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg6 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull6 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg6->cptr) : &tempnull6;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_exportAndFillComplete__SWIG_1(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_exportAndFillComplete__SWIG_2(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull4 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_exportAndFillComplete__SWIG_3(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_exportAndFillComplete__SWIG_4(SwigClassWrapper const *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, SwigClassWrapper const *farg6, SwigClassWrapper const *farg7) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > *arg2 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg3 = 0 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *arg4 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > *arg6 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > tempnull2 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::Export< LO,GO,NO > const > *smartarg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > tempnull6 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull7 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > * >(farg2->cptr) : &tempnull2;
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg3->get());
  SWIG_check_sp_nonnull(farg4, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type *", "TpetraExport", "Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::Export<LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::Export<LO,GO,NO>* >(smartarg4->get());
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = farg6->cptr ? static_cast< Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > * >(farg6->cptr) : &tempnull6;
  arg7 = farg7->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg7->cptr) : &tempnull7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const");;
    try
    {
      // Attempt the wrapped function call
      ((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->exportAndFillComplete(*arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg3,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &)*arg4,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg5,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &)*arg6,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::exportAndFillComplete(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::export_type const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode >::map_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_computeGlobalConstants(SwigClassWrapper const *farg1) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::computeGlobalConstants()");;
    try
    {
      // Attempt the wrapped function call
      (arg1)->computeGlobalConstants();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::computeGlobalConstants()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::computeGlobalConstants()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::computeGlobalConstants()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT int _wrap_TpetraCrsMatrix_haveGlobalConstants(SwigClassWrapper const *farg1) {
  int fresult ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  bool result;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::haveGlobalConstants() const");;
    try
    {
      // Attempt the wrapped function call
      result = (bool)((Tpetra::CrsMatrix< SC,LO,GO,NO > const *)arg1)->haveGlobalConstants();
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::haveGlobalConstants() const", SWIG_IndexError, e.what(), return 0);
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::haveGlobalConstants() const", SWIG_RuntimeError, e.what(), return 0);
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::haveGlobalConstants() const", SWIG_UnknownError, "An unknown exception occurred", return 0);
    }
  }
  fresult = (result ? 1 : 0);
  return fresult;
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_getAllValues(SwigClassWrapper const *farg1, SwigArrayWrapper *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Teuchos::ArrayView< std::size_t > arg2 ;
  Teuchos::ArrayView< LO > arg3 ;
  Teuchos::ArrayView< SC > arg4 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  arg2 = Teuchos::ArrayView<unsigned long>(static_cast<unsigned long*>(farg2->data), farg2->size);
  arg3 = Teuchos::ArrayView<int>(static_cast<int*>(farg3->data), farg3->size);
  arg4 = Teuchos::ArrayView<double>(static_cast<double*>(farg4->data), farg4->size);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getAllValues(Teuchos::ArrayView< std::size_t >,Teuchos::ArrayView< LO >,Teuchos::ArrayView< SC >) const");;
    try
    {
      // Attempt the wrapped function call
      Tpetra_CrsMatrix_Sl_SC_Sc_LO_Sc_GO_Sc_NO_Sg__getAllValues((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const *)arg1,arg2,arg3,arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getAllValues(Teuchos::ArrayView< std::size_t >,Teuchos::ArrayView< LO >,Teuchos::ArrayView< SC >) const", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getAllValues(Teuchos::ArrayView< std::size_t >,Teuchos::ArrayView< LO >,Teuchos::ArrayView< SC >) const", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::CrsMatrix< SC,LO,GO,NO >::getAllValues(Teuchos::ArrayView< std::size_t >,Teuchos::ArrayView< LO >,Teuchos::ArrayView< SC >) const", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraCrsMatrix_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg1 = (Tpetra::CrsMatrix< SC,LO,GO,NO > *) 0 ;
  Tpetra::CrsMatrix< SC,LO,GO,NO > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::CrsMatrix< SC,LO,GO,NO > *", "TpetraCrsMatrix", "Tpetra::CrsMatrix< SC,LO,GO,NO >::operator =(Tpetra::CrsMatrix< SC,LO,GO,NO > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >, SWIGPOLICY_Tpetra__CrsMatrixT_double_int_long_long_Kokkos__Compat__KokkosSerialWrapperNode_t>(farg1, *farg2);
  
}


SWIGEXPORT SwigClassWrapper _wrap_operator_to_matrix(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > > arg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > result;
  
  if (farg1->cptr) arg1 = *static_cast< Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >* >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::operator_to_matrix< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > >)");;
    try
    {
      // Attempt the wrapped function call
      result = ForTrilinos::SWIGTEMPLATEDISAMBIGUATOR operator_to_matrix< SC,LO,GO,NO >(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::operator_to_matrix< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > >)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::operator_to_matrix< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > >)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::operator_to_matrix< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > >)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_matrix_to_operator(SwigClassWrapper const *farg1) {
  SwigClassWrapper fresult ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > arg1 ;
  Teuchos::RCP< Tpetra::Operator< SC,LO,GO,NO > > result;
  
  if (farg1->cptr) arg1 = *static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("ForTrilinos::matrix_to_operator< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > >)");;
    try
    {
      // Attempt the wrapped function call
      result = ForTrilinos::SWIGTEMPLATEDISAMBIGUATOR matrix_to_operator< SC,LO,GO,NO >(arg1);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::matrix_to_operator< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > >)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("ForTrilinos::matrix_to_operator< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > >)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("ForTrilinos::matrix_to_operator< SC,LO,GO,NO >(Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > >)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::Operator<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseGraphFile__SWIG_0(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  bool arg3 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_graph_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = (*farg3 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseGraphFile__SWIG_1(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_graph_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseGraphFile__SWIG_2(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_graph_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseGraphFile__SWIG_3(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, int const *farg6) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg5 = 0 ;
  bool arg6 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_graph_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = (*farg6 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,*arg3,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg4,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseGraphFile__SWIG_4(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg5 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_graph_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,*arg3,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg4,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsGraph<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseFile__SWIG_0(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, int const *farg3) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  bool arg3 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = (*farg3 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2,arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseFile__SWIG_1(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseFile__SWIG_2(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg3 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg4 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull3 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull4 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg4->cptr) : &tempnull4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg3,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Teuchos::ParameterList > const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseFile__SWIG_3(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5, int const *farg6) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg5 = 0 ;
  bool arg6 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg5->cptr) : &tempnull5;
  arg6 = (*farg6 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,*arg3,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg4,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,bool const)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readSparseFile__SWIG_4(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3, SwigClassWrapper const *farg4, SwigClassWrapper const *farg5) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > *arg3 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg4 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > *arg5 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull4 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > tempnull5 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > * >(farg3->cptr) : &tempnull3;
  arg4 = farg4->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg4->cptr) : &tempnull4;
  arg5 = farg5->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > * >(farg5->cptr) : &tempnull5;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readSparseFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,*arg3,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg4,(Teuchos::RCP< Tpetra::Map< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::map_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readDenseFile(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigClassWrapper const *farg3) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > *arg3 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > tempnull3 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  arg3 = farg3->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > * >(farg3->cptr) : &tempnull3;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readDenseFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2,*arg3);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >(static_cast< const Teuchos::RCP< Tpetra::MultiVector<SC,LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_sp_mem_flags;
  return fresult;
}


SWIGEXPORT SwigClassWrapper _wrap_TpetraReader_readMapFile(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2) {
  SwigClassWrapper fresult ;
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > *arg2 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > tempnull2 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::map_type const > result;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readMapFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      result = Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR readMapFile((std::string const &)*arg1,(Teuchos::RCP< Teuchos::Comm< int > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readMapFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_IndexError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readMapFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_RuntimeError, e.what(), return SwigClassWrapper_uninitialized());
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::readMapFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::comm_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return SwigClassWrapper_uninitialized());
    }
  }
  fresult.cptr = (new Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >(static_cast< const Teuchos::RCP<const Tpetra::Map<LO,GO,NO> >& >(result)));
  fresult.cmemflags = SWIG_MEM_OWN | SWIG_MEM_RVALUE | SWIG_constsp_mem_flags;
  return fresult;
}


SWIGEXPORT void _wrap_delete_TpetraReader(SwigClassWrapper *farg1) {
  Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > *arg1 = (Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > *) 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> > >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Reader()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Reader()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Reader()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Reader()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraReader_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > *arg1 = (Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > *) 0 ;
  Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> > >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > *", "TpetraReader", "Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > >::operator =(Tpetra::MatrixMarket::Reader< Tpetra::CrsMatrix< SC,LO,GO,NO > > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> > >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::MatrixMarket::Reader<Tpetra::CrsMatrix<SC,LO,GO,NO> > >, SWIGPOLICY_Tpetra__MatrixMarket__ReaderT_Tpetra__CrsMatrixT_SC_LO_GO_NO_t_t>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_TpetraWriter_writeSparseFile__SWIG_0(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > tempnull2 ;
  std::string tempstr3 ;
  std::string tempstr4 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > * >(farg2->cptr) : &tempnull2;
  tempstr3 = std::string(static_cast<const char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  tempstr4 = std::string(static_cast<const char *>(farg4->data), farg4->size);
  arg4 = &tempstr4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &,std::string const &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR writeSparseFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &,std::string const &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &,std::string const &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &,std::string const &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraWriter_writeSparseFile__SWIG_1(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2) {
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > *arg2 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > tempnull2 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR writeSparseFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::sparse_matrix_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraWriter_writeSparseGraphFile__SWIG_0(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > tempnull2 ;
  std::string tempstr3 ;
  std::string tempstr4 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > * >(farg2->cptr) : &tempnull2;
  tempstr3 = std::string(static_cast<const char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  tempstr4 = std::string(static_cast<const char *>(farg4->data), farg4->size);
  arg4 = &tempstr4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &,std::string const &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR writeSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &,std::string const &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &,std::string const &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &,std::string const &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraWriter_writeSparseGraphFile__SWIG_1(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2) {
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > *arg2 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > tempnull2 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR writeSparseGraphFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::CrsGraph< int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeSparseGraphFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::crs_graph_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraWriter_writeDenseFile__SWIG_0(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2, SwigArrayWrapper *farg3, SwigArrayWrapper *farg4) {
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > tempnull2 ;
  std::string tempstr3 ;
  std::string tempstr4 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > * >(farg2->cptr) : &tempnull2;
  tempstr3 = std::string(static_cast<const char *>(farg3->data), farg3->size);
  arg3 = &tempstr3;
  tempstr4 = std::string(static_cast<const char *>(farg4->data), farg4->size);
  arg4 = &tempstr4;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &,std::string const &,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR writeDenseFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &,std::string const &,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &,std::string const &,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &,std::string const &,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraWriter_writeDenseFile__SWIG_1(SwigArrayWrapper *farg1, SwigClassWrapper const *farg2) {
  std::string *arg1 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > *arg2 = 0 ;
  std::string tempstr1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > tempnull2 ;
  
  tempstr1 = std::string(static_cast<const char *>(farg1->data), farg1->size);
  arg1 = &tempstr1;
  arg2 = farg2->cptr ? static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > * >(farg2->cptr) : &tempnull2;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::SWIGTEMPLATEDISAMBIGUATOR writeDenseFile((std::string const &)*arg1,(Teuchos::RCP< Tpetra::MultiVector< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const > const &)*arg2);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::writeDenseFile(std::string const &,Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >::multivector_type const > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_delete_TpetraWriter(SwigClassWrapper *farg1) {
  Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > *arg1 = (Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > *) 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > > *smartarg1 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> > >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(smartarg1->get()) : NULL;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Writer()");;
    try
    {
      // Attempt the wrapped function call
      (void)arg1; delete smartarg1; 
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Writer()", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Writer()", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::~Writer()", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraWriter_op_assign__(SwigClassWrapper *farg1, SwigClassWrapper const *farg2) {
  Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > *arg1 = (Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > *) 0 ;
  Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > *arg2 = 0 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > > *smartarg1 ;
  Teuchos::RCP< Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > > *smartarg2 ;
  
  smartarg1 = static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> > >* >(farg1->cptr);
  arg1 = smartarg1 ? const_cast< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(smartarg1->get()) : NULL;
  SWIG_check_sp_nonnull(farg2, "Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > *", "TpetraWriter", "Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > >::operator =(Tpetra::MatrixMarket::Writer< Tpetra::CrsMatrix< SC,LO,GO,NO > > &)", return )
  smartarg2 = static_cast< Teuchos::RCP< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> > >* >(farg2->cptr);
  arg2 = const_cast< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(smartarg2->get());
  SWIG_assign<Teuchos::RCP< Tpetra::MatrixMarket::Writer<Tpetra::CrsMatrix<SC,LO,GO,NO> > >, SWIGPOLICY_Tpetra__MatrixMarket__WriterT_Tpetra__CrsMatrixT_SC_LO_GO_NO_t_t>(farg1, *farg2);
  
}


SWIGEXPORT void _wrap_TpetraMatrixMatrixMultiply__SWIG_0(SwigClassWrapper const *farg1, int const *farg2, SwigClassWrapper const *farg3, int const *farg4, SwigClassWrapper const *farg5, int const *farg6, SwigArrayWrapper *farg7, SwigClassWrapper const *farg8) {
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  bool arg2 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  bool arg4 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg5 = 0 ;
  bool arg6 ;
  std::string *arg7 = 0 ;
  Teuchos::RCP< Teuchos::ParameterList > *arg8 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg5 ;
  std::string tempstr7 ;
  Teuchos::RCP< Teuchos::ParameterList > tempnull8 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = (*farg2 ? true : false);
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = (*farg4 ? true : false);
  SWIG_check_sp_nonnull(farg5, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)", return )
  smartarg5 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg5->cptr);
  arg5 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg5->get());
  arg6 = (*farg6 ? true : false);
  tempstr7 = std::string(static_cast<const char *>(farg7->data), farg7->size);
  arg7 = &tempstr7;
  arg8 = farg8->cptr ? static_cast< Teuchos::RCP< Teuchos::ParameterList > * >(farg8->cptr) : &tempnull8;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMatrix::SWIGTEMPLATEDISAMBIGUATOR Multiply< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4,*arg5,arg6,(std::string const &)*arg7,(Teuchos::RCP< Teuchos::ParameterList > const &)*arg8);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &,Teuchos::RCP< Teuchos::ParameterList > const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMatrixMatrixMultiply__SWIG_1(SwigClassWrapper const *farg1, int const *farg2, SwigClassWrapper const *farg3, int const *farg4, SwigClassWrapper const *farg5, int const *farg6, SwigArrayWrapper *farg7) {
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  bool arg2 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  bool arg4 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg5 = 0 ;
  bool arg6 ;
  std::string *arg7 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg5 ;
  std::string tempstr7 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = (*farg2 ? true : false);
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = (*farg4 ? true : false);
  SWIG_check_sp_nonnull(farg5, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)", return )
  smartarg5 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg5->cptr);
  arg5 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg5->get());
  arg6 = (*farg6 ? true : false);
  tempstr7 = std::string(static_cast<const char *>(farg7->data), farg7->size);
  arg7 = &tempstr7;
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMatrix::SWIGTEMPLATEDISAMBIGUATOR Multiply< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4,*arg5,arg6,(std::string const &)*arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool,std::string const &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMatrixMatrixMultiply__SWIG_2(SwigClassWrapper const *farg1, int const *farg2, SwigClassWrapper const *farg3, int const *farg4, SwigClassWrapper const *farg5, int const *farg6) {
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  bool arg2 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  bool arg4 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg5 = 0 ;
  bool arg6 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg5 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = (*farg2 ? true : false);
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = (*farg4 ? true : false);
  SWIG_check_sp_nonnull(farg5, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)", return )
  smartarg5 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg5->cptr);
  arg5 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg5->get());
  arg6 = (*farg6 ? true : false);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMatrix::SWIGTEMPLATEDISAMBIGUATOR Multiply< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4,*arg5,arg6);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,bool)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMatrixMatrixMultiply__SWIG_3(SwigClassWrapper const *farg1, int const *farg2, SwigClassWrapper const *farg3, int const *farg4, SwigClassWrapper const *farg5) {
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  bool arg2 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg3 = 0 ;
  bool arg4 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg5 = 0 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg3 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg5 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = (*farg2 ? true : false);
  SWIG_check_sp_nonnull(farg3, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", return )
  smartarg3 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg3->cptr);
  arg3 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg3->get());
  arg4 = (*farg4 ? true : false);
  SWIG_check_sp_nonnull(farg5, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", return )
  smartarg5 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg5->cptr);
  arg5 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg5->get());
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMatrix::SWIGTEMPLATEDISAMBIGUATOR Multiply< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg3,arg4,*arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMatrix::Multiply< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMatrixMatrixAdd__SWIG_0(SwigClassWrapper const *farg1, int const *farg2, double const *farg3, SwigClassWrapper const *farg4, double const *farg5) {
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  bool arg2 ;
  double arg3 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg4 = 0 ;
  double arg5 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > > *smartarg4 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,double)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = (*farg2 ? true : false);
  arg3 = static_cast< double >(*farg3);
  SWIG_check_sp_nonnull(farg4, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,double)", return )
  smartarg4 = static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg4->get());
  arg5 = static_cast< double >(*farg5);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,double)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMatrix::SWIGTEMPLATEDISAMBIGUATOR Add< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2,arg3,*arg4,arg5);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,double)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,double)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > &,double)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


SWIGEXPORT void _wrap_TpetraMatrixMatrixAdd__SWIG_1(SwigClassWrapper const *farg1, int const *farg2, double const *farg3, SwigClassWrapper const *farg4, int const *farg5, double const *farg6, SwigClassWrapper const *farg7) {
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg1 = 0 ;
  bool arg2 ;
  double arg3 ;
  Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *arg4 = 0 ;
  bool arg5 ;
  double arg6 ;
  Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > > arg7 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg1 ;
  Teuchos::RCP< Tpetra::CrsMatrix< SC,LO,GO,NO > const > *smartarg4 ;
  
  SWIG_check_sp_nonnull(farg1, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >)", return )
  smartarg1 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg1->cptr);
  arg1 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg1->get());
  arg2 = (*farg2 ? true : false);
  arg3 = static_cast< double >(*farg3);
  SWIG_check_sp_nonnull(farg4, "Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > *", "TpetraCrsMatrix", "Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >)", return )
  smartarg4 = static_cast< Teuchos::RCP<const Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg4->cptr);
  arg4 = const_cast< Tpetra::CrsMatrix<SC,LO,GO,NO>* >(smartarg4->get());
  arg5 = (*farg5 ? true : false);
  arg6 = static_cast< double >(*farg6);
  if (farg7->cptr) arg7 = *static_cast< Teuchos::RCP< Tpetra::CrsMatrix<SC,LO,GO,NO> >* >(farg7->cptr);
  {
    // Make sure no unhandled exceptions exist before performing a new action
    SWIG_check_unhandled_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >)");;
    try
    {
      // Attempt the wrapped function call
      Tpetra::MatrixMatrix::SWIGTEMPLATEDISAMBIGUATOR Add< SC,LO,GO,NO >((Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg1,arg2,arg3,(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &)*arg4,arg5,arg6,arg7);
    }
    catch (const std::range_error& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >)", SWIG_IndexError, e.what(), return );
    }
    catch (const std::exception& e)
    {
      // Store a C++ exception
      SWIG_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >)", SWIG_RuntimeError, e.what(), return );
    }
    catch (...)
    {
      SWIG_exception_impl("Tpetra::MatrixMatrix::Add< SC,LO,GO,NO >(Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > const &,bool,double,Teuchos::RCP< Tpetra::CrsMatrix< double,int,long long,Kokkos::Compat::KokkosSerialWrapperNode > >)", SWIG_UnknownError, "An unknown exception occurred", return );
    }
  }
}


} // extern

